!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	includeheaders/molfile_plugin.h	/^  float A, B, C, alpha, beta, gamma; $/;"	m	struct:__anon73
A2NM	includeheaders/physics.h	64;"	d
AI	legacyheaders/macros.h	52;"	d
AJ	legacyheaders/macros.h	53;"	d
AK	legacyheaders/macros.h	54;"	d
AL	legacyheaders/macros.h	55;"	d
AM	legacyheaders/macros.h	56;"	d
AMU	includeheaders/physics.h	71;"	d
ANGSTROM	includeheaders/physics.h	60;"	d
ATOMICMASS_keV	includeheaders/physics.h	85;"	d
AVOGADRO	includeheaders/physics.h	73;"	d
AllvsAll_work	includeheaders/types/forcerec.h	/^  void *AllvsAll_work;$/;"	m	struct:__anon157
AllvsAll_workgb	includeheaders/types/forcerec.h	/^  void *AllvsAll_workgb;$/;"	m	struct:__anon157
Atom	structure/pdb_structure.h	/^} Atom;$/;"	t	typeref:struct:__anon48
B	includeheaders/molfile_plugin.h	/^  float A, B, C, alpha, beta, gamma; $/;"	m	struct:__anon73
BHAMA	includeheaders/types/forcerec.h	374;"	d
BHAMB	includeheaders/types/forcerec.h	375;"	d
BHAMC	includeheaders/types/forcerec.h	373;"	d
BIG_STRLEN	legacyheaders/types/simple.h	262;"	d
BOHR2NM	includeheaders/physics.h	101;"	d
BOLTZ	includeheaders/physics.h	75;"	d
BOLTZMANN	includeheaders/physics.h	72;"	d
BOOL_NR	legacyheaders/types/simple.h	88;"	d
C	includeheaders/molfile_plugin.h	/^  float A, B, C, alpha, beta, gamma; $/;"	m	struct:__anon73
C0	legacyheaders/macros.h	57;"	d
C1	legacyheaders/macros.h	58;"	d
C12	includeheaders/types/forcerec.h	372;"	d
C2	legacyheaders/macros.h	59;"	d
C3	legacyheaders/macros.h	60;"	d
C4	legacyheaders/macros.h	61;"	d
C5	legacyheaders/macros.h	62;"	d
C6	includeheaders/types/forcerec.h	371;"	d
CADistCutoff	g_sa_encode.c	/^float CADistCutoff = 6.0;$/;"	v
CAL2JOULE	includeheaders/physics.h	68;"	d
CASelectrons	includeheaders/types/inputrec.h	/^  int     *CASelectrons;\/* number of electrons in the active space      *\/$/;"	m	struct:__anon160
CASorbitals	includeheaders/types/inputrec.h	/^  int     *CASorbitals; \/* number of orbiatls in the active space       *\/$/;"	m	struct:__anon160
CENTRAL	includeheaders/types/ishift.h	50;"	d
CODE_H_	statistics/code.h	23;"	d
CalcQuarticCoeffs	structure/quatRMSD.c	/^CalcQuarticCoeffs(const double **coords1, const double **coords2, const int len, double *coeff)$/;"	f	file:
CenterCoords	structure/quatRMSD.c	/^CenterCoords(double **coords, const int len)$/;"	f
Collection	partition/score.h	/^} Collection;$/;"	t	typeref:struct:__anon137
ConstantFragmentSet	structure/fragments_coords.h	/^} ConstantFragmentSet;$/;"	t	typeref:struct:__anon66
CoordsInnerProd	structure/quatRMSD.c	/^CoordsInnerProd(const double **coords, const int len)$/;"	f	file:
DEBYE2ENM	includeheaders/physics.h	94;"	d
DEFORM	includeheaders/types/inputrec.h	289;"	d
DEG2RAD	includeheaders/physics.h	67;"	d
DIM	legacyheaders/types/simple.h	61;"	d
DYNAMIC_BOX	includeheaders/types/inputrec.h	291;"	d
D_BOX_X	includeheaders/types/ishift.h	45;"	d
D_BOX_Y	includeheaders/types/ishift.h	44;"	d
D_BOX_Z	includeheaders/types/ishift.h	43;"	d
Data	partition/value.h	/^} Data;$/;"	t	typeref:struct:__anon166
Dins	includeheaders/types/fcdata.h	/^  rvec5  *Dins;       \/* The ensemble averaged D (nr x 5)                   *\/$/;"	m	struct:__anon64
Dinsl	includeheaders/types/fcdata.h	/^  rvec5  *Dinsl;      \/* The order matrix D for all restraints (nr x 5)     *\/$/;"	m	struct:__anon64
DllMain	includeheaders/vmdplugin.h	/^BOOL APIENTRY DllMain( HANDLE hModule,$/;"	f
Dtav	includeheaders/types/fcdata.h	/^  rvec5  *Dtav;       \/* The time and ensemble averaged D (nr x 5)          *\/$/;"	m	struct:__anon64
E0	includeheaders/types/inputrec.h	/^  real E0;              \/* Field strength (V\/nm)                        *\/$/;"	m	struct:__anon159
EEL_FULL	includeheaders/types/enums.h	93;"	d
EEL_IS_ZERO_AT_CUTOFF	includeheaders/types/enums.h	97;"	d
EEL_MIGHT_BE_ZERO_AT_CUTOFF	includeheaders/types/enums.h	99;"	d
EEL_PME	includeheaders/types/enums.h	92;"	d
EEL_RF	includeheaders/types/enums.h	90;"	d
EEL_SWITCHED	includeheaders/types/enums.h	95;"	d
EGP_EXCL	includeheaders/types/inputrec.h	60;"	d
EGP_TABLE	includeheaders/types/inputrec.h	61;"	d
EI_DYNAMICS	includeheaders/types/enums.h	125;"	d
EI_ENERGY_MINIMIZATION	includeheaders/types/enums.h	126;"	d
EI_RANDOM	includeheaders/types/enums.h	123;"	d
EI_SD	includeheaders/types/enums.h	122;"	d
EI_STATE_VELOCITY	includeheaders/types/enums.h	129;"	d
EI_TPI	includeheaders/types/enums.h	127;"	d
EI_VV	includeheaders/types/enums.h	121;"	d
ELECTRONMASS_keV	includeheaders/physics.h	86;"	d
ELECTRONVOLT	includeheaders/physics.h	77;"	d
ENCODE_H	sequence/encode.h	23;"	d
ENM2DEBYE	includeheaders/physics.h	92;"	d
EPSILON0	includeheaders/physics.h	81;"	d
EST_DISTR	includeheaders/types/state.h	66;"	d
ETerm	includeheaders/types/fcdata.h	/^  real ETerm;         \/* multiplication factor for time averaging         *\/$/;"	m	struct:__anon63
ETerm1	includeheaders/types/fcdata.h	/^  real ETerm1;        \/* 1 - ETerm1                                       *\/$/;"	m	struct:__anon63
EVDW_IS_ZERO_AT_CUTOFF	includeheaders/types/enums.h	107;"	d
EVDW_MIGHT_BE_ZERO_AT_CUTOFF	includeheaders/types/enums.h	109;"	d
EVDW_SWITCHED	includeheaders/types/enums.h	105;"	d
EXP_ADDR	includeheaders/vec.h	131;"	d
EXP_LSB	includeheaders/vec.h	125;"	d
EXP_MASK	includeheaders/vec.h	126;"	d
EXP_SHIFT	includeheaders/vec.h	127;"	d
E_CHARGE	includeheaders/physics.h	69;"	d
Element	statistics/probability.h	/^} Element;$/;"	t	typeref:struct:__anon50
FACEL	includeheaders/physics.h	89;"	d
FALSE	legacyheaders/types/simple.h	83;"	d
FARADAY	includeheaders/physics.h	76;"	d
FIELDFAC	includeheaders/physics.h	97;"	d
FRACT_ADDR	includeheaders/vec.h	132;"	d
FRACT_MASK	includeheaders/vec.h	128;"	d
FRACT_SHIFT	includeheaders/vec.h	130;"	d
FRACT_SIZE	includeheaders/vec.h	129;"	d
FRAGMENTS_H	structure/fragments.h	23;"	d
FRAGMENT_COLOUR_H	structure/fragment_colour.h	23;"	d
FRAGMENT_COORDS_H	structure/fragments_coords.h	23;"	d
F_ANGLES	includeheaders/types/idef.h	/^  F_ANGLES, $/;"	e	enum:__anon6
F_ANGRES	includeheaders/types/idef.h	/^  F_ANGRES,$/;"	e	enum:__anon6
F_ANGRESZ	includeheaders/types/idef.h	/^  F_ANGRESZ,$/;"	e	enum:__anon6
F_BHAM	includeheaders/types/idef.h	/^  F_BHAM,$/;"	e	enum:__anon6
F_BHAM_LR	includeheaders/types/idef.h	/^  F_BHAM_LR,$/;"	e	enum:__anon6
F_BONDS	includeheaders/types/idef.h	/^  F_BONDS,$/;"	e	enum:__anon6
F_CMAP	includeheaders/types/idef.h	/^  F_CMAP,$/;"	e	enum:__anon6
F_COM_PULL	includeheaders/types/idef.h	/^  F_COM_PULL,$/;"	e	enum:__anon6
F_CONNBONDS	includeheaders/types/idef.h	/^  F_CONNBONDS,$/;"	e	enum:__anon6
F_CONSTR	includeheaders/types/idef.h	/^  F_CONSTR,$/;"	e	enum:__anon6
F_CONSTRNC	includeheaders/types/idef.h	/^  F_CONSTRNC,$/;"	e	enum:__anon6
F_COUL14	includeheaders/types/idef.h	/^  F_COUL14,$/;"	e	enum:__anon6
F_COUL_LR	includeheaders/types/idef.h	/^  F_COUL_LR,$/;"	e	enum:__anon6
F_COUL_RECIP	includeheaders/types/idef.h	/^  F_COUL_RECIP,$/;"	e	enum:__anon6
F_COUL_SR	includeheaders/types/idef.h	/^  F_COUL_SR,$/;"	e	enum:__anon6
F_CROSS_BOND_ANGLES	includeheaders/types/idef.h	/^  F_CROSS_BOND_ANGLES,$/;"	e	enum:__anon6
F_CROSS_BOND_BONDS	includeheaders/types/idef.h	/^  F_CROSS_BOND_BONDS,$/;"	e	enum:__anon6
F_CUBICBONDS	includeheaders/types/idef.h	/^  F_CUBICBONDS,$/;"	e	enum:__anon6
F_DHDL_CON	includeheaders/types/idef.h	/^  F_DHDL_CON,$/;"	e	enum:__anon6
F_DIHRES	includeheaders/types/idef.h	/^  F_DIHRES,$/;"	e	enum:__anon6
F_DIHRESVIOL	includeheaders/types/idef.h	/^  F_DIHRESVIOL,$/;"	e	enum:__anon6
F_DISPCORR	includeheaders/types/idef.h	/^  F_DISPCORR,$/;"	e	enum:__anon6
F_DISRES	includeheaders/types/idef.h	/^  F_DISRES,$/;"	e	enum:__anon6
F_DISRESVIOL	includeheaders/types/idef.h	/^  F_DISRESVIOL,$/;"	e	enum:__anon6
F_DKDL	includeheaders/types/idef.h	/^  F_DKDL,$/;"	e	enum:__anon6
F_DPD	includeheaders/types/idef.h	/^  F_DPD,$/;"	e	enum:__anon6
F_DVDL	includeheaders/types/idef.h	/^  F_DVDL,$/;"	e	enum:__anon6
F_ECONSERVED	includeheaders/types/idef.h	/^  F_ECONSERVED,$/;"	e	enum:__anon6
F_EKIN	includeheaders/types/idef.h	/^  F_EKIN,$/;"	e	enum:__anon6
F_EPOT	includeheaders/types/idef.h	/^  F_EPOT,$/;"	e	enum:__anon6
F_EQM	includeheaders/types/idef.h	/^  F_EQM,$/;"	e	enum:__anon6
F_ETOT	includeheaders/types/idef.h	/^  F_ETOT,$/;"	e	enum:__anon6
F_FENEBONDS	includeheaders/types/idef.h	/^  F_FENEBONDS,$/;"	e	enum:__anon6
F_FOURDIHS	includeheaders/types/idef.h	/^  F_FOURDIHS,$/;"	e	enum:__anon6
F_G96ANGLES	includeheaders/types/idef.h	/^  F_G96ANGLES,$/;"	e	enum:__anon6
F_G96BONDS	includeheaders/types/idef.h	/^  F_G96BONDS,$/;"	e	enum:__anon6
F_GB12	includeheaders/types/idef.h	/^  F_GB12,$/;"	e	enum:__anon6
F_GB13	includeheaders/types/idef.h	/^  F_GB13,$/;"	e	enum:__anon6
F_GB14	includeheaders/types/idef.h	/^  F_GB14,$/;"	e	enum:__anon6
F_GBPOL	includeheaders/types/idef.h	/^  F_GBPOL,$/;"	e	enum:__anon6
F_HARMONIC	includeheaders/types/idef.h	/^  F_HARMONIC,$/;"	e	enum:__anon6
F_IDIHS	includeheaders/types/idef.h	/^  F_IDIHS, $/;"	e	enum:__anon6
F_LJ	includeheaders/types/idef.h	/^  F_LJ,$/;"	e	enum:__anon6
F_LJ14	includeheaders/types/idef.h	/^  F_LJ14,$/;"	e	enum:__anon6
F_LJC14_Q	includeheaders/types/idef.h	/^  F_LJC14_Q,$/;"	e	enum:__anon6
F_LJC_PAIRS_NB	includeheaders/types/idef.h	/^  F_LJC_PAIRS_NB,$/;"	e	enum:__anon6
F_LJ_LR	includeheaders/types/idef.h	/^  F_LJ_LR,$/;"	e	enum:__anon6
F_MORSE	includeheaders/types/idef.h	/^  F_MORSE,$/;"	e	enum:__anon6
F_NPSOLVATION	includeheaders/types/idef.h	/^  F_NPSOLVATION,$/;"	e	enum:__anon6
F_NRE	includeheaders/types/idef.h	/^  F_NRE		\/* This number is for the total number of energies	*\/$/;"	e	enum:__anon6
F_ORIRES	includeheaders/types/idef.h	/^  F_ORIRES,$/;"	e	enum:__anon6
F_ORIRESDEV	includeheaders/types/idef.h	/^  F_ORIRESDEV,$/;"	e	enum:__anon6
F_PDIHS	includeheaders/types/idef.h	/^  F_PDIHS,$/;"	e	enum:__anon6
F_PDISPCORR	includeheaders/types/idef.h	/^  F_PDISPCORR,$/;"	e	enum:__anon6
F_PIDIHS	includeheaders/types/idef.h	/^  F_PIDIHS, $/;"	e	enum:__anon6
F_POLARIZATION	includeheaders/types/idef.h	/^  F_POLARIZATION,$/;"	e	enum:__anon6
F_POSRES	includeheaders/types/idef.h	/^  F_POSRES,$/;"	e	enum:__anon6
F_PRES	includeheaders/types/idef.h	/^  F_PRES,$/;"	e	enum:__anon6
F_QUARTIC_ANGLES	includeheaders/types/idef.h	/^  F_QUARTIC_ANGLES,$/;"	e	enum:__anon6
F_RBDIHS	includeheaders/types/idef.h	/^  F_RBDIHS, $/;"	e	enum:__anon6
F_RESTRBONDS	includeheaders/types/idef.h	/^  F_RESTRBONDS,$/;"	e	enum:__anon6
F_RF_EXCL	includeheaders/types/idef.h	/^  F_RF_EXCL,$/;"	e	enum:__anon6
F_SETTLE	includeheaders/types/idef.h	/^  F_SETTLE,$/;"	e	enum:__anon6
F_TABANGLES	includeheaders/types/idef.h	/^  F_TABANGLES,$/;"	e	enum:__anon6
F_TABBONDS	includeheaders/types/idef.h	/^  F_TABBONDS,$/;"	e	enum:__anon6
F_TABBONDSNC	includeheaders/types/idef.h	/^  F_TABBONDSNC,$/;"	e	enum:__anon6
F_TABDIHS	includeheaders/types/idef.h	/^  F_TABDIHS,$/;"	e	enum:__anon6
F_TEMP	includeheaders/types/idef.h	/^  F_TEMP,$/;"	e	enum:__anon6
F_THOLE_POL	includeheaders/types/idef.h	/^  F_THOLE_POL,$/;"	e	enum:__anon6
F_UREY_BRADLEY	includeheaders/types/idef.h	/^  F_UREY_BRADLEY,$/;"	e	enum:__anon6
F_VSITE2	includeheaders/types/idef.h	/^  F_VSITE2,$/;"	e	enum:__anon6
F_VSITE3	includeheaders/types/idef.h	/^  F_VSITE3,$/;"	e	enum:__anon6
F_VSITE3FAD	includeheaders/types/idef.h	/^  F_VSITE3FAD,$/;"	e	enum:__anon6
F_VSITE3FD	includeheaders/types/idef.h	/^  F_VSITE3FD,$/;"	e	enum:__anon6
F_VSITE3OUT	includeheaders/types/idef.h	/^  F_VSITE3OUT,$/;"	e	enum:__anon6
F_VSITE4FD	includeheaders/types/idef.h	/^  F_VSITE4FD,$/;"	e	enum:__anon6
F_VSITE4FDN	includeheaders/types/idef.h	/^  F_VSITE4FDN,$/;"	e	enum:__anon6
F_VSITEN	includeheaders/types/idef.h	/^  F_VSITEN,$/;"	e	enum:__anon6
F_VTEMP	includeheaders/types/idef.h	/^  F_VTEMP,$/;"	e	enum:__anon6
F_WATER_POL	includeheaders/types/idef.h	/^  F_WATER_POL,$/;"	e	enum:__anon6
FragmentSet	structure/fragments.h	/^} FragmentSet;$/;"	t	typeref:struct:__anon5
GETFRAGMENTS_H	structure/getfragments.h	23;"	d
GET_CGINFO_BOND_INTER	includeheaders/types/forcerec.h	87;"	d
GET_CGINFO_EXCL_INTER	includeheaders/types/forcerec.h	82;"	d
GET_CGINFO_EXCL_INTRA	includeheaders/types/forcerec.h	80;"	d
GET_CGINFO_GID	includeheaders/types/forcerec.h	78;"	d
GET_CGINFO_NATOMS	includeheaders/types/forcerec.h	89;"	d
GET_CGINFO_SOLOPT	includeheaders/types/forcerec.h	84;"	d
GID	includeheaders/types/group.h	83;"	d
GMX_BARRIER	includeheaders/mpelogging.h	52;"	d
GMX_BARRIER	includeheaders/mpelogging.h	54;"	d
GMX_CUTOFF_INF	includeheaders/types/forcerec.h	96;"	d
GMX_DOUBLE_EPS	legacyheaders/types/simple.h	95;"	d
GMX_DOUBLE_MAX	legacyheaders/types/simple.h	98;"	d
GMX_DOUBLE_MIN	legacyheaders/types/simple.h	101;"	d
GMX_DOUBLE_NEGZERO	legacyheaders/types/simple.h	121;"	d
GMX_DOUBLE_NEGZERO	legacyheaders/types/simple.h	125;"	d
GMX_FLOAT_EPS	legacyheaders/types/simple.h	104;"	d
GMX_FLOAT_MAX	legacyheaders/types/simple.h	107;"	d
GMX_FLOAT_MIN	legacyheaders/types/simple.h	110;"	d
GMX_FLOAT_NEGZERO	legacyheaders/types/simple.h	122;"	d
GMX_FLOAT_NEGZERO	legacyheaders/types/simple.h	128;"	d
GMX_INT32_MAX	legacyheaders/types/simple.h	207;"	d
GMX_INT32_MIN	legacyheaders/types/simple.h	208;"	d
GMX_INT64_MAX	legacyheaders/types/simple.h	210;"	d
GMX_INT64_MIN	legacyheaders/types/simple.h	211;"	d
GMX_MPE_LOG	includeheaders/mpelogging.h	58;"	d
GMX_MPE_LOG	includeheaders/mpelogging.h	60;"	d
GMX_MPI_REAL	legacyheaders/types/simple.h	140;"	d
GMX_MPI_REAL	legacyheaders/types/simple.h	153;"	d
GMX_PRId32	legacyheaders/types/simple.h	175;"	d
GMX_PRId32	legacyheaders/types/simple.h	191;"	d
GMX_PRId64	legacyheaders/types/simple.h	179;"	d
GMX_PRId64	legacyheaders/types/simple.h	195;"	d
GMX_PRIu32	legacyheaders/types/simple.h	183;"	d
GMX_PRIu32	legacyheaders/types/simple.h	199;"	d
GMX_PRIu64	legacyheaders/types/simple.h	187;"	d
GMX_PRIu64	legacyheaders/types/simple.h	203;"	d
GMX_REAL_EPS	legacyheaders/types/simple.h	141;"	d
GMX_REAL_EPS	legacyheaders/types/simple.h	154;"	d
GMX_REAL_MAX	legacyheaders/types/simple.h	143;"	d
GMX_REAL_MAX	legacyheaders/types/simple.h	156;"	d
GMX_REAL_MIN	legacyheaders/types/simple.h	142;"	d
GMX_REAL_MIN	legacyheaders/types/simple.h	155;"	d
GMX_REAL_NEGZERO	legacyheaders/types/simple.h	144;"	d
GMX_REAL_NEGZERO	legacyheaders/types/simple.h	157;"	d
GMX_SCNd32	legacyheaders/types/simple.h	176;"	d
GMX_SCNd32	legacyheaders/types/simple.h	192;"	d
GMX_SCNd64	legacyheaders/types/simple.h	180;"	d
GMX_SCNd64	legacyheaders/types/simple.h	196;"	d
GMX_SCNu32	legacyheaders/types/simple.h	184;"	d
GMX_SCNu32	legacyheaders/types/simple.h	200;"	d
GMX_SCNu64	legacyheaders/types/simple.h	188;"	d
GMX_SCNu64	legacyheaders/types/simple.h	204;"	d
GMX_UINT32_MAX	legacyheaders/types/simple.h	213;"	d
GMX_UINT32_MIN	legacyheaders/types/simple.h	214;"	d
GMX_UINT64_MAX	legacyheaders/types/simple.h	216;"	d
GMX_UINT64_MIN	legacyheaders/types/simple.h	217;"	d
HARTREE2KJ	includeheaders/physics.h	100;"	d
HARTREE_BOHR2MD	includeheaders/physics.h	102;"	d
HAVE_REAL	legacyheaders/types/simple.h	137;"	d
HAVE_REAL	legacyheaders/types/simple.h	150;"	d
IF_ATYPE	includeheaders/types/ifunc.h	75;"	d
IF_BOND	includeheaders/types/ifunc.h	70;"	d
IF_BTYPE	includeheaders/types/ifunc.h	74;"	d
IF_CHEMBOND	includeheaders/types/ifunc.h	73;"	d
IF_CONSTRAINT	includeheaders/types/ifunc.h	72;"	d
IF_LIMZERO	includeheaders/types/ifunc.h	77;"	d
IF_NULL	includeheaders/types/ifunc.h	69;"	d
IF_TABULATED	includeheaders/types/ifunc.h	76;"	d
IF_VSITE	includeheaders/types/ifunc.h	71;"	d
INVSQRT_DONE	includeheaders/vec.h	177;"	d
INVSQRT_DONE	includeheaders/vec.h	210;"	d
IR_ELEC_FIELD	includeheaders/types/inputrec.h	299;"	d
IR_EXCL_FORCES	includeheaders/types/inputrec.h	301;"	d
IR_NPT_TROTTER	includeheaders/types/inputrec.h	305;"	d
IR_NVT_TROTTER	includeheaders/types/inputrec.h	303;"	d
IR_TWINRANGE	includeheaders/types/inputrec.h	297;"	d
IS2X	includeheaders/types/ishift.h	55;"	d
IS2Y	includeheaders/types/ishift.h	56;"	d
IS2Z	includeheaders/types/ishift.h	57;"	d
IS_ANGLE	includeheaders/types/ifunc.h	114;"	d
IS_CHEMBOND	includeheaders/types/ifunc.h	108;"	d
IS_TABULATED	includeheaders/types/ifunc.h	117;"	d
IS_VSITE	includeheaders/types/ifunc.h	115;"	d
IVEC2IS	includeheaders/types/ishift.h	54;"	d
Instance	partition/value.h	/^} Instance;$/;"	t	typeref:struct:__anon165
KABSCH_H	structure/kabsch.h	33;"	d
KILO	includeheaders/physics.h	61;"	d
LABEL_H	partition/label.h	23;"	d
Label	partition/label.h	/^} Label;$/;"	t	typeref:struct:__anon67
LabelList	partition/label.h	/^} LabelList;$/;"	t	typeref:struct:__anon68
LincsWarnAngle	includeheaders/types/inputrec.h	/^  real LincsWarnAngle;  \/* If bond rotates more than %g degrees, warn   *\/$/;"	m	struct:__anon164
M	includeheaders/types/fcdata.h	/^  double **M;$/;"	m	struct:__anon64
MATRIX_H	general/matrix.h	23;"	d
MAT_SPATIAL_X	includeheaders/types/matrix.h	62;"	d
MAT_SPATIAL_Y	includeheaders/types/matrix.h	63;"	d
MAXATOMLIST	includeheaders/types/idef.h	48;"	d
MAXFORCEPARAM	includeheaders/types/idef.h	49;"	d
MAX_CGCGSIZE	includeheaders/types/nblist.h	61;"	d
MAX_CHARGEGROUP_SIZE	includeheaders/types/nblist.h	56;"	d
MAX_NTRICVEC	includeheaders/types/pbc.h	49;"	d
MAX_SUZUKI_YOSHIDA_NUM	includeheaders/maths.h	69;"	d
MERGESORT_H	general/mergesort.h	23;"	d
MI_costFunction	partition/score.c	/^float MI_costFunction(float **values, float *p, int i, int j, int x,$/;"	f
MI_initialize_prefix_sums	partition/score.c	/^void MI_initialize_prefix_sums(float *p, int n, Collection *collection) {$/;"	f
MI_objectCost	partition/score.c	/^float MI_objectCost(Collection *collection, int i) {$/;"	f
MI_partitionCost	partition/score.c	/^float MI_partitionCost(Collection *collection, int i, int x) {$/;"	f
MOLFILE_ALTLOC	includeheaders/molfile_plugin.h	170;"	d
MOLFILE_ATOMICNUMBER	includeheaders/molfile_plugin.h	171;"	d
MOLFILE_BADOPTIONS	includeheaders/molfile_plugin.h	173;"	d
MOLFILE_BFACTOR	includeheaders/molfile_plugin.h	166;"	d
MOLFILE_BIGBUFSIZ	includeheaders/molfile_plugin.h	101;"	d
MOLFILE_BONDSSPECIAL	includeheaders/molfile_plugin.h	172;"	d
MOLFILE_BUFSIZ	includeheaders/molfile_plugin.h	100;"	d
MOLFILE_CAPCYL	includeheaders/molfile_plugin.h	/^  MOLFILE_LINE,   MOLFILE_CYLINDER, MOLFILE_CAPCYL,  MOLFILE_CONE,    $/;"	e	enum:molfile_graphics_type
MOLFILE_CHARGE	includeheaders/molfile_plugin.h	168;"	d
MOLFILE_COLOR	includeheaders/molfile_plugin.h	/^  MOLFILE_SPHERE, MOLFILE_TEXT,     MOLFILE_COLOR,   MOLFILE_TRICOLOR$/;"	e	enum:molfile_graphics_type
MOLFILE_CONE	includeheaders/molfile_plugin.h	/^  MOLFILE_LINE,   MOLFILE_CYLINDER, MOLFILE_CAPCYL,  MOLFILE_CONE,    $/;"	e	enum:molfile_graphics_type
MOLFILE_CONVERTER_PLUGIN_TYPE	includeheaders/molfile_plugin.h	86;"	d
MOLFILE_CYLINDER	includeheaders/molfile_plugin.h	/^  MOLFILE_LINE,   MOLFILE_CYLINDER, MOLFILE_CAPCYL,  MOLFILE_CONE,    $/;"	e	enum:molfile_graphics_type
MOLFILE_EOF	includeheaders/molfile_plugin.h	90;"	d
MOLFILE_ERROR	includeheaders/molfile_plugin.h	91;"	d
MOLFILE_INSERTION	includeheaders/molfile_plugin.h	164;"	d
MOLFILE_LINE	includeheaders/molfile_plugin.h	/^  MOLFILE_LINE,   MOLFILE_CYLINDER, MOLFILE_CAPCYL,  MOLFILE_CONE,    $/;"	e	enum:molfile_graphics_type
MOLFILE_MASS	includeheaders/molfile_plugin.h	167;"	d
MOLFILE_MAXWAVEPERTS	includeheaders/molfile_plugin.h	103;"	d
MOLFILE_NOOPTIONS	includeheaders/molfile_plugin.h	163;"	d
MOLFILE_NORMS	includeheaders/molfile_plugin.h	/^  MOLFILE_POINT,  MOLFILE_TRIANGLE, MOLFILE_TRINORM, MOLFILE_NORMS, $/;"	e	enum:molfile_graphics_type
MOLFILE_NOSTRUCTUREDATA	includeheaders/molfile_plugin.h	92;"	d
MOLFILE_NUMATOMS_NONE	includeheaders/molfile_plugin.h	95;"	d
MOLFILE_NUMATOMS_UNKNOWN	includeheaders/molfile_plugin.h	94;"	d
MOLFILE_OCCUPANCY	includeheaders/molfile_plugin.h	165;"	d
MOLFILE_PLUGIN_TYPE	includeheaders/molfile_plugin.h	80;"	d
MOLFILE_POINT	includeheaders/molfile_plugin.h	/^  MOLFILE_POINT,  MOLFILE_TRIANGLE, MOLFILE_TRINORM, MOLFILE_NORMS, $/;"	e	enum:molfile_graphics_type
MOLFILE_QMCHARGE_ESP	includeheaders/molfile_plugin.h	/^  MOLFILE_QMCHARGE_ESP, MOLFILE_QMCHARGE_NPA,$/;"	e	enum:molfile_qm_charge_type
MOLFILE_QMCHARGE_LOWDIN	includeheaders/molfile_plugin.h	/^  MOLFILE_QMCHARGE_MULLIKEN, MOLFILE_QMCHARGE_LOWDIN,$/;"	e	enum:molfile_qm_charge_type
MOLFILE_QMCHARGE_MULLIKEN	includeheaders/molfile_plugin.h	/^  MOLFILE_QMCHARGE_MULLIKEN, MOLFILE_QMCHARGE_LOWDIN,$/;"	e	enum:molfile_qm_charge_type
MOLFILE_QMCHARGE_NPA	includeheaders/molfile_plugin.h	/^  MOLFILE_QMCHARGE_ESP, MOLFILE_QMCHARGE_NPA,$/;"	e	enum:molfile_qm_charge_type
MOLFILE_QMCHARGE_UNKNOWN	includeheaders/molfile_plugin.h	/^  MOLFILE_QMCHARGE_UNKNOWN$/;"	e	enum:molfile_qm_charge_type
MOLFILE_QMTS_GRADIENT	includeheaders/molfile_plugin.h	180;"	d
MOLFILE_QMTS_NOOPTIONS	includeheaders/molfile_plugin.h	179;"	d
MOLFILE_QMTS_SCFITER	includeheaders/molfile_plugin.h	181;"	d
MOLFILE_QM_FILE_TRUNCATED	includeheaders/molfile_plugin.h	110;"	d
MOLFILE_QM_OPT_CONVERGED	includeheaders/molfile_plugin.h	107;"	d
MOLFILE_QM_OPT_NOT_CONV	includeheaders/molfile_plugin.h	109;"	d
MOLFILE_QM_SCF_NOT_CONV	includeheaders/molfile_plugin.h	108;"	d
MOLFILE_QM_STATUS_UNKNOWN	includeheaders/molfile_plugin.h	106;"	d
MOLFILE_RADIUS	includeheaders/molfile_plugin.h	169;"	d
MOLFILE_SPHERE	includeheaders/molfile_plugin.h	/^  MOLFILE_SPHERE, MOLFILE_TEXT,     MOLFILE_COLOR,   MOLFILE_TRICOLOR$/;"	e	enum:molfile_graphics_type
MOLFILE_SUCCESS	includeheaders/molfile_plugin.h	89;"	d
MOLFILE_TEXT	includeheaders/molfile_plugin.h	/^  MOLFILE_SPHERE, MOLFILE_TEXT,     MOLFILE_COLOR,   MOLFILE_TRICOLOR$/;"	e	enum:molfile_graphics_type
MOLFILE_TRIANGLE	includeheaders/molfile_plugin.h	/^  MOLFILE_POINT,  MOLFILE_TRIANGLE, MOLFILE_TRINORM, MOLFILE_NORMS, $/;"	e	enum:molfile_graphics_type
MOLFILE_TRICOLOR	includeheaders/molfile_plugin.h	/^  MOLFILE_SPHERE, MOLFILE_TEXT,     MOLFILE_COLOR,   MOLFILE_TRICOLOR$/;"	e	enum:molfile_graphics_type
MOLFILE_TRINORM	includeheaders/molfile_plugin.h	/^  MOLFILE_POINT,  MOLFILE_TRIANGLE, MOLFILE_TRINORM, MOLFILE_NORMS, $/;"	e	enum:molfile_graphics_type
MOLFILE_WAVE_BOYS	includeheaders/molfile_plugin.h	/^  MOLFILE_WAVE_PIPEK,  MOLFILE_WAVE_BOYS, MOLFILE_WAVE_RUEDEN,$/;"	e	enum:molfile_qm_wavefunc_type
MOLFILE_WAVE_CANON	includeheaders/molfile_plugin.h	/^  MOLFILE_WAVE_CANON,    MOLFILE_WAVE_GEMINAL,$/;"	e	enum:molfile_qm_wavefunc_type
MOLFILE_WAVE_CINATUR	includeheaders/molfile_plugin.h	/^  MOLFILE_WAVE_CINATUR,$/;"	e	enum:molfile_qm_wavefunc_type
MOLFILE_WAVE_GEMINAL	includeheaders/molfile_plugin.h	/^  MOLFILE_WAVE_CANON,    MOLFILE_WAVE_GEMINAL,$/;"	e	enum:molfile_qm_wavefunc_type
MOLFILE_WAVE_MCSCFNAT	includeheaders/molfile_plugin.h	/^  MOLFILE_WAVE_MCSCFNAT, MOLFILE_WAVE_MCSCFOPT,$/;"	e	enum:molfile_qm_wavefunc_type
MOLFILE_WAVE_MCSCFOPT	includeheaders/molfile_plugin.h	/^  MOLFILE_WAVE_MCSCFNAT, MOLFILE_WAVE_MCSCFOPT,$/;"	e	enum:molfile_qm_wavefunc_type
MOLFILE_WAVE_MOAO	includeheaders/molfile_plugin.h	/^  MOLFILE_WAVE_PNLMO,  MOLFILE_WAVE_NLMO, MOLFILE_WAVE_MOAO, $/;"	e	enum:molfile_qm_wavefunc_type
MOLFILE_WAVE_NAO	includeheaders/molfile_plugin.h	/^  MOLFILE_WAVE_NAO,    MOLFILE_WAVE_PNAO, MOLFILE_WAVE_NHO, $/;"	e	enum:molfile_qm_wavefunc_type
MOLFILE_WAVE_NATO	includeheaders/molfile_plugin.h	/^  MOLFILE_WAVE_NATO,   MOLFILE_WAVE_UNKNOWN$/;"	e	enum:molfile_qm_wavefunc_type
MOLFILE_WAVE_NBO	includeheaders/molfile_plugin.h	/^  MOLFILE_WAVE_PNHO,   MOLFILE_WAVE_NBO,  MOLFILE_WAVE_PNBO, $/;"	e	enum:molfile_qm_wavefunc_type
MOLFILE_WAVE_NHO	includeheaders/molfile_plugin.h	/^  MOLFILE_WAVE_NAO,    MOLFILE_WAVE_PNAO, MOLFILE_WAVE_NHO, $/;"	e	enum:molfile_qm_wavefunc_type
MOLFILE_WAVE_NLMO	includeheaders/molfile_plugin.h	/^  MOLFILE_WAVE_PNLMO,  MOLFILE_WAVE_NLMO, MOLFILE_WAVE_MOAO, $/;"	e	enum:molfile_qm_wavefunc_type
MOLFILE_WAVE_PIPEK	includeheaders/molfile_plugin.h	/^  MOLFILE_WAVE_PIPEK,  MOLFILE_WAVE_BOYS, MOLFILE_WAVE_RUEDEN,$/;"	e	enum:molfile_qm_wavefunc_type
MOLFILE_WAVE_PNAO	includeheaders/molfile_plugin.h	/^  MOLFILE_WAVE_NAO,    MOLFILE_WAVE_PNAO, MOLFILE_WAVE_NHO, $/;"	e	enum:molfile_qm_wavefunc_type
MOLFILE_WAVE_PNBO	includeheaders/molfile_plugin.h	/^  MOLFILE_WAVE_PNHO,   MOLFILE_WAVE_NBO,  MOLFILE_WAVE_PNBO, $/;"	e	enum:molfile_qm_wavefunc_type
MOLFILE_WAVE_PNHO	includeheaders/molfile_plugin.h	/^  MOLFILE_WAVE_PNHO,   MOLFILE_WAVE_NBO,  MOLFILE_WAVE_PNBO, $/;"	e	enum:molfile_qm_wavefunc_type
MOLFILE_WAVE_PNLMO	includeheaders/molfile_plugin.h	/^  MOLFILE_WAVE_PNLMO,  MOLFILE_WAVE_NLMO, MOLFILE_WAVE_MOAO, $/;"	e	enum:molfile_qm_wavefunc_type
MOLFILE_WAVE_RUEDEN	includeheaders/molfile_plugin.h	/^  MOLFILE_WAVE_PIPEK,  MOLFILE_WAVE_BOYS, MOLFILE_WAVE_RUEDEN,$/;"	e	enum:molfile_qm_wavefunc_type
MOLFILE_WAVE_UNKNOWN	includeheaders/molfile_plugin.h	/^  MOLFILE_WAVE_NATO,   MOLFILE_WAVE_UNKNOWN$/;"	e	enum:molfile_qm_wavefunc_type
MOL_FILE_PLUGIN_H	includeheaders/molfile_plugin.h	73;"	d
M_2PI	includeheaders/maths.h	57;"	d
M_PI	includeheaders/maths.h	49;"	d
M_PI	includeheaders/physics.h	54;"	d
M_PI	includeheaders/physics.h	56;"	d
M_PI_2	includeheaders/maths.h	53;"	d
M_SQRT2	includeheaders/maths.h	61;"	d
MatDestroy	structure/quatRMSD.c	/^MatDestroy(double **matrix)$/;"	f
MatInit	structure/quatRMSD.c	/^**MatInit(const int rows, const int cols)$/;"	f
MergeSort	general/mergesort.c	/^void MergeSort(void *array, size_t size, size_t esize, int (*compare) (const void *key1, const void *key2))$/;"	f
NANO	includeheaders/physics.h	62;"	d
NEED_MUTOT	includeheaders/types/inputrec.h	295;"	d
NFILE	g_sa_analyze.c	785;"	d	file:
NFILE	g_sa_encode.c	638;"	d	file:
NHCHAINLENGTH	includeheaders/types/state.h	52;"	d
NM2A	includeheaders/physics.h	65;"	d
NORM_EPS	structure/kabsch.c	54;"	d	file:
NOTSET	legacyheaders/typedefs.h	43;"	d
NO_ATID	legacyheaders/types/simple.h	92;"	d
NRAL	includeheaders/types/ifunc.h	106;"	d
NRFP	includeheaders/types/ifunc.h	105;"	d
NRFPA	includeheaders/types/ifunc.h	103;"	d
NRFPB	includeheaders/types/ifunc.h	104;"	d
NR_FOURDIHS	includeheaders/types/idef.h	51;"	d
NR_RBDIHS	includeheaders/types/idef.h	50;"	d
N_BOX_X	includeheaders/types/ishift.h	48;"	d
N_BOX_Y	includeheaders/types/ishift.h	47;"	d
N_BOX_Z	includeheaders/types/ishift.h	46;"	d
N_IVEC	includeheaders/types/ishift.h	49;"	d
OBJECT_H	partition/object.h	23;"	d
ONE_4PI_EPS0	includeheaders/physics.h	90;"	d
OVER_ALLOC_FAC	legacyheaders/typedefs.h	88;"	d
Object	partition/score.h	/^} Object;$/;"	t	typeref:struct:__anon136
PARTITION_H	partition/partition.h	23;"	d
PDB_STRUCTURE_H	structure/pdb_structure.h	24;"	d
PERTURBED	includeheaders/types/atoms.h	113;"	d
PICO	includeheaders/physics.h	63;"	d
PLANCK	includeheaders/physics.h	79;"	d
PLANCK1	includeheaders/physics.h	78;"	d
PRESERVE_SHAPE	includeheaders/types/inputrec.h	293;"	d
PRESFAC	includeheaders/physics.h	91;"	d
PROBABILITY_H_	statistics/probability.h	23;"	d
PR_VEC	includeheaders/vec.h	134;"	d
PULL_CYL	includeheaders/types/enums.h	225;"	d
PrintCoords	structure/quatRMSD.c	/^PrintCoords(const double **coords, const int len)$/;"	f
ProbMatrix	statistics/probability.h	/^} ProbMatrix;$/;"	t	typeref:struct:__anon52
QCP_rmsd	structure/quatRMSD.c	/^QCP_rmsd(double **coords1, double **coords2, const int len, double *coeff)$/;"	f
QCProot	structure/quatRMSD.c	/^QCProot(double *coeff, double guess, const double delta)$/;"	f	file:
QMMMlist	includeheaders/types/forcerec.h	/^  t_nblist QMMMlist;$/;"	m	struct:__anon157
QMMMscheme	includeheaders/types/inputrec.h	/^  int  QMMMscheme;      \/* Scheme: ONIOM or normal                      *\/$/;"	m	struct:__anon164
QMbasis	includeheaders/types/inputrec.h	/^  int     *QMbasis;     \/* Basisset in the QM calculation               *\/$/;"	m	struct:__anon160
QMcharge	includeheaders/types/inputrec.h	/^  int     *QMcharge;    \/* Total charge in the QM region                *\/$/;"	m	struct:__anon160
QMconstraints	includeheaders/types/inputrec.h	/^  int  QMconstraints;   \/* constraints on QM bonds                      *\/$/;"	m	struct:__anon164
QMmethod	includeheaders/types/inputrec.h	/^  int     *QMmethod;    \/* Level of theory in the QM calculation        *\/$/;"	m	struct:__anon160
QMmult	includeheaders/types/inputrec.h	/^  int     *QMmult;      \/* Spin multiplicicty in the QM region          *\/$/;"	m	struct:__anon160
QPinv	includeheaders/types/state.h	/^  double *QPinv; \/* inverse mass of thermostat for barostat -- computed from inputs, but a good place to store *\/$/;"	m	struct:__anon59
QUATRMSD_H	structure/quatRMSD.h	39;"	d
Qinv	includeheaders/types/state.h	/^  double *Qinv;  \/* inverse mass of thermostat -- computed from inputs, but a good place to store *\/$/;"	m	struct:__anon59
QuatCharPoly	structure/quatRMSD.c	/^QuatCharPoly(const double **coords1, const double **coords2, const int len, double *coeff)$/;"	f
R	includeheaders/types/fcdata.h	/^  matrix R;           \/* Rotation matrix to rotate to the reference coor.   *\/$/;"	m	struct:__anon64
RAD2DEG	includeheaders/physics.h	66;"	d
RGAS	includeheaders/physics.h	74;"	d
RecStrCmp	sequence/encode.c	/^int RecStrCmp(ReconStructure *recStrA, ReconStructure *recStrB) {$/;"	f
RecStrCpy	sequence/encode.c	/^void RecStrCpy(ReconStructure *recStrDest, ReconStructure *recStrSource) {$/;"	f
ReconStructure	sequence/encode.h	/^} ReconStructure;$/;"	t	typeref:struct:__anon1
Rt_6	includeheaders/types/fcdata.h	/^  real *Rt_6;         \/* The calculated inst. ens. averaged r^-6 (nr)     *\/$/;"	m	struct:__anon63
Rtav_6	includeheaders/types/fcdata.h	/^  real *Rtav_6;       \/* The calculated time and ens. averaged r^-6 (nr)  *\/$/;"	m	struct:__anon63
Rtl_6	includeheaders/types/fcdata.h	/^  real *Rtl_6;        \/* The calculated instantaneous r^-6 (nr)           *\/$/;"	m	struct:__anon63
S	includeheaders/types/fcdata.h	/^  tensor *S;          \/* Array of order tensors for each experiment (nexp)  *\/$/;"	m	struct:__anon64
SAFE_H	general/safe.h	23;"	d
SA_colour	structure/fragment_colour.h	/^} SA_colour;$/;"	t	typeref:struct:__anon139
SAoff	includeheaders/types/inputrec.h	/^  real    *SAoff;$/;"	m	struct:__anon160
SAon	includeheaders/types/inputrec.h	/^  real    *SAon;        \/* at which gap (A.U.) the SA is switched on    *\/$/;"	m	struct:__anon160
SAsteps	includeheaders/types/inputrec.h	/^  int     *SAsteps;     \/* in how many steps SA goes from 1-1 to 0.5-0.5*\/$/;"	m	struct:__anon160
SCORE_H	partition/score.h	23;"	d
SEQUENCE_H_	sequence/sequence.h	23;"	d
SET_CGINFO_BOND_INTER	includeheaders/types/forcerec.h	86;"	d
SET_CGINFO_EXCL_INTER	includeheaders/types/forcerec.h	81;"	d
SET_CGINFO_EXCL_INTRA	includeheaders/types/forcerec.h	79;"	d
SET_CGINFO_GID	includeheaders/types/forcerec.h	77;"	d
SET_CGINFO_NATOMS	includeheaders/types/forcerec.h	88;"	d
SET_CGINFO_SOLOPT	includeheaders/types/forcerec.h	83;"	d
SHIFTS	includeheaders/types/ishift.h	51;"	d
SHIFT_IVEC	includeheaders/types/graph.h	59;"	d
SPEED_OF_LIGHT	includeheaders/physics.h	84;"	d
STEPSTRSIZE	legacyheaders/typedefs.h	116;"	d
STRLEN	legacyheaders/types/simple.h	261;"	d
SUM_costFunction	partition/score.c	/^float SUM_costFunction(float **values, float *p, int i, int j, int x,$/;"	f
SUM_initialize_prefix_sums	partition/score.c	/^void SUM_initialize_prefix_sums(float *p, int n, Collection *collection) {$/;"	f
SUM_objectCost	partition/score.c	/^float SUM_objectCost(Collection *collection, int i) {$/;"	f
SUM_partitionCost	partition/score.c	/^float SUM_partitionCost(Collection *collection, int i, int x) {$/;"	f
SUZUKI_YOSHIDA_NUM	includeheaders/maths.h	70;"	d
S_hct	includeheaders/types/atoms.h	/^  real         *S_hct;          \/* Overlap factors for HCT\/OBC GB models        *\/$/;"	m	struct:__anon90
Seq	structure/pdb_structure.h	/^} Seq;$/;"	t	typeref:struct:__anon47
SeqSet	sequence/sequence.h	/^} SeqSet;$/;"	t	typeref:struct:__anon149
Set	statistics/probability.h	/^} Set;$/;"	t	typeref:struct:__anon51
Shannon	statistics/probability.c	/^float Shannon(Set *codeSet) {$/;"	f
Str	structure/pdb_structure.h	/^} Str;$/;"	t	typeref:struct:__anon49
Str2Mat	structure/vec2mat.c	/^void Str2Mat(Str *str, double **matrix, int cols, int shift)$/;"	f
T	includeheaders/types/group.h	/^  real    T;		\/* Temperature at full step        *\/$/;"	m	struct:__anon167
TMP	includeheaders/types/fcdata.h	/^  real   ***TMP;      \/* An array of temporary 5x5 matrices (nex);          *\/$/;"	m	struct:__anon64
TRANSFORM_STRUCTURE_H	structure/transform_segment.h	23;"	d
TRUE	legacyheaders/types/simple.h	86;"	d
Th	includeheaders/types/group.h	/^  real    Th;		\/* Temperature at half step        *\/$/;"	m	struct:__anon167
UseOptimizedKernels	includeheaders/types/forcerec.h	/^  gmx_bool UseOptimizedKernels;$/;"	m	struct:__anon157
VALUES_H	partition/value.h	23;"	d
VEC2MAT_H	structure/vec2mat.h	23;"	d
VMDIO_H_	includeheaders/vmdio.h	20;"	d
VMDPLUGIN	includeheaders/vmdplugin.h	84;"	d
VMDPLUGIN_API	includeheaders/vmdplugin.h	128;"	d
VMDPLUGIN_API	includeheaders/vmdplugin.h	130;"	d
VMDPLUGIN_API	includeheaders/vmdplugin.h	133;"	d
VMDPLUGIN_API	includeheaders/vmdplugin.h	137;"	d
VMDPLUGIN_ERROR	includeheaders/vmdplugin.h	206;"	d
VMDPLUGIN_EXTERN	includeheaders/vmdplugin.h	142;"	d
VMDPLUGIN_EXTERN	includeheaders/vmdplugin.h	144;"	d
VMDPLUGIN_SUCCESS	includeheaders/vmdplugin.h	205;"	d
VMDPLUGIN_THREADSAFE	includeheaders/vmdplugin.h	200;"	d
VMDPLUGIN_THREADUNSAFE	includeheaders/vmdplugin.h	199;"	d
VMDPLUGIN_fini	includeheaders/vmdplugin.h	105;"	d
VMDPLUGIN_init	includeheaders/vmdplugin.h	104;"	d
VMDPLUGIN_register	includeheaders/vmdplugin.h	102;"	d
VMDPLUGIN_register_tcl	includeheaders/vmdplugin.h	103;"	d
VMD_PLUGIN_H	includeheaders/vmdplugin.h	72;"	d
Vec	structure/pdb_structure.h	/^} Vec;$/;"	t	typeref:struct:__anon46
WIN32_LEAN_AND_MEAN	includeheaders/vmdplugin.h	111;"	d
Winv	includeheaders/types/state.h	/^  double Winv;   \/* Pressure mass inverse -- computed, not input, but a good place to store. Need to make a matrix later *\/$/;"	m	struct:__anon59
Winvm	includeheaders/types/state.h	/^  tensor Winvm;  \/* inverse pressure mass tensor, computed       *\/       $/;"	m	struct:__anon59
XX	legacyheaders/types/simple.h	58;"	d
XXXX	legacyheaders/types/simple.h	62;"	d
XXYY	legacyheaders/types/simple.h	63;"	d
XXZZ	legacyheaders/types/simple.h	64;"	d
XYZ2IS	includeheaders/types/ishift.h	53;"	d
YY	legacyheaders/types/simple.h	59;"	d
YYXX	legacyheaders/types/simple.h	65;"	d
YYYY	legacyheaders/types/simple.h	66;"	d
YYZZ	legacyheaders/types/simple.h	67;"	d
ZZ	legacyheaders/types/simple.h	60;"	d
ZZXX	legacyheaders/types/simple.h	68;"	d
ZZYY	legacyheaders/types/simple.h	69;"	d
ZZZZ	legacyheaders/types/simple.h	70;"	d
__STDC_FORMAT_MACROS	legacyheaders/types/simple.h	46;"	d
__STDC_LIMIT_MACROS	legacyheaders/types/simple.h	43;"	d
_atoms_h	includeheaders/types/atoms.h	36;"	d
_block_h	includeheaders/types/block.h	36;"	d
_constr_h	includeheaders/types/constr.h	37;"	d
_divide	includeheaders/vec.h	/^static gmx_inline real _divide(real a,real b,const char *file,int line)$/;"	f
_idef_h	includeheaders/types/idef.h	38;"	d
_ifunc_h	includeheaders/types/ifunc.h	38;"	d
_inputrec_h_	includeheaders/types/inputrec.h	36;"	d
_macros_h	legacyheaders/macros.h	37;"	d
_maths_h	includeheaders/maths.h	38;"	d
_mdatom_h	includeheaders/types/mdatom.h	37;"	d
_mod	includeheaders/vec.h	/^static gmx_inline int _mod(int a,int b,char *file,int line)$/;"	f
_nblist_h	includeheaders/types/nblist.h	36;"	d
_nsgrid_h	includeheaders/types/nsgrid.h	36;"	d
_pbc_h	includeheaders/types/pbc.h	36;"	d
_physics_h	includeheaders/physics.h	37;"	d
_shellfc_h	includeheaders/types/shellfc.h	38;"	d
_simple_h	legacyheaders/types/simple.h	39;"	d
_state_h_	includeheaders/types/state.h	36;"	d
_sysstuff_h	legacyheaders/sysstuff.h	39;"	d
_typedefs_h	legacyheaders/typedefs.h	39;"	d
_types_nrnb_h	includeheaders/types/nrnb.h	36;"	d
_types_symtab_h	includeheaders/types/symtab.h	36;"	d
_vec_h	includeheaders/vec.h	36;"	d
a	includeheaders/types/block.h	/^  atom_id *a;			\/* Array of atom numbers in each group 	*\/$/;"	m	struct:__anon98
a	includeheaders/types/idef.h	/^  struct {int  n; real a;                                 } vsiten;   $/;"	m	struct:__anon7::__anon31
a	includeheaders/types/idef.h	/^  struct {real a,alpha1,alpha2,rfac;                       } thole;$/;"	m	struct:__anon7::__anon19
a	includeheaders/types/idef.h	/^  struct {real a,b,c,d,e,f;                               } vsite;   $/;"	m	struct:__anon7::__anon30
a	includeheaders/types/idef.h	/^  struct {real a,b,c;	                                   } bham;$/;"	m	struct:__anon7::__anon8
a	includeheaders/types/inputrec.h	/^  real *a;		\/* Coeffients (V \/ nm )                  	*\/$/;"	m	struct:__anon158
a	includeheaders/types/nsgrid.h	/^  int    *a;		\/* The grid of cgs			*\/$/;"	m	struct:__anon148
acc	includeheaders/types/inputrec.h	/^  rvec    *acc;		         \/* Acceleration per group		    *\/$/;"	m	struct:__anon160
accession	includeheaders/molfile_plugin.h	/^  char accession[81];  \/**< database accession code, if any   *\/$/;"	m	struct:__anon71
add_sequence_to_set	sequence/sequence.c	/^void add_sequence_to_set(SeqSet *localfastaSequenceSet, char *frameDesc,$/;"	f
al_x	includeheaders/types/idef.h	/^  struct {real al_x,al_y,al_z,rOH,rHH,rOD;                 } wpol;$/;"	m	struct:__anon7::__anon18
al_y	includeheaders/types/idef.h	/^  struct {real al_x,al_y,al_z,rOH,rHH,rOD;                 } wpol;$/;"	m	struct:__anon7::__anon18
al_z	includeheaders/types/idef.h	/^  struct {real al_x,al_y,al_z,rOH,rHH,rOD;                 } wpol;$/;"	m	struct:__anon7::__anon18
alloc_float_matrix	general/matrix.c	/^float **alloc_float_matrix(float **matrix, int nRow, int nCol)$/;"	f
alloc_float_matrix3D	general/matrix.c	/^float ***alloc_float_matrix3D(float ***float_matrix3D, int x, int y, int z)$/;"	f
alloc_int_matrix	general/matrix.c	/^int **alloc_int_matrix(int **matrix, int nRow, int nCol)$/;"	f
alpha	includeheaders/molfile_plugin.h	/^  float A, B, C, alpha, beta, gamma; $/;"	m	struct:__anon73
alpha	includeheaders/types/idef.h	/^  struct {real alpha;                                      } polarize;$/;"	m	struct:__anon7::__anon17
alpha	includeheaders/types/state.h	/^  double alpha;$/;"	m	struct:__anon60
alpha1	includeheaders/types/idef.h	/^  struct {real a,alpha1,alpha2,rfac;                       } thole;$/;"	m	struct:__anon7::__anon19
alpha2	includeheaders/types/idef.h	/^  struct {real a,alpha1,alpha2,rfac;                       } thole;$/;"	m	struct:__anon7::__anon19
alphabetName	structure/fragment_colour.h	/^	char *alphabetName;$/;"	m	struct:__anon139
altCode	partition/value.h	/^    int altCode; \/* alternate code *\/$/;"	m	struct:__anon165
altCodeSet	statistics/probability.h	/^    Set *altCodeSet; \/* alternate code *\/$/;"	m	struct:__anon52
alternativeLocation	structure/pdb_structure.h	/^	char alternativeLocation[2]; \/* Alternate location indicator; 17 *\/$/;"	m	struct:__anon48
altloc	includeheaders/molfile_plugin.h	/^  char altloc[2];     \/**< optional PDB alternate location code  *\/$/;"	m	struct:__anon72
altloc	includeheaders/types/atoms.h	/^  char altloc;                  \/* Alternate location indicator         *\/$/;"	m	struct:__anon87
andersen_seed	includeheaders/types/inputrec.h	/^  int  andersen_seed;   \/* Random seed for Andersen thermostat.         *\/$/;"	m	struct:__anon164
angletab	includeheaders/types/fcdata.h	/^  bondedtable_t *angletab;$/;"	m	struct:__anon65
angular_momentum	includeheaders/molfile_plugin.h	/^  int *angular_momentum;    \/**< 3 ints per wave function coefficient do describe the $/;"	m	struct:__anon77
anneal_npoints	includeheaders/types/inputrec.h	/^  int     *anneal_npoints;       \/* Number of annealing time points per grp *\/    $/;"	m	struct:__anon160
anneal_temp	includeheaders/types/inputrec.h	/^  real    **anneal_temp;         \/* For ea. grp: Temperature at these times *\/$/;"	m	struct:__anon160
anneal_time	includeheaders/types/inputrec.h	/^  real    **anneal_time;         \/* For ea. group: Time points              *\/$/;"	m	struct:__anon160
annealing	includeheaders/types/inputrec.h	/^  int     *annealing;            \/* No\/simple\/periodic SA for each group    *\/$/;"	m	struct:__anon160
api	includeheaders/vmdio.h	/^    molfile_plugin_t *api;$/;"	m	struct:__anon2
asize	legacyheaders/macros.h	75;"	d
atnr	includeheaders/types/idef.h	/^  int        atnr;$/;"	m	struct:__anon42
atnr	includeheaders/types/idef.h	/^  int atnr;$/;"	m	struct:__anon44
atom	includeheaders/types/atoms.h	/^  t_atom        *atom;	        \/* Array of atoms (dim: nr)             *\/$/;"	m	struct:__anon89
atom	structure/pdb_structure.h	/^	Atom *atom; \/* array of selected (CA) atoms constituting structure *\/$/;"	m	struct:__anon49
atomName	structure/pdb_structure.h	/^	char atomName[8]; \/* Atom name; 13 - 16 *\/$/;"	m	struct:__anon48
atomNumber	structure/pdb_structure.h	/^	int atomNumber; \/* Atom serial number;  7 - 11 *\/$/;"	m	struct:__anon48
atom_id	legacyheaders/types/simple.h	/^typedef int         atom_id;      \/* To indicate an atoms id         *\/$/;"	t
atomic_number	includeheaders/molfile_plugin.h	/^  int *atomic_number;       \/**< atomic numbers (chem. element) of atoms in basis set *\/$/;"	m	struct:__anon77
atomicnumber	includeheaders/molfile_plugin.h	/^  int atomicnumber;   \/**< optional element atomic number        *\/$/;"	m	struct:__anon72
atomname	includeheaders/types/atoms.h	/^  char	        ***atomname;    \/* Array of pointers to atom name       *\/$/;"	m	struct:__anon89
atomnm	includeheaders/types/atoms.h	/^  char atomnm[6];               \/* True atom name including spaces      *\/$/;"	m	struct:__anon87
atomnr	includeheaders/types/atoms.h	/^  int  atomnr;                  \/* PDB atom number                      *\/$/;"	m	struct:__anon87
atomnumber	includeheaders/types/atoms.h	/^  int           atomnumber;     \/* Atomic Number or NOTSET              *\/$/;"	m	struct:__anon85
atomnumber	includeheaders/types/atoms.h	/^  int          *atomnumber;     \/* Atomic number, used for QM\/MM                *\/$/;"	m	struct:__anon90
atoms	includeheaders/types/topology.h	/^  t_atoms       atoms;          \/* The atoms                  	        *\/$/;"	m	struct:__anon141
atoms	includeheaders/types/topology.h	/^  t_atoms       atoms;          \/* The atoms                            *\/$/;"	m	struct:__anon146
atoms	includeheaders/types/trx.h	/^  t_atoms *atoms; \/* atoms struct (natoms)            *\/$/;"	m	struct:trxframe
atomtype	includeheaders/types/atoms.h	/^  char          ***atomtype;    \/* Array of pointers to atom types      *\/$/;"	m	struct:__anon89
atomtypeB	includeheaders/types/atoms.h	/^  char          ***atomtypeB;   \/* Array of pointers to B atom types    *\/$/;"	m	struct:__anon89
atomtypes	includeheaders/types/topology.h	/^  t_atomtypes    atomtypes;     \/* Atomtype properties                  *\/$/;"	m	struct:__anon144
atomtypes	includeheaders/types/topology.h	/^  t_atomtypes   atomtypes;      \/* Atomtype properties                  *\/$/;"	m	struct:__anon145
atomtypes	includeheaders/types/topology.h	/^  t_atomtypes   atomtypes;      \/* Atomtype properties                  *\/$/;"	m	struct:__anon146
atype_S_hct	includeheaders/types/forcerec.h	/^  real *atype_S_hct;$/;"	m	struct:__anon157
atype_gb_radius	includeheaders/types/forcerec.h	/^  real *atype_gb_radius;$/;"	m	struct:__anon157
atype_radius	includeheaders/types/forcerec.h	/^  real *atype_radius;$/;"	m	struct:__anon157
atype_surftens	includeheaders/types/forcerec.h	/^  real *atype_surftens;$/;"	m	struct:__anon157
atype_vol	includeheaders/types/forcerec.h	/^  real *atype_vol;$/;"	m	struct:__anon157
avcsix	includeheaders/types/forcerec.h	/^  real avcsix[2];$/;"	m	struct:__anon157
avctwelve	includeheaders/types/forcerec.h	/^  real avctwelve[2];$/;"	m	struct:__anon157
avg_bytes_per_timestep	includeheaders/molfile_plugin.h	/^  unsigned int avg_bytes_per_timestep; \/** bytes per timestep                *\/$/;"	m	struct:molfile_qm_timestep_metadata
avg_bytes_per_timestep	includeheaders/molfile_plugin.h	/^  unsigned int avg_bytes_per_timestep; \/** bytes per timestep                *\/$/;"	m	struct:molfile_timestep_metadata
axis_x	includeheaders/types/matrix.h	/^  real *axis_x;$/;"	m	struct:__anon94
axis_y	includeheaders/types/matrix.h	/^  real *axis_y;$/;"	m	struct:__anon94
b	includeheaders/types/idef.h	/^  struct {real a,b,c,d,e,f;                               } vsite;   $/;"	m	struct:__anon7::__anon30
b	includeheaders/types/idef.h	/^  struct {real a,b,c;	                                   } bham;$/;"	m	struct:__anon7::__anon8
b	includeheaders/types/matrix.h	/^  real r,g,b;$/;"	m	struct:__anon91
b	structure/fragment_colour.h	/^  float b;$/;"	m	struct:__anon138
b0	includeheaders/types/idef.h	/^  struct {real b0,cb,beta;                        	  } morse;$/;"	m	struct:__anon7::__anon27
b0	includeheaders/types/idef.h	/^  struct {real b0,kb,kcub;                                 } cubic;$/;"	m	struct:__anon7::__anon11
bAllvsAll	includeheaders/types/forcerec.h	/^  gmx_bool bAllvsAll;$/;"	m	struct:__anon157
bAnisotropic	includeheaders/types/atoms.h	/^  gmx_bool bAnisotropic;        \/* (an)isotropic switch                 *\/$/;"	m	struct:__anon87
bAtoms	includeheaders/types/trx.h	/^  gmx_bool bAtoms;$/;"	m	struct:trxframe
bBHAM	includeheaders/types/forcerec.h	/^  gmx_bool bBHAM;$/;"	m	struct:__anon157
bBox	includeheaders/types/trx.h	/^  gmx_bool bBox;$/;"	m	struct:trxframe
bContinuation	includeheaders/types/inputrec.h	/^  gmx_bool bContinuation;   \/* Continuation run: starting state is correct	*\/$/;"	m	struct:__anon164
bDiscrete	includeheaders/types/matrix.h	/^  gmx_bool bDiscrete;$/;"	m	struct:__anon94
bDisreMixed	includeheaders/types/inputrec.h	/^  gmx_bool bDisreMixed;     \/* Use comb of time averaged and instan. viol's	*\/$/;"	m	struct:__anon164
bDomDec	includeheaders/types/forcerec.h	/^  gmx_bool bDomDec;$/;"	m	struct:__anon157
bDouble	includeheaders/types/trx.h	/^  gmx_bool bDouble;   \/* Double precision?                *\/$/;"	m	struct:trxframe
bEwald	includeheaders/types/forcerec.h	/^  gmx_bool bEwald;$/;"	m	struct:__anon157
bF	includeheaders/types/trx.h	/^  gmx_bool bF;$/;"	m	struct:trxframe
bF_NoVirSum	includeheaders/types/forcerec.h	/^  gmx_bool bF_NoVirSum;$/;"	m	struct:__anon157
bGB	includeheaders/types/forcerec.h	/^  gmx_bool bGB;$/;"	m	struct:__anon157
bGrid	includeheaders/types/forcerec.h	/^  gmx_bool bGrid;$/;"	m	struct:__anon157
bLambda	includeheaders/types/trx.h	/^  gmx_bool bLambda;$/;"	m	struct:trxframe
bLimitDistance	includeheaders/types/pbc.h	/^  gmx_bool   bLimitDistance;$/;"	m	struct:__anon100
bMolPBC	includeheaders/types/forcerec.h	/^  gmx_bool bMolPBC;$/;"	m	struct:__anon157
bNEMD	includeheaders/types/group.h	/^  gmx_bool         bNEMD;$/;"	m	struct:__anon170
bOPT	includeheaders/types/inputrec.h	/^  gmx_bool    *bOPT;$/;"	m	struct:__anon160
bOptFFT	includeheaders/types/inputrec.h	/^  gmx_bool bOptFFT;         \/* optimize the fft plan at start               *\/$/;"	m	struct:__anon164
bOrires	includeheaders/types/mdatom.h	/^  gmx_bool          bOrires;$/;"	m	struct:__anon150
bPBC	includeheaders/types/trx.h	/^  gmx_bool bPBC;$/;"	m	struct:trxframe
bPeriodicMols	includeheaders/types/inputrec.h	/^  int  bPeriodicMols;   \/* Periodic molecules                           *\/$/;"	m	struct:__anon164
bPerturbed	includeheaders/types/mdatom.h	/^  gmx_bool          *bPerturbed;$/;"	m	struct:__anon150
bPrec	includeheaders/types/trx.h	/^  gmx_bool bPrec;$/;"	m	struct:trxframe
bQM	includeheaders/types/mdatom.h	/^  gmx_bool          *bQM;$/;"	m	struct:__anon150
bQMMM	includeheaders/types/forcerec.h	/^  gmx_bool         bQMMM;$/;"	m	struct:__anon157
bQMMM	includeheaders/types/inputrec.h	/^  gmx_bool bQMMM;           \/* QM\/MM calculation                            *\/ $/;"	m	struct:__anon164
bRefAt	includeheaders/types/inputrec.h	/^  gmx_bool       bRefAt;      \/* do we need reference atoms for a group COM ? *\/$/;"	m	struct:__anon163
bSH	includeheaders/types/inputrec.h	/^  gmx_bool    *bSH;         \/* surface hopping (diabatic hop only)          *\/$/;"	m	struct:__anon160
bScrewPBC	includeheaders/types/graph.h	/^  gmx_bool     bScrewPBC;   \/* Screw boundary conditions                    *\/$/;"	m	struct:__anon62
bSepDVDL	includeheaders/types/forcerec.h	/^  gmx_bool bSepDVDL;$/;"	m	struct:__anon157
bShakeSOR	includeheaders/types/inputrec.h	/^  gmx_bool bShakeSOR;       \/* Use successive overrelaxation for shake      *\/$/;"	m	struct:__anon164
bStep	includeheaders/types/trx.h	/^  gmx_bool bStep;$/;"	m	struct:trxframe
bTS	includeheaders/types/inputrec.h	/^  gmx_bool    *bTS;$/;"	m	struct:__anon160
bTime	includeheaders/types/trx.h	/^  gmx_bool bTime;$/;"	m	struct:trxframe
bTitle	includeheaders/types/trx.h	/^  gmx_bool bTitle;$/;"	m	struct:trxframe
bTwinRange	includeheaders/types/forcerec.h	/^  gmx_bool bTwinRange;$/;"	m	struct:__anon157
bUpToDate	includeheaders/types/state.h	/^  gmx_bool     bUpToDate;$/;"	m	struct:__anon55
bV	includeheaders/types/trx.h	/^  gmx_bool bV;$/;"	m	struct:trxframe
bV	includeheaders/vmdio.h	/^    gmx_bool bV;$/;"	m	struct:__anon2
bVCMgrps	includeheaders/types/mdatom.h	/^  gmx_bool          bVCMgrps;$/;"	m	struct:__anon150
bVirial	includeheaders/types/inputrec.h	/^  gmx_bool       bVirial;     \/* do we need to add the pull virial? *\/$/;"	m	struct:__anon163
bX	includeheaders/types/trx.h	/^  gmx_bool bX;$/;"	m	struct:trxframe
basis	includeheaders/molfile_plugin.h	/^  float *basis;             \/**< contraction coeffients and exponents for$/;"	m	struct:__anon77
basis	includeheaders/molfile_plugin.h	/^  molfile_qm_basis_t   basis;           \/* basis set info *\/$/;"	m	struct:__anon81
basis_string	includeheaders/molfile_plugin.h	/^  char basis_string[MOLFILE_BUFSIZ];    \/**< basis name as "nice" string. *\/$/;"	m	struct:__anon78
bcoultab	includeheaders/types/forcerec.h	/^  gmx_bool bcoultab;$/;"	m	struct:__anon157
bd_fric	includeheaders/types/inputrec.h	/^  real bd_fric;         \/* Friction coefficient for BD (amu\/ps)         *\/$/;"	m	struct:__anon164
beta	includeheaders/molfile_plugin.h	/^  float A, B, C, alpha, beta, gamma; $/;"	m	struct:__anon73
beta	includeheaders/types/idef.h	/^  struct {real b0,cb,beta;                        	  } morse;$/;"	m	struct:__anon7::__anon27
bfac	includeheaders/types/atoms.h	/^  real bfac;                    \/* B-factor                             *\/$/;"	m	struct:__anon87
bfactor	includeheaders/molfile_plugin.h	/^  float bfactor;      \/**< optional B-factor value               *\/$/;"	m	struct:__anon72
bham	includeheaders/types/idef.h	/^  struct {real a,b,c;	                                   } bham;$/;"	m	union:__anon7	typeref:struct:__anon7::__anon8
bham_b_max	includeheaders/types/forcerec.h	/^  real bham_b_max;$/;"	m	struct:__anon157
bm	includeheaders/types/idef.h	/^  struct {real bm,kb;                                      } fene;$/;"	m	struct:__anon7::__anon12
bmlt	includeheaders/types/idef.h	/^  struct {real sar,st,pi,gbr,bmlt;                        } gb;$/;"	m	struct:__anon7::__anon36
bondedtable_t	includeheaders/types/idef.h	/^} bondedtable_t;$/;"	t	typeref:struct:__anon45
bondtab	includeheaders/types/fcdata.h	/^  bondedtable_t *bondtab;$/;"	m	struct:__anon65
born	includeheaders/types/forcerec.h	/^  gmx_genborn_t *born;$/;"	m	struct:__anon157
box	includeheaders/types/pbc.h	/^  matrix box;$/;"	m	struct:__anon100
box	includeheaders/types/state.h	/^  matrix 	box;    \/* box vector coordinates                      	*\/$/;"	m	struct:__anon58
box	includeheaders/types/trx.h	/^  matrix box;     \/* the 3 box vectors                *\/$/;"	m	struct:trxframe
box_rel	includeheaders/types/state.h	/^  matrix     	box_rel; \/* Relitaive box vectors to preserve shape    	*\/$/;"	m	struct:__anon58
boxv	includeheaders/types/state.h	/^  matrix 	boxv;   \/* box velocitites for Parrinello-Rahman pcoupl *\/$/;"	m	struct:__anon58
buf	includeheaders/types/idef.h	/^  struct {real buf[MAXFORCEPARAM];	  	          } generic; \/* Conversion *\/$/;"	m	struct:__anon7::__anon38
buf	includeheaders/types/symtab.h	/^  char **buf;$/;"	m	struct:symbuf
bufsize	includeheaders/types/symtab.h	/^  int bufsize;$/;"	m	struct:symbuf
build_data	g_sa_analyze.c	/^void build_data(Data *data, double *xvgvector, char *column, int nSequences, Set *codeSet, FragmentSet *fragment_set, float *maxValue, float *minValue) {$/;"	f
bval	includeheaders/vec.h	/^  unsigned int bval;$/;"	m	union:__anon4
bvdwtab	includeheaders/types/forcerec.h	/^  gmx_bool bvdwtab;$/;"	m	struct:__anon157
c	includeheaders/types/idef.h	/^  struct {int  ex,power,label; real c,obs,kfac;           } orires;$/;"	m	struct:__anon7::__anon34
c	includeheaders/types/idef.h	/^  struct {real a,b,c,d,e,f;                               } vsite;   $/;"	m	struct:__anon7::__anon30
c	includeheaders/types/idef.h	/^  struct {real a,b,c;	                                   } bham;$/;"	m	struct:__anon7::__anon8
c	includeheaders/types/idef.h	/^  struct {real theta,c[5];                                 } qangle; $/;"	m	struct:__anon7::__anon16
c1	includeheaders/types/matrix.h	/^  char c1; \/* should all be non-zero (and printable and not '"') *\/$/;"	m	struct:__anon92
c12	includeheaders/types/idef.h	/^  struct {real c6,c12;				           } lj;$/;"	m	struct:__anon7::__anon20
c12	includeheaders/types/idef.h	/^  struct {real fqq,qi,qj,c6,c12;	                   } ljc14;$/;"	m	struct:__anon7::__anon22
c12	includeheaders/types/idef.h	/^  struct {real qi,qj,c6,c12;		                   } ljcnb;$/;"	m	struct:__anon7::__anon23
c12A	includeheaders/types/idef.h	/^  struct {real c6A,c12A,c6B,c12B;		           } lj14;$/;"	m	struct:__anon7::__anon21
c12B	includeheaders/types/idef.h	/^  struct {real c6A,c12A,c6B,c12B;		           } lj14;$/;"	m	struct:__anon7::__anon21
c2	includeheaders/types/matrix.h	/^  char c2; \/* $/;"	m	struct:__anon92
c6	includeheaders/types/idef.h	/^  struct {real c6,c12;				           } lj;$/;"	m	struct:__anon7::__anon20
c6	includeheaders/types/idef.h	/^  struct {real fqq,qi,qj,c6,c12;	                   } ljc14;$/;"	m	struct:__anon7::__anon22
c6	includeheaders/types/idef.h	/^  struct {real qi,qj,c6,c12;		                   } ljcnb;$/;"	m	struct:__anon7::__anon23
c6A	includeheaders/types/idef.h	/^  struct {real c6A,c12A,c6B,c12B;		           } lj14;$/;"	m	struct:__anon7::__anon21
c6B	includeheaders/types/idef.h	/^  struct {real c6A,c12A,c6B,c12B;		           } lj14;$/;"	m	struct:__anon7::__anon21
cACC	includeheaders/types/mdatom.h	/^  unsigned short        *cTC,*cENER,*cACC,*cFREEZE,*cVCM;$/;"	m	struct:__anon150
cENER	includeheaders/types/mdatom.h	/^  unsigned short        *cTC,*cENER,*cACC,*cFREEZE,*cVCM;$/;"	m	struct:__anon150
cFREEZE	includeheaders/types/mdatom.h	/^  unsigned short        *cTC,*cENER,*cACC,*cFREEZE,*cVCM;$/;"	m	struct:__anon150
cORF	includeheaders/types/mdatom.h	/^  unsigned short        *cU1,*cU2,*cORF;$/;"	m	struct:__anon150
cTC	includeheaders/types/mdatom.h	/^  unsigned short        *cTC,*cENER,*cACC,*cFREEZE,*cVCM;$/;"	m	struct:__anon150
cU1	includeheaders/types/mdatom.h	/^  unsigned short        *cU1,*cU2,*cORF;$/;"	m	struct:__anon150
cU2	includeheaders/types/mdatom.h	/^  unsigned short        *cU1,*cU2,*cORF;$/;"	m	struct:__anon150
cVCM	includeheaders/types/mdatom.h	/^  unsigned short        *cTC,*cENER,*cACC,*cFREEZE,*cVCM;$/;"	m	struct:__anon150
c_rf	includeheaders/types/forcerec.h	/^  real kappa,k_rf,c_rf;$/;"	m	struct:__anon157
calc_lll	includeheaders/vec.h	/^static void calc_lll(rvec box,rvec lll)$/;"	f
calc_sqdiff	structure/transform_segment.c	/^__inline__ static float calc_sqdiff(Vec vector0, Vec vector1)$/;"	f	file:
calculate_MI_contribution	partition/value.c	/^float calculate_MI_contribution(float startValue, float endValue, Data *data,$/;"	f
calculate_profile	g_sa_analyze.c	/^void calculate_profile(const char *outFilename, int sequenceLength, SeqSet *fastaSequenceSet, FragmentSet *fragment_set, gmx_bool xpmoutput) {$/;"	f
calculate_profile	g_sa_encode.c	/^void calculate_profile(const char *outFilename, int sequenceLength, SeqSet *fastaSequenceSet, FragmentSet *fragment_set, gmx_bool xpmoutput){$/;"	f
calculate_transition_frequencies	g_sa_analyze.c	/^void calculate_transition_frequencies(SeqSet *inputSequenceSet, ProbMatrix *transition_matrix, int isize, atom_id *index) {$/;"	f
carthessian	includeheaders/molfile_plugin.h	/^  double *carthessian;  \/**< hessian matrix in cartesian coordinates (ncart)*(ncart)$/;"	m	struct:__anon76
cat	includeheaders/vmdplugin.h	89;"	d
cb	includeheaders/types/idef.h	/^  struct {real b0,cb,beta;                        	  } morse;$/;"	m	struct:__anon7::__anon27
cell_index	includeheaders/types/nsgrid.h	/^  int	 *cell_index;	\/* The cell number of each cg		*\/$/;"	m	struct:__anon148
cell_offset	includeheaders/types/nsgrid.h	/^  rvec   cell_offset;   \/* The offset of the cell (0,0,0)       *\/$/;"	m	struct:__anon148
cell_size	includeheaders/types/nsgrid.h	/^  rvec   cell_size;     \/* The size of the cells                *\/$/;"	m	struct:__anon148
cells_nalloc	includeheaders/types/nsgrid.h	/^  int    cells_nalloc;	\/* Allocation size of index and nra    	*\/$/;"	m	struct:__anon148
cg0	includeheaders/types/forcerec.h	/^  int  cg0,hcg;$/;"	m	struct:__anon157
cg_cm	includeheaders/types/forcerec.h	/^  rvec *cg_cm;$/;"	m	struct:__anon157
cg_end	includeheaders/types/forcerec.h	/^  int cg_end;$/;"	m	struct:__anon156
cg_gl	includeheaders/types/state.h	/^  int           *cg_gl; \/* The global cg number of the local cgs        *\/$/;"	m	struct:__anon58
cg_gl_nalloc	includeheaders/types/state.h	/^  int           cg_gl_nalloc; \/* Allocation size of cg_gl;              *\/$/;"	m	struct:__anon58
cg_mod	includeheaders/types/forcerec.h	/^  int cg_mod;$/;"	m	struct:__anon156
cg_nalloc	includeheaders/types/forcerec.h	/^  int  cg_nalloc;$/;"	m	struct:__anon157
cg_p	includeheaders/types/state.h	/^  rvec          *cg_p;  \/* p vector for conjugate gradient minimization *\/$/;"	m	struct:__anon58
cg_start	includeheaders/types/forcerec.h	/^  int cg_start;$/;"	m	struct:__anon156
cginfo	includeheaders/types/forcerec.h	/^  int  *cginfo;$/;"	m	struct:__anon157
cginfo	includeheaders/types/forcerec.h	/^  int *cginfo;$/;"	m	struct:__anon156
cginfo_mb	includeheaders/types/forcerec.h	/^  cginfo_mb_t *cginfo_mb;$/;"	m	struct:__anon157
cginfo_mb_t	includeheaders/types/forcerec.h	/^} cginfo_mb_t;$/;"	t	typeref:struct:__anon156
cgs	includeheaders/types/topology.h	/^  t_block       cgs;            \/* The charge groups                    *\/$/;"	m	struct:__anon141
cgs	includeheaders/types/topology.h	/^  t_block       cgs;            \/* The charge groups                    *\/$/;"	m	struct:__anon145
cgs	includeheaders/types/topology.h	/^  t_block       cgs;            \/* The charge groups                    *\/$/;"	m	struct:__anon146
chain	includeheaders/molfile_plugin.h	/^  char chain[2];      \/**< required chain name, or ""            *\/$/;"	m	struct:__anon72
chainIdentifier	structure/pdb_structure.h	/^	char chainIdentifier[2]; \/* Chain identifier; 22 *\/$/;"	m	struct:__anon48
chainid	includeheaders/types/atoms.h	/^  char          chainid;        \/* Chain identifier written\/read to pdb *\/$/;"	m	struct:__anon86
chainnum	includeheaders/types/atoms.h	/^  int           chainnum;       \/* Iincremented at TER or new chain id  *\/    $/;"	m	struct:__anon86
charge	includeheaders/molfile_plugin.h	/^  float charge;       \/**< optional charge value                 *\/$/;"	m	struct:__anon72
chargeA	includeheaders/types/mdatom.h	/^  real          *chargeA,*chargeB;$/;"	m	struct:__anon150
chargeB	includeheaders/types/mdatom.h	/^  real          *chargeA,*chargeB;$/;"	m	struct:__anon150
charge_types	includeheaders/molfile_plugin.h	/^  int    *charge_types;     \/**< type of each charge set *\/$/;"	m	struct:__anon80
charges	includeheaders/molfile_plugin.h	/^  double *charges;          \/**< per-atom charges *\/$/;"	m	struct:__anon80
check_non_null	general/safe.c	/^void *check_non_null(void *ptr)$/;"	f
clear_dvec	includeheaders/vec.h	/^static gmx_inline void clear_dvec(dvec a)$/;"	f
clear_ivec	includeheaders/vec.h	/^static gmx_inline void clear_ivec(ivec a)$/;"	f
clear_mat	includeheaders/vec.h	/^static gmx_inline void clear_mat(matrix a)$/;"	f
clear_rvec	includeheaders/vec.h	/^static gmx_inline void clear_rvec(rvec a)$/;"	f
clear_rvecs	includeheaders/vec.h	/^static gmx_inline void clear_rvecs(int n,rvec v[])$/;"	f
close_file_read	includeheaders/molfile_plugin.h	/^  void (* close_file_read)(void *);$/;"	m	struct:__anon83
close_file_write	includeheaders/molfile_plugin.h	/^  void (* close_file_write)(void *);$/;"	m	struct:__anon83
cmap	includeheaders/types/idef.h	/^	real *cmap; \/* Has length 4*grid_spacing*grid_spacing, *\/$/;"	m	struct:__anon40
cmap	includeheaders/types/idef.h	/^  struct {int cmapA,cmapB;                                } cmap;$/;"	m	union:__anon7	typeref:struct:__anon7::__anon37
cmapA	includeheaders/types/idef.h	/^  struct {int cmapA,cmapB;                                } cmap;$/;"	m	struct:__anon7::__anon37
cmapB	includeheaders/types/idef.h	/^  struct {int cmapA,cmapB;                                } cmap;$/;"	m	struct:__anon7::__anon37
cmap_grid	includeheaders/types/idef.h	/^  gmx_cmap_t cmap_grid;  \/* The dihedral correction maps                 *\/$/;"	m	struct:__anon42
cmap_grid	includeheaders/types/idef.h	/^  gmx_cmap_t cmap_grid;$/;"	m	struct:__anon44
cmapdata	includeheaders/types/idef.h	/^	cmapdata_t *cmapdata; \/* Pointer to grid with actual, pre-interpolated data *\/$/;"	m	struct:__anon41
cmapdata_t	includeheaders/types/idef.h	/^} cmapdata_t;$/;"	t	typeref:struct:__anon40
code	includeheaders/types/matrix.h	/^  t_xpmelmt code; \/* see comment for t_xpmelmt *\/$/;"	m	struct:__anon93
code	partition/value.h	/^    int code; \/* reference code *\/$/;"	m	struct:__anon165
code	statistics/probability.h	/^    int code; \/* code *\/$/;"	m	struct:__anon50
codeOrder	structure/fragments.h	/^    char *codeOrder;$/;"	m	struct:__anon5
codeOrder	structure/fragments_coords.h	/^    char codeOrder[64];$/;"	m	struct:__anon66
codeSet	partition/value.h	/^    Set *codeSet; \/* pointer to code set if available *\/$/;"	m	struct:__anon166
codeSet	statistics/probability.h	/^    Set *codeSet; \/* code *\/$/;"	m	struct:__anon52
code_index	partition/value.c	/^int code_index(Set *codeSet, int code) {$/;"	f
colour	structure/fragment_colour.h	/^	colour_rgb *colour;$/;"	m	struct:__anon139
colour_rgb	structure/fragment_colour.h	/^} colour_rgb;$/;"	t	typeref:struct:__anon138
column_joint_entropy	g_sa_analyze.c	/^float column_joint_entropy(SeqSet *fastaSequenceSet, ProbMatrix *probMat, int icol, int jcol) {$/;"	f
column_mutual_information	g_sa_analyze.c	/^float column_mutual_information(SeqSet *fastaSequenceSet, ProbMatrix *probMat, int icol, int jcol, float *ptr_eeMI) {$/;"	f
comm_mode	includeheaders/types/inputrec.h	/^  int  comm_mode;       \/* Center of mass motion removal algorithm      *\/$/;"	m	struct:__anon164
compareCost	partition/object.c	/^int compareCost(float oldValue, float newValue, int maximize_flag) {$/;"	f
compare_elements	statistics/probability.c	/^int compare_elements(Element *elementA, Element *elementB) {$/;"	f
compare_objects	partition/object.c	/^int compare_objects(Object *objectA, Object *objectB) {$/;"	f
compress	includeheaders/types/inputrec.h	/^  tensor compress;	\/* compressability ((mol nm^3)\/kJ) 		*\/$/;"	m	struct:__anon164
cons_fputs	includeheaders/molfile_plugin.h	/^  int (* cons_fputs)(const int, const char*);$/;"	m	struct:__anon83
constant_fragment_sets	structure/fragments_coords.h	/^ConstantFragmentSet constant_fragment_sets[] = {$/;"	v
constr	includeheaders/types/idef.h	/^  struct {real dA,dB;		        	           } constr;$/;"	m	union:__anon7	typeref:struct:__anon7::__anon25
constr_tol	includeheaders/types/inputrec.h	/^  real       constr_tol;  \/* absolute tolerance for constraints in (nm) *\/$/;"	m	struct:__anon163
coord	sequence/encode.h	/^    Vec *coord;$/;"	m	struct:__anon1
coord_rmsd	structure/transform_segment.c	/^float coord_rmsd(Vec *v1, Vec *v2)$/;"	f
coord_values	structure/fragments.h	/^    float ***coord_values;$/;"	m	struct:__anon5
coord_values	structure/fragments_coords.h	/^    float coord_values[64][8][3];$/;"	m	struct:__anon66
coords	includeheaders/molfile_plugin.h	/^  float *coords;        \/**< coordinates of all atoms, arranged xyzxyzxyz   *\/$/;"	m	struct:__anon73
copy_dvec	includeheaders/vec.h	/^static gmx_inline void copy_dvec(const dvec a,dvec b)$/;"	f
copy_ivec	includeheaders/vec.h	/^static gmx_inline void copy_ivec(const ivec a,ivec b)$/;"	f
copy_mat	includeheaders/vec.h	/^static gmx_inline void copy_mat(matrix a,matrix b)$/;"	f
copy_rvec	includeheaders/vec.h	/^static gmx_inline void copy_rvec(const rvec a,rvec b)$/;"	f
copy_rvecn	includeheaders/vec.h	/^static gmx_inline void copy_rvecn(rvec *a,rvec *b,int startn, int endn)$/;"	f
cos_accel	includeheaders/types/group.h	/^  real    cos_accel;    \/* The acceleration for the cosine profile      *\/$/;"	m	struct:__anon169
cos_accel	includeheaders/types/inputrec.h	/^  real cos_accel;       \/* Acceleration for viscosity calculation       *\/$/;"	m	struct:__anon164
cos_angle	includeheaders/vec.h	/^cos_angle(const rvec a,const rvec b)$/;"	f
cos_angle_no_table	includeheaders/vec.h	/^cos_angle_no_table(const rvec a,const rvec b)$/;"	f
cosacc	includeheaders/types/group.h	/^  t_cos_acc    cosacc;          \/* Cosine acceleration data             *\/$/;"	m	struct:__anon170
cosdim	includeheaders/types/inputrec.h	/^  int        cosdim;      \/* dimension for cosine weighting, -1 if none *\/$/;"	m	struct:__anon163
costFunction	partition/object.c	/^float costFunction(float **values, float *p, int i, int j, int x,$/;"	f
costFunction_wrapper	partition/score.c	/^float costFunction_wrapper(float **values, float *p, int i, int j, int x,$/;"	f
coulombtype	includeheaders/types/inputrec.h	/^  int  coulombtype;	\/* Type of electrostatics treatment             *\/$/;"	m	struct:__anon164
coultab	includeheaders/types/forcerec.h	/^  real *coultab;      \/* Coul only *\/$/;"	m	struct:__anon152
count	includeheaders/molfile_plugin.h	/^  unsigned int count;                  \/**< total # timesteps; -1 if unknown *\/$/;"	m	struct:molfile_qm_timestep_metadata
count	includeheaders/molfile_plugin.h	/^  unsigned int count;                  \/**< total # timesteps; -1 if unknown *\/$/;"	m	struct:molfile_timestep_metadata
count	includeheaders/types/nblist.h	/^  int             count;        \/* counter to multithread the innerloops *\/$/;"	m	struct:__anon96
cpA	includeheaders/types/idef.h	/^  struct {real phiA,cpA;int mult;real phiB,cpB;            } pdihs;$/;"	m	struct:__anon7::__anon24
cpB	includeheaders/types/idef.h	/^  struct {real phiA,cpA;int mult;real phiB,cpB;            } pdihs;$/;"	m	struct:__anon7::__anon24
cprod	includeheaders/vec.h	/^static gmx_inline void cprod(const rvec a,const rvec b,rvec c)$/;"	f
cross_ba	includeheaders/types/idef.h	/^  struct {real r1e,r2e,r3e,krt;                            } cross_ba;$/;"	m	union:__anon7	typeref:struct:__anon7::__anon14
cross_bb	includeheaders/types/idef.h	/^  struct {real r1e,r2e,krr;                                } cross_bb;$/;"	m	union:__anon7	typeref:struct:__anon7::__anon13
cubic	includeheaders/types/idef.h	/^  struct {real b0,kb,kcub;                                 } cubic;$/;"	m	union:__anon7	typeref:struct:__anon7::__anon11
cyl_r0	includeheaders/types/inputrec.h	/^  real       cyl_r0;      \/* radius of cylinder including switch length *\/$/;"	m	struct:__anon163
cyl_r1	includeheaders/types/inputrec.h	/^  real       cyl_r1;      \/* radius of cylinder for dynamic COM *\/$/;"	m	struct:__anon163
d	includeheaders/types/idef.h	/^  struct {real a,b,c,d,e,f;                               } vsite;   $/;"	m	struct:__anon7::__anon30
dA	includeheaders/types/idef.h	/^  struct {real dA,dB;		        	           } constr;$/;"	m	struct:__anon7::__anon25
dB	includeheaders/types/idef.h	/^  struct {real dA,dB;		        	           } constr;$/;"	m	struct:__anon7::__anon25
dadx	includeheaders/types/forcerec.h	/^  real *dadx;$/;"	m	struct:__anon157
dadx_rawptr	includeheaders/types/forcerec.h	/^  real *dadx_rawptr;$/;"	m	struct:__anon157
data	includeheaders/molfile_plugin.h	/^  float data[9];        \/* All data for the element     *\/$/;"	m	struct:__anon82
data	partition/score.h	/^    Data *data; \/* pointer to data if available *\/$/;"	m	struct:__anon137
database	includeheaders/molfile_plugin.h	/^  char database[81];   \/**< database of origin, if any        *\/$/;"	m	struct:__anon71
dataname	includeheaders/molfile_plugin.h	/^  char dataname[256];   \/**< name of volumetric data set                    *\/$/;"	m	struct:__anon74
date	includeheaders/molfile_plugin.h	/^  char date[81];       \/**< date\/time stamp for this data     *\/$/;"	m	struct:__anon71
dbuf	includeheaders/types/inputrec.h	/^  dvec       *dbuf;       \/* COM calculation buffer *\/$/;"	m	struct:__anon163
dbuf_cyl	includeheaders/types/inputrec.h	/^  double     *dbuf_cyl;   \/* cylinder ref. groups COM calculation buffer *\/$/;"	m	struct:__anon163
dc_nalloc	includeheaders/types/nsgrid.h	/^  int    dc_nalloc;     \/* Allocation size of dcx2, dyc2, dcz2  *\/$/;"	m	struct:__anon148
dcprod	includeheaders/vec.h	/^static gmx_inline void dcprod(const dvec a,const dvec b,dvec c)$/;"	f
dcx2	includeheaders/types/nsgrid.h	/^  real   *dcx2;         \/* Squared distance from atom to j-cell *\/$/;"	m	struct:__anon148
dcy2	includeheaders/types/nsgrid.h	/^  real   *dcy2;         \/* Squared distance from atom to j-cell *\/$/;"	m	struct:__anon148
dcz2	includeheaders/types/nsgrid.h	/^  real   *dcz2;         \/* Squared distance from atom to j-cell *\/$/;"	m	struct:__anon148
ddp_count	includeheaders/types/state.h	/^  int           ddp_count; \/* The DD partitioning count for this state  *\/$/;"	m	struct:__anon58
ddp_count_cg_gl	includeheaders/types/state.h	/^  int           ddp_count_cg_gl; \/* The DD part. count for index_gl     *\/$/;"	m	struct:__anon58
define_points	structure/transform_segment.c	/^void define_points(gsl_matrix *X, gsl_matrix *Y, Vec *coords_A, Vec *coords_B, int npoints)$/;"	f
deform	includeheaders/types/inputrec.h	/^  tensor deform;        \/* Triclinic deformation velocities (nm\/ps)     *\/$/;"	m	struct:__anon164
dekindl	includeheaders/types/group.h	/^  real         dekindl;         \/* dEkin\/dlambda at half step           *\/$/;"	m	struct:__anon170
dekindl	includeheaders/types/state.h	/^  real     dekindl;$/;"	m	struct:__anon55
dekindl_old	includeheaders/types/group.h	/^  real         dekindl_old;     \/* dEkin\/dlambda at old half step       *\/$/;"	m	struct:__anon170
delta_h_history_t	includeheaders/types/state.h	/^} delta_h_history_t; $/;"	t	typeref:struct:__anon56
delta_lambda	includeheaders/types/inputrec.h	/^  double delta_lambda;	\/* change of lambda per time step (1\/dt)	*\/$/;"	m	struct:__anon164
delta_t	includeheaders/types/inputrec.h	/^  double delta_t;	\/* time step (ps)				*\/$/;"	m	struct:__anon164
desc	includeheaders/types/matrix.h	/^  const char *desc;$/;"	m	struct:__anon93
description	structure/pdb_structure.h	/^	char description[32]; \/* everything before coordinates *\/$/;"	m	struct:__anon48
det	includeheaders/vec.h	/^static gmx_inline real det(matrix a)$/;"	f
dh	includeheaders/types/state.h	/^    real **dh;          \/* the energy difference lists *\/$/;"	m	struct:__anon56
dh_hist_size	includeheaders/types/inputrec.h	/^  int  dh_hist_size;    \/* The maximum size for the dH histogram        *\/$/;"	m	struct:__anon164
dh_hist_spacing	includeheaders/types/inputrec.h	/^  double dh_hist_spacing; \/* The spacing for the dH histogram           *\/$/;"	m	struct:__anon164
dhdl_derivatives	includeheaders/types/inputrec.h	/^  int  dhdl_derivatives;\/* whether to calculate+write dhdl derivatives $/;"	m	struct:__anon164
dhdlderivativesNO	includeheaders/types/enums.h	/^    dhdlderivativesYES, dhdlderivativesNO, dhdlderivativesNR$/;"	e	enum:__anon120
dhdlderivativesNR	includeheaders/types/enums.h	/^    dhdlderivativesYES, dhdlderivativesNO, dhdlderivativesNR$/;"	e	enum:__anon120
dhdlderivativesYES	includeheaders/types/enums.h	/^    dhdlderivativesYES, dhdlderivativesNO, dhdlderivativesNR$/;"	e	enum:__anon120
dhh	includeheaders/types/idef.h	/^  struct {real doh,dhh;                                   } settle;$/;"	m	struct:__anon7::__anon26
dht	includeheaders/types/state.h	/^  delta_h_history_t *dht;  \/* The BAR energy differences *\/$/;"	m	struct:__anon57
dihre_fc	includeheaders/types/fcdata.h	/^  real         dihre_fc;$/;"	m	struct:__anon65
dihre_fc	includeheaders/types/inputrec.h	/^  real dihre_fc;        \/* force constant for dihedral restraints	*\/$/;"	m	struct:__anon164
dihres	includeheaders/types/idef.h	/^  struct {real phi,dphi,kfac;int label,power;             } dihres;  $/;"	m	union:__anon7	typeref:struct:__anon7::__anon33
dihtab	includeheaders/types/fcdata.h	/^  bondedtable_t *dihtab;$/;"	m	struct:__anon65
dim	includeheaders/types/inputrec.h	/^  ivec       dim;         \/* used to select components for constraint *\/$/;"	m	struct:__anon163
dim	includeheaders/types/pbc.h	/^  int    dim;$/;"	m	struct:__anon100
diprod	includeheaders/vec.h	/^static gmx_inline double diprod(const dvec a,const dvec b)$/;"	f
disre_initf	includeheaders/types/state.h	/^  real disre_initf;    \/* The scaling factor for initializing the time av. *\/$/;"	m	struct:__anon54
disre_rm3tav	includeheaders/types/state.h	/^  real *disre_rm3tav;  \/* The r^-3 time averaged pair distances            *\/$/;"	m	struct:__anon54
disres	includeheaders/types/fcdata.h	/^  t_disresdata disres;$/;"	m	struct:__anon65
disres	includeheaders/types/idef.h	/^  struct {real low,up1,up2,kfac;int type,label,npair;     } disres; $/;"	m	union:__anon7	typeref:struct:__anon7::__anon32
distance2	includeheaders/vec.h	/^static gmx_inline real distance2(const rvec v1,const rvec v2)$/;"	f
divide	includeheaders/vec.h	869;"	d
dnorm	includeheaders/vec.h	/^static gmx_inline double dnorm(const dvec a)$/;"	f
dnorm2	includeheaders/vec.h	/^static gmx_inline double dnorm2(const dvec a)$/;"	f
doh	includeheaders/types/idef.h	/^  struct {real doh,dhh;                                   } settle;$/;"	m	struct:__anon7::__anon26
dphi	includeheaders/types/idef.h	/^  struct {real phi,dphi,kfac;int label,power;             } dihres;  $/;"	m	struct:__anon7::__anon33
dr	includeheaders/types/inputrec.h	/^  dvec       dr;       \/* The distance from the reference group *\/$/;"	m	struct:__anon162
dr_bMixed	includeheaders/types/fcdata.h	/^  gmx_bool dr_bMixed;     \/* Use sqrt of the instantaneous times              *$/;"	m	struct:__anon63
dr_fc	includeheaders/types/fcdata.h	/^  real dr_fc;	      \/* Force constant for disres,                       *$/;"	m	struct:__anon63
dr_fc	includeheaders/types/inputrec.h	/^  real dr_fc;		    \/* force constant for ta_disre			*\/$/;"	m	struct:__anon164
dr_tau	includeheaders/types/fcdata.h	/^  real dr_tau;	      \/* Time constant for disres		          *\/$/;"	m	struct:__anon63
dr_tau	includeheaders/types/inputrec.h	/^  real dr_tau;		    \/* time constant for memory function in disres 	*\/$/;"	m	struct:__anon164
dr_weighting	includeheaders/types/fcdata.h	/^  int  dr_weighting;  \/* Weighting of pairs in one restraint              *\/$/;"	m	struct:__anon63
dsqr	includeheaders/vec.h	/^static gmx_inline double dsqr(double x)$/;"	f
dsvmul	includeheaders/vec.h	/^static gmx_inline void dsvmul(double a,const dvec v1,dvec v2)$/;"	f
dvda	includeheaders/types/forcerec.h	/^  real *dvda;$/;"	m	struct:__anon157
dvdl_lin	includeheaders/types/forcerec.h	/^  double dvdl_lin;     \/* Contributions to dvdl with linear lam-dependence *\/$/;"	m	struct:__anon155
dvdl_nonlin	includeheaders/types/forcerec.h	/^  double dvdl_nonlin;  \/* Idem, but non-linear dependence                  *\/$/;"	m	struct:__anon155
dvec	legacyheaders/types/simple.h	/^typedef double          dvec[DIM];$/;"	t
dvec_add	includeheaders/vec.h	/^static gmx_inline void dvec_add(const dvec a,const dvec b,dvec c)$/;"	f
dvec_inc	includeheaders/vec.h	/^static gmx_inline void dvec_inc(dvec a,const dvec b)$/;"	f
dvec_sub	includeheaders/vec.h	/^static gmx_inline void dvec_sub(const dvec a,const dvec b,dvec c)$/;"	f
dyna	includeheaders/types/inputrec.h	/^  t_pullgrp  *dyna;       \/* dynamic groups for use with local constraints *\/$/;"	m	struct:__anon163
e	includeheaders/types/energy.h	/^  real e;	\/* The current energy.					*\/$/;"	m	struct:__anon147
e	includeheaders/types/idef.h	/^  struct {real a,b,c,d,e,f;                               } vsite;   $/;"	m	struct:__anon7::__anon30
eCOMB_ARITHMETIC	includeheaders/types/enums.h	/^  eCOMB_NONE, eCOMB_GEOMETRIC, eCOMB_ARITHMETIC, eCOMB_GEOM_SIG_EPS, eCOMB_NR $/;"	e	enum:__anon116
eCOMB_GEOMETRIC	includeheaders/types/enums.h	/^  eCOMB_NONE, eCOMB_GEOMETRIC, eCOMB_ARITHMETIC, eCOMB_GEOM_SIG_EPS, eCOMB_NR $/;"	e	enum:__anon116
eCOMB_GEOM_SIG_EPS	includeheaders/types/enums.h	/^  eCOMB_NONE, eCOMB_GEOMETRIC, eCOMB_ARITHMETIC, eCOMB_GEOM_SIG_EPS, eCOMB_NR $/;"	e	enum:__anon116
eCOMB_NONE	includeheaders/types/enums.h	/^  eCOMB_NONE, eCOMB_GEOMETRIC, eCOMB_ARITHMETIC, eCOMB_GEOM_SIG_EPS, eCOMB_NR $/;"	e	enum:__anon116
eCOMB_NR	includeheaders/types/enums.h	/^  eCOMB_NONE, eCOMB_GEOMETRIC, eCOMB_ARITHMETIC, eCOMB_GEOM_SIG_EPS, eCOMB_NR $/;"	e	enum:__anon116
eConstrAlg	includeheaders/types/inputrec.h	/^  int  eConstrAlg;      \/* Type of constraint algorithm                 *\/$/;"	m	struct:__anon164
eDispCorr	includeheaders/types/forcerec.h	/^  int  eDispCorr;$/;"	m	struct:__anon157
eDispCorr	includeheaders/types/inputrec.h	/^  int  eDispCorr;       \/* Perform Long range dispersion corrections    *\/$/;"	m	struct:__anon164
eDisre	includeheaders/types/inputrec.h	/^  int  eDisre;          \/* Type of distance restraining                 *\/$/;"	m	struct:__anon164
eDisreWeighting	includeheaders/types/inputrec.h	/^  int  eDisreWeighting; \/* type of weighting of pairs in one restraints	*\/$/;"	m	struct:__anon164
eGeom	includeheaders/types/inputrec.h	/^  int        eGeom;       \/* pull geometry *\/$/;"	m	struct:__anon163
eI	includeheaders/types/inputrec.h	/^  int  eI;              \/* Integration method 				*\/$/;"	m	struct:__anon164
eMultentOptLast	includeheaders/types/enums.h	/^  eMultentOptName, eMultentOptNo, eMultentOptLast, eMultentOptNR$/;"	e	enum:__anon135
eMultentOptNR	includeheaders/types/enums.h	/^  eMultentOptName, eMultentOptNo, eMultentOptLast, eMultentOptNR$/;"	e	enum:__anon135
eMultentOptName	includeheaders/types/enums.h	/^  eMultentOptName, eMultentOptNo, eMultentOptLast, eMultentOptNR$/;"	e	enum:__anon135
eMultentOptNo	includeheaders/types/enums.h	/^  eMultentOptName, eMultentOptNo, eMultentOptLast, eMultentOptNR$/;"	e	enum:__anon135
eNBF_BHAM	includeheaders/types/enums.h	/^  eNBF_NONE, eNBF_LJ, eNBF_BHAM, eNBF_NR $/;"	e	enum:__anon117
eNBF_LJ	includeheaders/types/enums.h	/^  eNBF_NONE, eNBF_LJ, eNBF_BHAM, eNBF_NR $/;"	e	enum:__anon117
eNBF_NONE	includeheaders/types/enums.h	/^  eNBF_NONE, eNBF_LJ, eNBF_BHAM, eNBF_NR $/;"	e	enum:__anon117
eNBF_NR	includeheaders/types/enums.h	/^  eNBF_NONE, eNBF_LJ, eNBF_BHAM, eNBF_NR $/;"	e	enum:__anon117
eNRNB	includeheaders/types/nrnb.h	/^    eNRNB$/;"	e	enum:__anon69
eNR_ANGLES	includeheaders/types/nrnb.h	/^    eNR_ANGLES,               eNR_G96ANGLES,            eNR_QANGLES,$/;"	e	enum:__anon69
eNR_ANGRES	includeheaders/types/nrnb.h	/^    eNR_POSRES,               eNR_ANGRES,               eNR_ANGRESZ,$/;"	e	enum:__anon69
eNR_ANGRESZ	includeheaders/types/nrnb.h	/^    eNR_POSRES,               eNR_ANGRES,               eNR_ANGRESZ,$/;"	e	enum:__anon69
eNR_BONDS	includeheaders/types/nrnb.h	/^    eNR_BONDS,                eNR_G96BONDS,             eNR_FENEBONDS,$/;"	e	enum:__anon69
eNR_BORN_AVA_CHAINRULE	includeheaders/types/nrnb.h	/^    eNR_BORN_AVA_CHAINRULE,$/;"	e	enum:__anon69
eNR_BORN_AVA_RADII_HCT_OBC	includeheaders/types/nrnb.h	/^    eNR_BORN_AVA_RADII_STILL, eNR_BORN_AVA_RADII_HCT_OBC,$/;"	e	enum:__anon69
eNR_BORN_AVA_RADII_STILL	includeheaders/types/nrnb.h	/^    eNR_BORN_AVA_RADII_STILL, eNR_BORN_AVA_RADII_HCT_OBC,$/;"	e	enum:__anon69
eNR_BORN_CHAINRULE	includeheaders/types/nrnb.h	/^    eNR_BORN_CHAINRULE,$/;"	e	enum:__anon69
eNR_BORN_RADII_HCT_OBC	includeheaders/types/nrnb.h	/^    eNR_BORN_RADII_STILL,     eNR_BORN_RADII_HCT_OBC,$/;"	e	enum:__anon69
eNR_BORN_RADII_STILL	includeheaders/types/nrnb.h	/^    eNR_BORN_RADII_STILL,     eNR_BORN_RADII_HCT_OBC,$/;"	e	enum:__anon69
eNR_CGCM	includeheaders/types/nrnb.h	/^    eNR_SHIFTX,               eNR_CGCM,                 eNR_FSUM,$/;"	e	enum:__anon69
eNR_CMAP	includeheaders/types/nrnb.h	/^	eNR_CMAP,$/;"	e	enum:__anon69
eNR_CONSTR_V	includeheaders/types/nrnb.h	/^    eNR_LINCSMAT,             eNR_SHAKE,                eNR_CONSTR_V,$/;"	e	enum:__anon69
eNR_CONSTR_VIR	includeheaders/types/nrnb.h	/^    eNR_SHAKE_RIJ,            eNR_CONSTR_VIR,           eNR_SETTLE,$/;"	e	enum:__anon69
eNR_CONV	includeheaders/types/nrnb.h	/^    eNR_CONV,                 eNR_SOLVEPME,eNR_NS,      eNR_RESETX,$/;"	e	enum:__anon69
eNR_CUBICBONDS	includeheaders/types/nrnb.h	/^    eNR_MORSE,                eNR_CUBICBONDS,           eNR_WALLS,$/;"	e	enum:__anon69
eNR_DIHRES	includeheaders/types/nrnb.h	/^    eNR_DISRES,               eNR_ORIRES,               eNR_DIHRES,$/;"	e	enum:__anon69
eNR_DISRES	includeheaders/types/nrnb.h	/^    eNR_DISRES,               eNR_ORIRES,               eNR_DIHRES,$/;"	e	enum:__anon69
eNR_EKIN	includeheaders/types/nrnb.h	/^    eNR_PCOUPL,               eNR_EKIN,                 eNR_LINCS,$/;"	e	enum:__anon69
eNR_EXTUPDATE	includeheaders/types/nrnb.h	/^    eNR_UPDATE,               eNR_EXTUPDATE,            eNR_STOPCM,$/;"	e	enum:__anon69
eNR_FENEBONDS	includeheaders/types/nrnb.h	/^    eNR_BONDS,                eNR_G96BONDS,             eNR_FENEBONDS,$/;"	e	enum:__anon69
eNR_FFT	includeheaders/types/nrnb.h	/^    eNR_GATHERF,              eNR_GATHERFBSP,           eNR_FFT,$/;"	e	enum:__anon69
eNR_FOURDIH	includeheaders/types/nrnb.h	/^    eNR_RB,                   eNR_FOURDIH,              eNR_TABDIHS,$/;"	e	enum:__anon69
eNR_FSUM	includeheaders/types/nrnb.h	/^    eNR_SHIFTX,               eNR_CGCM,                 eNR_FSUM,$/;"	e	enum:__anon69
eNR_G96ANGLES	includeheaders/types/nrnb.h	/^    eNR_ANGLES,               eNR_G96ANGLES,            eNR_QANGLES,$/;"	e	enum:__anon69
eNR_G96BONDS	includeheaders/types/nrnb.h	/^    eNR_BONDS,                eNR_G96BONDS,             eNR_FENEBONDS,$/;"	e	enum:__anon69
eNR_GATHERF	includeheaders/types/nrnb.h	/^    eNR_GATHERF,              eNR_GATHERFBSP,           eNR_FFT,$/;"	e	enum:__anon69
eNR_GATHERFBSP	includeheaders/types/nrnb.h	/^    eNR_GATHERF,              eNR_GATHERFBSP,           eNR_FFT,$/;"	e	enum:__anon69
eNR_GB	includeheaders/types/nrnb.h	/^    eNR_VSITE4FDN,            eNR_VSITEN,               eNR_GB,$/;"	e	enum:__anon69
eNR_IMPROPER	includeheaders/types/nrnb.h	/^    eNR_TABANGLES,            eNR_PROPER,               eNR_IMPROPER,$/;"	e	enum:__anon69
eNR_LINCS	includeheaders/types/nrnb.h	/^    eNR_PCOUPL,               eNR_EKIN,                 eNR_LINCS,$/;"	e	enum:__anon69
eNR_LINCSMAT	includeheaders/types/nrnb.h	/^    eNR_LINCSMAT,             eNR_SHAKE,                eNR_CONSTR_V,$/;"	e	enum:__anon69
eNR_MORSE	includeheaders/types/nrnb.h	/^    eNR_MORSE,                eNR_CUBICBONDS,           eNR_WALLS,$/;"	e	enum:__anon69
eNR_NB14	includeheaders/types/nrnb.h	/^    eNR_NB14,$/;"	e	enum:__anon69
eNR_NBKERNEL010	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL010, eNR_NBKERNEL020, eNR_NBKERNEL030,$/;"	e	enum:__anon69
eNR_NBKERNEL010NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL010NF, eNR_NBKERNEL020NF, eNR_NBKERNEL030NF,$/;"	e	enum:__anon69
eNR_NBKERNEL020	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL010, eNR_NBKERNEL020, eNR_NBKERNEL030,$/;"	e	enum:__anon69
eNR_NBKERNEL020NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL010NF, eNR_NBKERNEL020NF, eNR_NBKERNEL030NF,$/;"	e	enum:__anon69
eNR_NBKERNEL030	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL010, eNR_NBKERNEL020, eNR_NBKERNEL030,$/;"	e	enum:__anon69
eNR_NBKERNEL030NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL010NF, eNR_NBKERNEL020NF, eNR_NBKERNEL030NF,$/;"	e	enum:__anon69
eNR_NBKERNEL100	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL100, eNR_NBKERNEL101, eNR_NBKERNEL102, eNR_NBKERNEL103, eNR_NBKERNEL104,$/;"	e	enum:__anon69
eNR_NBKERNEL100NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL100NF, eNR_NBKERNEL101NF, eNR_NBKERNEL102NF, eNR_NBKERNEL103NF, eNR_NBKERNEL104NF,$/;"	e	enum:__anon69
eNR_NBKERNEL101	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL100, eNR_NBKERNEL101, eNR_NBKERNEL102, eNR_NBKERNEL103, eNR_NBKERNEL104,$/;"	e	enum:__anon69
eNR_NBKERNEL101NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL100NF, eNR_NBKERNEL101NF, eNR_NBKERNEL102NF, eNR_NBKERNEL103NF, eNR_NBKERNEL104NF,$/;"	e	enum:__anon69
eNR_NBKERNEL102	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL100, eNR_NBKERNEL101, eNR_NBKERNEL102, eNR_NBKERNEL103, eNR_NBKERNEL104,$/;"	e	enum:__anon69
eNR_NBKERNEL102NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL100NF, eNR_NBKERNEL101NF, eNR_NBKERNEL102NF, eNR_NBKERNEL103NF, eNR_NBKERNEL104NF,$/;"	e	enum:__anon69
eNR_NBKERNEL103	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL100, eNR_NBKERNEL101, eNR_NBKERNEL102, eNR_NBKERNEL103, eNR_NBKERNEL104,$/;"	e	enum:__anon69
eNR_NBKERNEL103NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL100NF, eNR_NBKERNEL101NF, eNR_NBKERNEL102NF, eNR_NBKERNEL103NF, eNR_NBKERNEL104NF,$/;"	e	enum:__anon69
eNR_NBKERNEL104	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL100, eNR_NBKERNEL101, eNR_NBKERNEL102, eNR_NBKERNEL103, eNR_NBKERNEL104,$/;"	e	enum:__anon69
eNR_NBKERNEL104NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL100NF, eNR_NBKERNEL101NF, eNR_NBKERNEL102NF, eNR_NBKERNEL103NF, eNR_NBKERNEL104NF,$/;"	e	enum:__anon69
eNR_NBKERNEL110	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL110, eNR_NBKERNEL111, eNR_NBKERNEL112, eNR_NBKERNEL113, eNR_NBKERNEL114,$/;"	e	enum:__anon69
eNR_NBKERNEL110NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL110NF, eNR_NBKERNEL111NF, eNR_NBKERNEL112NF, eNR_NBKERNEL113NF, eNR_NBKERNEL114NF,$/;"	e	enum:__anon69
eNR_NBKERNEL111	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL110, eNR_NBKERNEL111, eNR_NBKERNEL112, eNR_NBKERNEL113, eNR_NBKERNEL114,$/;"	e	enum:__anon69
eNR_NBKERNEL111NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL110NF, eNR_NBKERNEL111NF, eNR_NBKERNEL112NF, eNR_NBKERNEL113NF, eNR_NBKERNEL114NF,$/;"	e	enum:__anon69
eNR_NBKERNEL112	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL110, eNR_NBKERNEL111, eNR_NBKERNEL112, eNR_NBKERNEL113, eNR_NBKERNEL114,$/;"	e	enum:__anon69
eNR_NBKERNEL112NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL110NF, eNR_NBKERNEL111NF, eNR_NBKERNEL112NF, eNR_NBKERNEL113NF, eNR_NBKERNEL114NF,$/;"	e	enum:__anon69
eNR_NBKERNEL113	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL110, eNR_NBKERNEL111, eNR_NBKERNEL112, eNR_NBKERNEL113, eNR_NBKERNEL114,$/;"	e	enum:__anon69
eNR_NBKERNEL113NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL110NF, eNR_NBKERNEL111NF, eNR_NBKERNEL112NF, eNR_NBKERNEL113NF, eNR_NBKERNEL114NF,$/;"	e	enum:__anon69
eNR_NBKERNEL114	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL110, eNR_NBKERNEL111, eNR_NBKERNEL112, eNR_NBKERNEL113, eNR_NBKERNEL114,$/;"	e	enum:__anon69
eNR_NBKERNEL114NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL110NF, eNR_NBKERNEL111NF, eNR_NBKERNEL112NF, eNR_NBKERNEL113NF, eNR_NBKERNEL114NF,$/;"	e	enum:__anon69
eNR_NBKERNEL120	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL120, eNR_NBKERNEL121, eNR_NBKERNEL122, eNR_NBKERNEL123, eNR_NBKERNEL124,$/;"	e	enum:__anon69
eNR_NBKERNEL120NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL120NF, eNR_NBKERNEL121NF, eNR_NBKERNEL122NF, eNR_NBKERNEL123NF, eNR_NBKERNEL124NF,$/;"	e	enum:__anon69
eNR_NBKERNEL121	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL120, eNR_NBKERNEL121, eNR_NBKERNEL122, eNR_NBKERNEL123, eNR_NBKERNEL124,$/;"	e	enum:__anon69
eNR_NBKERNEL121NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL120NF, eNR_NBKERNEL121NF, eNR_NBKERNEL122NF, eNR_NBKERNEL123NF, eNR_NBKERNEL124NF,$/;"	e	enum:__anon69
eNR_NBKERNEL122	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL120, eNR_NBKERNEL121, eNR_NBKERNEL122, eNR_NBKERNEL123, eNR_NBKERNEL124,$/;"	e	enum:__anon69
eNR_NBKERNEL122NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL120NF, eNR_NBKERNEL121NF, eNR_NBKERNEL122NF, eNR_NBKERNEL123NF, eNR_NBKERNEL124NF,$/;"	e	enum:__anon69
eNR_NBKERNEL123	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL120, eNR_NBKERNEL121, eNR_NBKERNEL122, eNR_NBKERNEL123, eNR_NBKERNEL124,$/;"	e	enum:__anon69
eNR_NBKERNEL123NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL120NF, eNR_NBKERNEL121NF, eNR_NBKERNEL122NF, eNR_NBKERNEL123NF, eNR_NBKERNEL124NF,$/;"	e	enum:__anon69
eNR_NBKERNEL124	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL120, eNR_NBKERNEL121, eNR_NBKERNEL122, eNR_NBKERNEL123, eNR_NBKERNEL124,$/;"	e	enum:__anon69
eNR_NBKERNEL124NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL120NF, eNR_NBKERNEL121NF, eNR_NBKERNEL122NF, eNR_NBKERNEL123NF, eNR_NBKERNEL124NF,$/;"	e	enum:__anon69
eNR_NBKERNEL130	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL130, eNR_NBKERNEL131, eNR_NBKERNEL132, eNR_NBKERNEL133, eNR_NBKERNEL134,$/;"	e	enum:__anon69
eNR_NBKERNEL130NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL130NF, eNR_NBKERNEL131NF, eNR_NBKERNEL132NF, eNR_NBKERNEL133NF, eNR_NBKERNEL134NF,$/;"	e	enum:__anon69
eNR_NBKERNEL131	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL130, eNR_NBKERNEL131, eNR_NBKERNEL132, eNR_NBKERNEL133, eNR_NBKERNEL134,$/;"	e	enum:__anon69
eNR_NBKERNEL131NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL130NF, eNR_NBKERNEL131NF, eNR_NBKERNEL132NF, eNR_NBKERNEL133NF, eNR_NBKERNEL134NF,$/;"	e	enum:__anon69
eNR_NBKERNEL132	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL130, eNR_NBKERNEL131, eNR_NBKERNEL132, eNR_NBKERNEL133, eNR_NBKERNEL134,$/;"	e	enum:__anon69
eNR_NBKERNEL132NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL130NF, eNR_NBKERNEL131NF, eNR_NBKERNEL132NF, eNR_NBKERNEL133NF, eNR_NBKERNEL134NF,$/;"	e	enum:__anon69
eNR_NBKERNEL133	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL130, eNR_NBKERNEL131, eNR_NBKERNEL132, eNR_NBKERNEL133, eNR_NBKERNEL134,$/;"	e	enum:__anon69
eNR_NBKERNEL133NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL130NF, eNR_NBKERNEL131NF, eNR_NBKERNEL132NF, eNR_NBKERNEL133NF, eNR_NBKERNEL134NF,$/;"	e	enum:__anon69
eNR_NBKERNEL134	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL130, eNR_NBKERNEL131, eNR_NBKERNEL132, eNR_NBKERNEL133, eNR_NBKERNEL134,$/;"	e	enum:__anon69
eNR_NBKERNEL134NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL130NF, eNR_NBKERNEL131NF, eNR_NBKERNEL132NF, eNR_NBKERNEL133NF, eNR_NBKERNEL134NF,$/;"	e	enum:__anon69
eNR_NBKERNEL200	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL200, eNR_NBKERNEL201, eNR_NBKERNEL202, eNR_NBKERNEL203, eNR_NBKERNEL204,$/;"	e	enum:__anon69
eNR_NBKERNEL200NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL200NF, eNR_NBKERNEL201NF, eNR_NBKERNEL202NF, eNR_NBKERNEL203NF, eNR_NBKERNEL204NF,$/;"	e	enum:__anon69
eNR_NBKERNEL201	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL200, eNR_NBKERNEL201, eNR_NBKERNEL202, eNR_NBKERNEL203, eNR_NBKERNEL204,$/;"	e	enum:__anon69
eNR_NBKERNEL201NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL200NF, eNR_NBKERNEL201NF, eNR_NBKERNEL202NF, eNR_NBKERNEL203NF, eNR_NBKERNEL204NF,$/;"	e	enum:__anon69
eNR_NBKERNEL202	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL200, eNR_NBKERNEL201, eNR_NBKERNEL202, eNR_NBKERNEL203, eNR_NBKERNEL204,$/;"	e	enum:__anon69
eNR_NBKERNEL202NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL200NF, eNR_NBKERNEL201NF, eNR_NBKERNEL202NF, eNR_NBKERNEL203NF, eNR_NBKERNEL204NF,$/;"	e	enum:__anon69
eNR_NBKERNEL203	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL200, eNR_NBKERNEL201, eNR_NBKERNEL202, eNR_NBKERNEL203, eNR_NBKERNEL204,$/;"	e	enum:__anon69
eNR_NBKERNEL203NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL200NF, eNR_NBKERNEL201NF, eNR_NBKERNEL202NF, eNR_NBKERNEL203NF, eNR_NBKERNEL204NF,$/;"	e	enum:__anon69
eNR_NBKERNEL204	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL200, eNR_NBKERNEL201, eNR_NBKERNEL202, eNR_NBKERNEL203, eNR_NBKERNEL204,$/;"	e	enum:__anon69
eNR_NBKERNEL204NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL200NF, eNR_NBKERNEL201NF, eNR_NBKERNEL202NF, eNR_NBKERNEL203NF, eNR_NBKERNEL204NF,$/;"	e	enum:__anon69
eNR_NBKERNEL210	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL210, eNR_NBKERNEL211, eNR_NBKERNEL212, eNR_NBKERNEL213, eNR_NBKERNEL214,$/;"	e	enum:__anon69
eNR_NBKERNEL210NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL210NF, eNR_NBKERNEL211NF, eNR_NBKERNEL212NF, eNR_NBKERNEL213NF, eNR_NBKERNEL214NF,$/;"	e	enum:__anon69
eNR_NBKERNEL211	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL210, eNR_NBKERNEL211, eNR_NBKERNEL212, eNR_NBKERNEL213, eNR_NBKERNEL214,$/;"	e	enum:__anon69
eNR_NBKERNEL211NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL210NF, eNR_NBKERNEL211NF, eNR_NBKERNEL212NF, eNR_NBKERNEL213NF, eNR_NBKERNEL214NF,$/;"	e	enum:__anon69
eNR_NBKERNEL212	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL210, eNR_NBKERNEL211, eNR_NBKERNEL212, eNR_NBKERNEL213, eNR_NBKERNEL214,$/;"	e	enum:__anon69
eNR_NBKERNEL212NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL210NF, eNR_NBKERNEL211NF, eNR_NBKERNEL212NF, eNR_NBKERNEL213NF, eNR_NBKERNEL214NF,$/;"	e	enum:__anon69
eNR_NBKERNEL213	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL210, eNR_NBKERNEL211, eNR_NBKERNEL212, eNR_NBKERNEL213, eNR_NBKERNEL214,$/;"	e	enum:__anon69
eNR_NBKERNEL213NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL210NF, eNR_NBKERNEL211NF, eNR_NBKERNEL212NF, eNR_NBKERNEL213NF, eNR_NBKERNEL214NF,$/;"	e	enum:__anon69
eNR_NBKERNEL214	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL210, eNR_NBKERNEL211, eNR_NBKERNEL212, eNR_NBKERNEL213, eNR_NBKERNEL214,$/;"	e	enum:__anon69
eNR_NBKERNEL214NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL210NF, eNR_NBKERNEL211NF, eNR_NBKERNEL212NF, eNR_NBKERNEL213NF, eNR_NBKERNEL214NF,$/;"	e	enum:__anon69
eNR_NBKERNEL220	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL220, eNR_NBKERNEL221, eNR_NBKERNEL222, eNR_NBKERNEL223, eNR_NBKERNEL224,$/;"	e	enum:__anon69
eNR_NBKERNEL220NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL220NF, eNR_NBKERNEL221NF, eNR_NBKERNEL222NF, eNR_NBKERNEL223NF, eNR_NBKERNEL224NF,$/;"	e	enum:__anon69
eNR_NBKERNEL221	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL220, eNR_NBKERNEL221, eNR_NBKERNEL222, eNR_NBKERNEL223, eNR_NBKERNEL224,$/;"	e	enum:__anon69
eNR_NBKERNEL221NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL220NF, eNR_NBKERNEL221NF, eNR_NBKERNEL222NF, eNR_NBKERNEL223NF, eNR_NBKERNEL224NF,$/;"	e	enum:__anon69
eNR_NBKERNEL222	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL220, eNR_NBKERNEL221, eNR_NBKERNEL222, eNR_NBKERNEL223, eNR_NBKERNEL224,$/;"	e	enum:__anon69
eNR_NBKERNEL222NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL220NF, eNR_NBKERNEL221NF, eNR_NBKERNEL222NF, eNR_NBKERNEL223NF, eNR_NBKERNEL224NF,$/;"	e	enum:__anon69
eNR_NBKERNEL223	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL220, eNR_NBKERNEL221, eNR_NBKERNEL222, eNR_NBKERNEL223, eNR_NBKERNEL224,$/;"	e	enum:__anon69
eNR_NBKERNEL223NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL220NF, eNR_NBKERNEL221NF, eNR_NBKERNEL222NF, eNR_NBKERNEL223NF, eNR_NBKERNEL224NF,$/;"	e	enum:__anon69
eNR_NBKERNEL224	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL220, eNR_NBKERNEL221, eNR_NBKERNEL222, eNR_NBKERNEL223, eNR_NBKERNEL224,$/;"	e	enum:__anon69
eNR_NBKERNEL224NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL220NF, eNR_NBKERNEL221NF, eNR_NBKERNEL222NF, eNR_NBKERNEL223NF, eNR_NBKERNEL224NF,$/;"	e	enum:__anon69
eNR_NBKERNEL230	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL230, eNR_NBKERNEL231, eNR_NBKERNEL232, eNR_NBKERNEL233, eNR_NBKERNEL234,$/;"	e	enum:__anon69
eNR_NBKERNEL230NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL230NF, eNR_NBKERNEL231NF, eNR_NBKERNEL232NF, eNR_NBKERNEL233NF, eNR_NBKERNEL234NF,$/;"	e	enum:__anon69
eNR_NBKERNEL231	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL230, eNR_NBKERNEL231, eNR_NBKERNEL232, eNR_NBKERNEL233, eNR_NBKERNEL234,$/;"	e	enum:__anon69
eNR_NBKERNEL231NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL230NF, eNR_NBKERNEL231NF, eNR_NBKERNEL232NF, eNR_NBKERNEL233NF, eNR_NBKERNEL234NF,$/;"	e	enum:__anon69
eNR_NBKERNEL232	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL230, eNR_NBKERNEL231, eNR_NBKERNEL232, eNR_NBKERNEL233, eNR_NBKERNEL234,$/;"	e	enum:__anon69
eNR_NBKERNEL232NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL230NF, eNR_NBKERNEL231NF, eNR_NBKERNEL232NF, eNR_NBKERNEL233NF, eNR_NBKERNEL234NF,$/;"	e	enum:__anon69
eNR_NBKERNEL233	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL230, eNR_NBKERNEL231, eNR_NBKERNEL232, eNR_NBKERNEL233, eNR_NBKERNEL234,$/;"	e	enum:__anon69
eNR_NBKERNEL233NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL230NF, eNR_NBKERNEL231NF, eNR_NBKERNEL232NF, eNR_NBKERNEL233NF, eNR_NBKERNEL234NF,$/;"	e	enum:__anon69
eNR_NBKERNEL234	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL230, eNR_NBKERNEL231, eNR_NBKERNEL232, eNR_NBKERNEL233, eNR_NBKERNEL234,$/;"	e	enum:__anon69
eNR_NBKERNEL234NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL230NF, eNR_NBKERNEL231NF, eNR_NBKERNEL232NF, eNR_NBKERNEL233NF, eNR_NBKERNEL234NF,$/;"	e	enum:__anon69
eNR_NBKERNEL300	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL300, eNR_NBKERNEL301, eNR_NBKERNEL302, eNR_NBKERNEL303, eNR_NBKERNEL304,$/;"	e	enum:__anon69
eNR_NBKERNEL300NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL300NF, eNR_NBKERNEL301NF, eNR_NBKERNEL302NF, eNR_NBKERNEL303NF, eNR_NBKERNEL304NF,$/;"	e	enum:__anon69
eNR_NBKERNEL301	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL300, eNR_NBKERNEL301, eNR_NBKERNEL302, eNR_NBKERNEL303, eNR_NBKERNEL304,$/;"	e	enum:__anon69
eNR_NBKERNEL301NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL300NF, eNR_NBKERNEL301NF, eNR_NBKERNEL302NF, eNR_NBKERNEL303NF, eNR_NBKERNEL304NF,$/;"	e	enum:__anon69
eNR_NBKERNEL302	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL300, eNR_NBKERNEL301, eNR_NBKERNEL302, eNR_NBKERNEL303, eNR_NBKERNEL304,$/;"	e	enum:__anon69
eNR_NBKERNEL302NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL300NF, eNR_NBKERNEL301NF, eNR_NBKERNEL302NF, eNR_NBKERNEL303NF, eNR_NBKERNEL304NF,$/;"	e	enum:__anon69
eNR_NBKERNEL303	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL300, eNR_NBKERNEL301, eNR_NBKERNEL302, eNR_NBKERNEL303, eNR_NBKERNEL304,$/;"	e	enum:__anon69
eNR_NBKERNEL303NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL300NF, eNR_NBKERNEL301NF, eNR_NBKERNEL302NF, eNR_NBKERNEL303NF, eNR_NBKERNEL304NF,$/;"	e	enum:__anon69
eNR_NBKERNEL304	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL300, eNR_NBKERNEL301, eNR_NBKERNEL302, eNR_NBKERNEL303, eNR_NBKERNEL304,$/;"	e	enum:__anon69
eNR_NBKERNEL304NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL300NF, eNR_NBKERNEL301NF, eNR_NBKERNEL302NF, eNR_NBKERNEL303NF, eNR_NBKERNEL304NF,$/;"	e	enum:__anon69
eNR_NBKERNEL310	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL310, eNR_NBKERNEL311, eNR_NBKERNEL312, eNR_NBKERNEL313, eNR_NBKERNEL314,$/;"	e	enum:__anon69
eNR_NBKERNEL310NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL310NF, eNR_NBKERNEL311NF, eNR_NBKERNEL312NF, eNR_NBKERNEL313NF, eNR_NBKERNEL314NF,$/;"	e	enum:__anon69
eNR_NBKERNEL311	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL310, eNR_NBKERNEL311, eNR_NBKERNEL312, eNR_NBKERNEL313, eNR_NBKERNEL314,$/;"	e	enum:__anon69
eNR_NBKERNEL311NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL310NF, eNR_NBKERNEL311NF, eNR_NBKERNEL312NF, eNR_NBKERNEL313NF, eNR_NBKERNEL314NF,$/;"	e	enum:__anon69
eNR_NBKERNEL312	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL310, eNR_NBKERNEL311, eNR_NBKERNEL312, eNR_NBKERNEL313, eNR_NBKERNEL314,$/;"	e	enum:__anon69
eNR_NBKERNEL312NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL310NF, eNR_NBKERNEL311NF, eNR_NBKERNEL312NF, eNR_NBKERNEL313NF, eNR_NBKERNEL314NF,$/;"	e	enum:__anon69
eNR_NBKERNEL313	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL310, eNR_NBKERNEL311, eNR_NBKERNEL312, eNR_NBKERNEL313, eNR_NBKERNEL314,$/;"	e	enum:__anon69
eNR_NBKERNEL313NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL310NF, eNR_NBKERNEL311NF, eNR_NBKERNEL312NF, eNR_NBKERNEL313NF, eNR_NBKERNEL314NF,$/;"	e	enum:__anon69
eNR_NBKERNEL314	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL310, eNR_NBKERNEL311, eNR_NBKERNEL312, eNR_NBKERNEL313, eNR_NBKERNEL314,$/;"	e	enum:__anon69
eNR_NBKERNEL314NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL310NF, eNR_NBKERNEL311NF, eNR_NBKERNEL312NF, eNR_NBKERNEL313NF, eNR_NBKERNEL314NF,$/;"	e	enum:__anon69
eNR_NBKERNEL320	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL320, eNR_NBKERNEL321, eNR_NBKERNEL322, eNR_NBKERNEL323, eNR_NBKERNEL324,$/;"	e	enum:__anon69
eNR_NBKERNEL320NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL320NF, eNR_NBKERNEL321NF, eNR_NBKERNEL322NF, eNR_NBKERNEL323NF, eNR_NBKERNEL324NF,$/;"	e	enum:__anon69
eNR_NBKERNEL321	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL320, eNR_NBKERNEL321, eNR_NBKERNEL322, eNR_NBKERNEL323, eNR_NBKERNEL324,$/;"	e	enum:__anon69
eNR_NBKERNEL321NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL320NF, eNR_NBKERNEL321NF, eNR_NBKERNEL322NF, eNR_NBKERNEL323NF, eNR_NBKERNEL324NF,$/;"	e	enum:__anon69
eNR_NBKERNEL322	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL320, eNR_NBKERNEL321, eNR_NBKERNEL322, eNR_NBKERNEL323, eNR_NBKERNEL324,$/;"	e	enum:__anon69
eNR_NBKERNEL322NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL320NF, eNR_NBKERNEL321NF, eNR_NBKERNEL322NF, eNR_NBKERNEL323NF, eNR_NBKERNEL324NF,$/;"	e	enum:__anon69
eNR_NBKERNEL323	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL320, eNR_NBKERNEL321, eNR_NBKERNEL322, eNR_NBKERNEL323, eNR_NBKERNEL324,$/;"	e	enum:__anon69
eNR_NBKERNEL323NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL320NF, eNR_NBKERNEL321NF, eNR_NBKERNEL322NF, eNR_NBKERNEL323NF, eNR_NBKERNEL324NF,$/;"	e	enum:__anon69
eNR_NBKERNEL324	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL320, eNR_NBKERNEL321, eNR_NBKERNEL322, eNR_NBKERNEL323, eNR_NBKERNEL324,$/;"	e	enum:__anon69
eNR_NBKERNEL324NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL320NF, eNR_NBKERNEL321NF, eNR_NBKERNEL322NF, eNR_NBKERNEL323NF, eNR_NBKERNEL324NF,$/;"	e	enum:__anon69
eNR_NBKERNEL330	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL330, eNR_NBKERNEL331, eNR_NBKERNEL332, eNR_NBKERNEL333, eNR_NBKERNEL334,$/;"	e	enum:__anon69
eNR_NBKERNEL330NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL330NF, eNR_NBKERNEL331NF, eNR_NBKERNEL332NF, eNR_NBKERNEL333NF, eNR_NBKERNEL334NF,$/;"	e	enum:__anon69
eNR_NBKERNEL331	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL330, eNR_NBKERNEL331, eNR_NBKERNEL332, eNR_NBKERNEL333, eNR_NBKERNEL334,$/;"	e	enum:__anon69
eNR_NBKERNEL331NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL330NF, eNR_NBKERNEL331NF, eNR_NBKERNEL332NF, eNR_NBKERNEL333NF, eNR_NBKERNEL334NF,$/;"	e	enum:__anon69
eNR_NBKERNEL332	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL330, eNR_NBKERNEL331, eNR_NBKERNEL332, eNR_NBKERNEL333, eNR_NBKERNEL334,$/;"	e	enum:__anon69
eNR_NBKERNEL332NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL330NF, eNR_NBKERNEL331NF, eNR_NBKERNEL332NF, eNR_NBKERNEL333NF, eNR_NBKERNEL334NF,$/;"	e	enum:__anon69
eNR_NBKERNEL333	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL330, eNR_NBKERNEL331, eNR_NBKERNEL332, eNR_NBKERNEL333, eNR_NBKERNEL334,$/;"	e	enum:__anon69
eNR_NBKERNEL333NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL330NF, eNR_NBKERNEL331NF, eNR_NBKERNEL332NF, eNR_NBKERNEL333NF, eNR_NBKERNEL334NF,$/;"	e	enum:__anon69
eNR_NBKERNEL334	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL330, eNR_NBKERNEL331, eNR_NBKERNEL332, eNR_NBKERNEL333, eNR_NBKERNEL334,$/;"	e	enum:__anon69
eNR_NBKERNEL334NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL330NF, eNR_NBKERNEL331NF, eNR_NBKERNEL332NF, eNR_NBKERNEL333NF, eNR_NBKERNEL334NF,$/;"	e	enum:__anon69
eNR_NBKERNEL400	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL400, eNR_NBKERNEL410, eNR_NBKERNEL430,$/;"	e	enum:__anon69
eNR_NBKERNEL400NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL400NF, eNR_NBKERNEL410NF, eNR_NBKERNEL430NF, $/;"	e	enum:__anon69
eNR_NBKERNEL410	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL400, eNR_NBKERNEL410, eNR_NBKERNEL430,$/;"	e	enum:__anon69
eNR_NBKERNEL410NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL400NF, eNR_NBKERNEL410NF, eNR_NBKERNEL430NF, $/;"	e	enum:__anon69
eNR_NBKERNEL430	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL400, eNR_NBKERNEL410, eNR_NBKERNEL430,$/;"	e	enum:__anon69
eNR_NBKERNEL430NF	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL400NF, eNR_NBKERNEL410NF, eNR_NBKERNEL430NF, $/;"	e	enum:__anon69
eNR_NBKERNEL_ALLVSALL	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL_ALLVSALL,$/;"	e	enum:__anon69
eNR_NBKERNEL_ALLVSALLGB	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL_ALLVSALLGB,$/;"	e	enum:__anon69
eNR_NBKERNEL_FREE_ENERGY	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL_FREE_ENERGY = eNR_NBKERNEL_NR,$/;"	e	enum:__anon69
eNR_NBKERNEL_NONE	includeheaders/types/nrnb.h	56;"	d
eNR_NBKERNEL_NR	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL_NR,$/;"	e	enum:__anon69
eNR_NBKERNEL_OUTER	includeheaders/types/nrnb.h	/^    eNR_NBKERNEL_OUTER,$/;"	e	enum:__anon69
eNR_NS	includeheaders/types/nrnb.h	/^    eNR_CONV,                 eNR_SOLVEPME,eNR_NS,      eNR_RESETX,$/;"	e	enum:__anon69
eNR_ORIRES	includeheaders/types/nrnb.h	/^    eNR_DISRES,               eNR_ORIRES,               eNR_DIHRES,$/;"	e	enum:__anon69
eNR_PCOUPL	includeheaders/types/nrnb.h	/^    eNR_PCOUPL,               eNR_EKIN,                 eNR_LINCS,$/;"	e	enum:__anon69
eNR_POSRES	includeheaders/types/nrnb.h	/^    eNR_POSRES,               eNR_ANGRES,               eNR_ANGRESZ,$/;"	e	enum:__anon69
eNR_PROPER	includeheaders/types/nrnb.h	/^    eNR_TABANGLES,            eNR_PROPER,               eNR_IMPROPER,$/;"	e	enum:__anon69
eNR_QANGLES	includeheaders/types/nrnb.h	/^    eNR_ANGLES,               eNR_G96ANGLES,            eNR_QANGLES,$/;"	e	enum:__anon69
eNR_RB	includeheaders/types/nrnb.h	/^    eNR_RB,                   eNR_FOURDIH,              eNR_TABDIHS,$/;"	e	enum:__anon69
eNR_RESETX	includeheaders/types/nrnb.h	/^    eNR_CONV,                 eNR_SOLVEPME,eNR_NS,      eNR_RESETX,$/;"	e	enum:__anon69
eNR_RESTRBONDS	includeheaders/types/nrnb.h	/^    eNR_TABBONDS,             eNR_RESTRBONDS,$/;"	e	enum:__anon69
eNR_SETTLE	includeheaders/types/nrnb.h	/^    eNR_SHAKE_RIJ,            eNR_CONSTR_VIR,           eNR_SETTLE,$/;"	e	enum:__anon69
eNR_SHAKE	includeheaders/types/nrnb.h	/^    eNR_LINCSMAT,             eNR_SHAKE,                eNR_CONSTR_V,$/;"	e	enum:__anon69
eNR_SHAKE_RIJ	includeheaders/types/nrnb.h	/^    eNR_SHAKE_RIJ,            eNR_CONSTR_VIR,           eNR_SETTLE,$/;"	e	enum:__anon69
eNR_SHIFTX	includeheaders/types/nrnb.h	/^    eNR_SHIFTX,               eNR_CGCM,                 eNR_FSUM,$/;"	e	enum:__anon69
eNR_SOLVEPME	includeheaders/types/nrnb.h	/^    eNR_CONV,                 eNR_SOLVEPME,eNR_NS,      eNR_RESETX,$/;"	e	enum:__anon69
eNR_SPREADQ	includeheaders/types/nrnb.h	/^    eNR_WEIGHTS,              eNR_SPREADQ,              eNR_SPREADQBSP,$/;"	e	enum:__anon69
eNR_SPREADQBSP	includeheaders/types/nrnb.h	/^    eNR_WEIGHTS,              eNR_SPREADQ,              eNR_SPREADQBSP,$/;"	e	enum:__anon69
eNR_STOPCM	includeheaders/types/nrnb.h	/^    eNR_UPDATE,               eNR_EXTUPDATE,            eNR_STOPCM,$/;"	e	enum:__anon69
eNR_TABANGLES	includeheaders/types/nrnb.h	/^    eNR_TABANGLES,            eNR_PROPER,               eNR_IMPROPER,$/;"	e	enum:__anon69
eNR_TABBONDS	includeheaders/types/nrnb.h	/^    eNR_TABBONDS,             eNR_RESTRBONDS,$/;"	e	enum:__anon69
eNR_TABDIHS	includeheaders/types/nrnb.h	/^    eNR_RB,                   eNR_FOURDIH,              eNR_TABDIHS,$/;"	e	enum:__anon69
eNR_THOLE	includeheaders/types/nrnb.h	/^    eNR_WPOL,                 eNR_THOLE,                eNR_VIRIAL,$/;"	e	enum:__anon69
eNR_UPDATE	includeheaders/types/nrnb.h	/^    eNR_UPDATE,               eNR_EXTUPDATE,            eNR_STOPCM,$/;"	e	enum:__anon69
eNR_VIRIAL	includeheaders/types/nrnb.h	/^    eNR_WPOL,                 eNR_THOLE,                eNR_VIRIAL,$/;"	e	enum:__anon69
eNR_VSITE2	includeheaders/types/nrnb.h	/^    eNR_VSITE2,               eNR_VSITE3,               eNR_VSITE3FD,$/;"	e	enum:__anon69
eNR_VSITE3	includeheaders/types/nrnb.h	/^    eNR_VSITE2,               eNR_VSITE3,               eNR_VSITE3FD,$/;"	e	enum:__anon69
eNR_VSITE3FAD	includeheaders/types/nrnb.h	/^    eNR_VSITE3FAD,            eNR_VSITE3OUT,            eNR_VSITE4FD,$/;"	e	enum:__anon69
eNR_VSITE3FD	includeheaders/types/nrnb.h	/^    eNR_VSITE2,               eNR_VSITE3,               eNR_VSITE3FD,$/;"	e	enum:__anon69
eNR_VSITE3OUT	includeheaders/types/nrnb.h	/^    eNR_VSITE3FAD,            eNR_VSITE3OUT,            eNR_VSITE4FD,$/;"	e	enum:__anon69
eNR_VSITE4FD	includeheaders/types/nrnb.h	/^    eNR_VSITE3FAD,            eNR_VSITE3OUT,            eNR_VSITE4FD,$/;"	e	enum:__anon69
eNR_VSITE4FDN	includeheaders/types/nrnb.h	/^    eNR_VSITE4FDN,            eNR_VSITEN,               eNR_GB,$/;"	e	enum:__anon69
eNR_VSITEN	includeheaders/types/nrnb.h	/^    eNR_VSITE4FDN,            eNR_VSITEN,               eNR_GB,$/;"	e	enum:__anon69
eNR_WALLS	includeheaders/types/nrnb.h	/^    eNR_MORSE,                eNR_CUBICBONDS,           eNR_WALLS,$/;"	e	enum:__anon69
eNR_WEIGHTS	includeheaders/types/nrnb.h	/^    eNR_WEIGHTS,              eNR_SPREADQ,              eNR_SPREADQBSP,$/;"	e	enum:__anon69
eNR_WPOL	includeheaders/types/nrnb.h	/^    eNR_WPOL,                 eNR_THOLE,                eNR_VIRIAL,$/;"	e	enum:__anon69
ePBC	includeheaders/types/forcerec.h	/^  int  ePBC;$/;"	m	struct:__anon157
ePBC	includeheaders/types/inputrec.h	/^  int        ePBC;        \/* the boundary conditions *\/$/;"	m	struct:__anon163
ePBC	includeheaders/types/inputrec.h	/^  int  ePBC;		\/* Type of periodic boundary conditions		*\/$/;"	m	struct:__anon164
ePBC	includeheaders/types/trx.h	/^  int  ePBC;      \/* the type of pbc                  *\/$/;"	m	struct:trxframe
ePBCDX	includeheaders/types/pbc.h	/^  int    ePBCDX;$/;"	m	struct:__anon100
ePull	includeheaders/types/inputrec.h	/^  int  ePull;           \/* Type of pulling: no, umbrella or constraint  *\/$/;"	m	struct:__anon164
eQMMMschemeNR	includeheaders/types/enums.h	/^  eQMMMschemenormal,eQMMMschemeoniom,eQMMMschemeNR$/;"	e	enum:__anon134
eQMMMschemenormal	includeheaders/types/enums.h	/^  eQMMMschemenormal,eQMMMschemeoniom,eQMMMschemeNR$/;"	e	enum:__anon134
eQMMMschemeoniom	includeheaders/types/enums.h	/^  eQMMMschemenormal,eQMMMschemeoniom,eQMMMschemeNR$/;"	e	enum:__anon134
eQMbasis321G	includeheaders/types/enums.h	/^  eQMbasisSTO3G, eQMbasisSTO3G2, eQMbasis321G, $/;"	e	enum:__anon133
eQMbasis321Gp	includeheaders/types/enums.h	/^  eQMbasis321Gp, eQMbasis321dGp, eQMbasis621G,$/;"	e	enum:__anon133
eQMbasis321dGp	includeheaders/types/enums.h	/^  eQMbasis321Gp, eQMbasis321dGp, eQMbasis621G,$/;"	e	enum:__anon133
eQMbasis621G	includeheaders/types/enums.h	/^  eQMbasis321Gp, eQMbasis321dGp, eQMbasis621G,$/;"	e	enum:__anon133
eQMbasis6311G	includeheaders/types/enums.h	/^  eQMbasis6311G, eQMbasisNR$/;"	e	enum:__anon133
eQMbasis631G	includeheaders/types/enums.h	/^  eQMbasis631G, eQMbasis631Gp, eQMbasis631dGp, $/;"	e	enum:__anon133
eQMbasis631Gp	includeheaders/types/enums.h	/^  eQMbasis631G, eQMbasis631Gp, eQMbasis631dGp, $/;"	e	enum:__anon133
eQMbasis631dGp	includeheaders/types/enums.h	/^  eQMbasis631G, eQMbasis631Gp, eQMbasis631dGp, $/;"	e	enum:__anon133
eQMbasisNR	includeheaders/types/enums.h	/^  eQMbasis6311G, eQMbasisNR$/;"	e	enum:__anon133
eQMbasisSTO3G	includeheaders/types/enums.h	/^  eQMbasisSTO3G, eQMbasisSTO3G2, eQMbasis321G, $/;"	e	enum:__anon133
eQMbasisSTO3G2	includeheaders/types/enums.h	/^  eQMbasisSTO3G, eQMbasisSTO3G2, eQMbasis321G, $/;"	e	enum:__anon133
eQMmethodAM1	includeheaders/types/enums.h	/^  eQMmethodAM1, eQMmethodPM3, eQMmethodRHF, $/;"	e	enum:__anon132
eQMmethodB3LYP	includeheaders/types/enums.h	/^  eQMmethodUHF, eQMmethodDFT, eQMmethodB3LYP, eQMmethodMP2, eQMmethodCASSCF, eQMmethodB3LYPLAN,$/;"	e	enum:__anon132
eQMmethodB3LYPLAN	includeheaders/types/enums.h	/^  eQMmethodUHF, eQMmethodDFT, eQMmethodB3LYP, eQMmethodMP2, eQMmethodCASSCF, eQMmethodB3LYPLAN,$/;"	e	enum:__anon132
eQMmethodCASSCF	includeheaders/types/enums.h	/^  eQMmethodUHF, eQMmethodDFT, eQMmethodB3LYP, eQMmethodMP2, eQMmethodCASSCF, eQMmethodB3LYPLAN,$/;"	e	enum:__anon132
eQMmethodDFT	includeheaders/types/enums.h	/^  eQMmethodUHF, eQMmethodDFT, eQMmethodB3LYP, eQMmethodMP2, eQMmethodCASSCF, eQMmethodB3LYPLAN,$/;"	e	enum:__anon132
eQMmethodDIRECT	includeheaders/types/enums.h	/^  eQMmethodDIRECT, eQMmethodNR$/;"	e	enum:__anon132
eQMmethodMP2	includeheaders/types/enums.h	/^  eQMmethodUHF, eQMmethodDFT, eQMmethodB3LYP, eQMmethodMP2, eQMmethodCASSCF, eQMmethodB3LYPLAN,$/;"	e	enum:__anon132
eQMmethodNR	includeheaders/types/enums.h	/^  eQMmethodDIRECT, eQMmethodNR$/;"	e	enum:__anon132
eQMmethodPM3	includeheaders/types/enums.h	/^  eQMmethodAM1, eQMmethodPM3, eQMmethodRHF, $/;"	e	enum:__anon132
eQMmethodRHF	includeheaders/types/enums.h	/^  eQMmethodAM1, eQMmethodPM3, eQMmethodRHF, $/;"	e	enum:__anon132
eQMmethodUHF	includeheaders/types/enums.h	/^  eQMmethodUHF, eQMmethodDFT, eQMmethodB3LYP, eQMmethodMP2, eQMmethodCASSCF, eQMmethodB3LYPLAN,$/;"	e	enum:__anon132
eannNO	includeheaders/types/enums.h	/^  eannNO, eannSINGLE, eannPERIODIC, eannNR $/;"	e	enum:__anon125
eannNR	includeheaders/types/enums.h	/^  eannNO, eannSINGLE, eannPERIODIC, eannNR $/;"	e	enum:__anon125
eannPERIODIC	includeheaders/types/enums.h	/^  eannNO, eannSINGLE, eannPERIODIC, eannNR $/;"	e	enum:__anon125
eannSINGLE	includeheaders/types/enums.h	/^  eannNO, eannSINGLE, eannPERIODIC, eannNR $/;"	e	enum:__anon125
eav	includeheaders/types/energy.h	/^  double eav;     \/* The running average       				*\/$/;"	m	struct:__anon147
ecmANGULAR	includeheaders/types/enums.h	/^  ecmLINEAR, ecmANGULAR, ecmNO, ecmNR $/;"	e	enum:__anon124
ecmLINEAR	includeheaders/types/enums.h	/^  ecmLINEAR, ecmANGULAR, ecmNO, ecmNR $/;"	e	enum:__anon124
ecmNO	includeheaders/types/enums.h	/^  ecmLINEAR, ecmANGULAR, ecmNO, ecmNR $/;"	e	enum:__anon124
ecmNR	includeheaders/types/enums.h	/^  ecmLINEAR, ecmANGULAR, ecmNO, ecmNR $/;"	e	enum:__anon124
econtLINCS	includeheaders/types/enums.h	/^  econtLINCS, econtSHAKE, econtNR$/;"	e	enum:__anon113
econtNR	includeheaders/types/enums.h	/^  econtLINCS, econtSHAKE, econtNR$/;"	e	enum:__anon113
econtSHAKE	includeheaders/types/enums.h	/^  econtLINCS, econtSHAKE, econtNR$/;"	e	enum:__anon113
edge	includeheaders/types/graph.h	/^  atom_id  **edge;	\/* For each node, the actual edges (bidirect.)	*\/$/;"	m	struct:__anon62
edispcAllEner	includeheaders/types/enums.h	/^  edispcNO, edispcEnerPres, edispcEner, edispcAllEnerPres, edispcAllEner, edispcNR$/;"	e	enum:__anon122
edispcAllEnerPres	includeheaders/types/enums.h	/^  edispcNO, edispcEnerPres, edispcEner, edispcAllEnerPres, edispcAllEner, edispcNR$/;"	e	enum:__anon122
edispcEner	includeheaders/types/enums.h	/^  edispcNO, edispcEnerPres, edispcEner, edispcAllEnerPres, edispcAllEner, edispcNR$/;"	e	enum:__anon122
edispcEnerPres	includeheaders/types/enums.h	/^  edispcNO, edispcEnerPres, edispcEner, edispcAllEnerPres, edispcAllEner, edispcNR$/;"	e	enum:__anon122
edispcNO	includeheaders/types/enums.h	/^  edispcNO, edispcEnerPres, edispcEner, edispcAllEnerPres, edispcAllEner, edispcNR$/;"	e	enum:__anon122
edispcNR	includeheaders/types/enums.h	/^  edispcNO, edispcEnerPres, edispcEner, edispcAllEnerPres, edispcAllEner, edispcNR$/;"	e	enum:__anon122
edrEnsemble	includeheaders/types/enums.h	/^  edrNone, edrSimple, edrEnsemble, edrNR$/;"	e	enum:__anon114
edrNR	includeheaders/types/enums.h	/^  edrNone, edrSimple, edrEnsemble, edrNR$/;"	e	enum:__anon114
edrNone	includeheaders/types/enums.h	/^  edrNone, edrSimple, edrEnsemble, edrNR$/;"	e	enum:__anon114
edrSimple	includeheaders/types/enums.h	/^  edrNone, edrSimple, edrEnsemble, edrNR$/;"	e	enum:__anon114
edrwConservative	includeheaders/types/enums.h	/^  edrwConservative, edrwEqual, edrwNR$/;"	e	enum:__anon115
edrwEqual	includeheaders/types/enums.h	/^  edrwConservative, edrwEqual, edrwNR$/;"	e	enum:__anon115
edrwNR	includeheaders/types/enums.h	/^  edrwConservative, edrwEqual, edrwNR$/;"	e	enum:__anon115
edt	includeheaders/types/fcdata.h	/^  real   edt;         \/* Multiplication factor for time averaging           *\/$/;"	m	struct:__anon64
edt_1	includeheaders/types/fcdata.h	/^  real   edt_1;        \/* 1 - edt                                            *\/$/;"	m	struct:__anon64
eelCUT	includeheaders/types/enums.h	/^  eelCUT,     eelRF,     eelGRF,   eelPME,  eelEWALD,  eelPPPM, $/;"	e	enum:__anon108
eelENCADSHIFT	includeheaders/types/enums.h	/^  eelPOISSON, eelSWITCH, eelSHIFT, eelUSER, eelGB_NOTUSED, eelRF_NEC, eelENCADSHIFT, $/;"	e	enum:__anon108
eelEWALD	includeheaders/types/enums.h	/^  eelCUT,     eelRF,     eelGRF,   eelPME,  eelEWALD,  eelPPPM, $/;"	e	enum:__anon108
eelGB_NOTUSED	includeheaders/types/enums.h	/^  eelPOISSON, eelSWITCH, eelSHIFT, eelUSER, eelGB_NOTUSED, eelRF_NEC, eelENCADSHIFT, $/;"	e	enum:__anon108
eelGRF	includeheaders/types/enums.h	/^  eelCUT,     eelRF,     eelGRF,   eelPME,  eelEWALD,  eelPPPM, $/;"	e	enum:__anon108
eelNR	includeheaders/types/enums.h	/^  eelPMEUSER, eelPMESWITCH, eelPMEUSERSWITCH, eelRF_ZERO, eelNR$/;"	e	enum:__anon108
eelPME	includeheaders/types/enums.h	/^  eelCUT,     eelRF,     eelGRF,   eelPME,  eelEWALD,  eelPPPM, $/;"	e	enum:__anon108
eelPMESWITCH	includeheaders/types/enums.h	/^  eelPMEUSER, eelPMESWITCH, eelPMEUSERSWITCH, eelRF_ZERO, eelNR$/;"	e	enum:__anon108
eelPMEUSER	includeheaders/types/enums.h	/^  eelPMEUSER, eelPMESWITCH, eelPMEUSERSWITCH, eelRF_ZERO, eelNR$/;"	e	enum:__anon108
eelPMEUSERSWITCH	includeheaders/types/enums.h	/^  eelPMEUSER, eelPMESWITCH, eelPMEUSERSWITCH, eelRF_ZERO, eelNR$/;"	e	enum:__anon108
eelPOISSON	includeheaders/types/enums.h	/^  eelPOISSON, eelSWITCH, eelSHIFT, eelUSER, eelGB_NOTUSED, eelRF_NEC, eelENCADSHIFT, $/;"	e	enum:__anon108
eelPPPM	includeheaders/types/enums.h	/^  eelCUT,     eelRF,     eelGRF,   eelPME,  eelEWALD,  eelPPPM, $/;"	e	enum:__anon108
eelRF	includeheaders/types/enums.h	/^  eelCUT,     eelRF,     eelGRF,   eelPME,  eelEWALD,  eelPPPM, $/;"	e	enum:__anon108
eelRF_NEC	includeheaders/types/enums.h	/^  eelPOISSON, eelSWITCH, eelSHIFT, eelUSER, eelGB_NOTUSED, eelRF_NEC, eelENCADSHIFT, $/;"	e	enum:__anon108
eelRF_ZERO	includeheaders/types/enums.h	/^  eelPMEUSER, eelPMESWITCH, eelPMEUSERSWITCH, eelRF_ZERO, eelNR$/;"	e	enum:__anon108
eelSHIFT	includeheaders/types/enums.h	/^  eelPOISSON, eelSWITCH, eelSHIFT, eelUSER, eelGB_NOTUSED, eelRF_NEC, eelENCADSHIFT, $/;"	e	enum:__anon108
eelSWITCH	includeheaders/types/enums.h	/^  eelPOISSON, eelSWITCH, eelSHIFT, eelUSER, eelGB_NOTUSED, eelRF_NEC, eelENCADSHIFT, $/;"	e	enum:__anon108
eelUSER	includeheaders/types/enums.h	/^  eelPOISSON, eelSWITCH, eelSHIFT, eelUSER, eelGB_NOTUSED, eelRF_NEC, eelENCADSHIFT, $/;"	e	enum:__anon108
eeltype	includeheaders/types/forcerec.h	/^  int  eeltype;$/;"	m	struct:__anon157
eewg3D	includeheaders/types/enums.h	/^  eewg3D, eewg3DC, eewgNR$/;"	e	enum:__anon109
eewg3DC	includeheaders/types/enums.h	/^  eewg3D, eewg3DC, eewgNR$/;"	e	enum:__anon109
eewgNR	includeheaders/types/enums.h	/^  eewg3D, eewg3DC, eewgNR$/;"	e	enum:__anon109
efep	includeheaders/types/forcerec.h	/^  int  efep;$/;"	m	struct:__anon157
efep	includeheaders/types/inputrec.h	/^  int  efep;   		\/* free energy interpolation no\/yes		*\/$/;"	m	struct:__anon164
efepNO	includeheaders/types/enums.h	/^  efepNO, efepYES, efepNR$/;"	e	enum:__anon118
efepNR	includeheaders/types/enums.h	/^  efepNO, efepYES, efepNR$/;"	e	enum:__anon118
efepYES	includeheaders/types/enums.h	/^  efepNO, efepYES, efepNR$/;"	e	enum:__anon118
egBHAMLR	includeheaders/types/forcerec.h	/^enum { egCOULSR, egLJSR, egBHAMSR, egCOULLR, egLJLR, egBHAMLR,$/;"	e	enum:__anon153
egBHAMSR	includeheaders/types/forcerec.h	/^enum { egCOULSR, egLJSR, egBHAMSR, egCOULLR, egLJLR, egBHAMLR,$/;"	e	enum:__anon153
egCOUL14	includeheaders/types/forcerec.h	/^       egCOUL14, egLJ14, egGB, egNR };$/;"	e	enum:__anon153
egCOULLR	includeheaders/types/forcerec.h	/^enum { egCOULSR, egLJSR, egBHAMSR, egCOULLR, egLJLR, egBHAMLR,$/;"	e	enum:__anon153
egCOULSR	includeheaders/types/forcerec.h	/^enum { egCOULSR, egLJSR, egBHAMSR, egCOULLR, egLJLR, egBHAMLR,$/;"	e	enum:__anon153
egCol	includeheaders/types/graph.h	/^typedef enum { egcolWhite, egcolGrey, egcolBlack, egcolNR } egCol;$/;"	t	typeref:enum:__anon61
egGB	includeheaders/types/forcerec.h	/^       egCOUL14, egLJ14, egGB, egNR };$/;"	e	enum:__anon153
egLJ14	includeheaders/types/forcerec.h	/^       egCOUL14, egLJ14, egGB, egNR };$/;"	e	enum:__anon153
egLJLR	includeheaders/types/forcerec.h	/^enum { egCOULSR, egLJSR, egBHAMSR, egCOULLR, egLJLR, egBHAMLR,$/;"	e	enum:__anon153
egLJSR	includeheaders/types/forcerec.h	/^enum { egCOULSR, egLJSR, egBHAMSR, egCOULLR, egLJLR, egBHAMLR,$/;"	e	enum:__anon153
egNR	includeheaders/types/forcerec.h	/^       egCOUL14, egLJ14, egGB, egNR };$/;"	e	enum:__anon153
egbHCT	includeheaders/types/enums.h	/^  egbSTILL, egbHCT, egbOBC, egbNR $/;"	e	enum:__anon127
egbNR	includeheaders/types/enums.h	/^  egbSTILL, egbHCT, egbOBC, egbNR $/;"	e	enum:__anon127
egbOBC	includeheaders/types/enums.h	/^  egbSTILL, egbHCT, egbOBC, egbNR $/;"	e	enum:__anon127
egbSTILL	includeheaders/types/enums.h	/^  egbSTILL, egbHCT, egbOBC, egbNR $/;"	e	enum:__anon127
egc	includeheaders/types/graph.h	/^  egCol   *egc;         \/* color of each node *\/$/;"	m	struct:__anon62
egcACC	includeheaders/types/topology.h	/^  egcTC,    egcENER,   egcACC, egcFREEZE, $/;"	e	enum:__anon140
egcENER	includeheaders/types/topology.h	/^  egcTC,    egcENER,   egcACC, egcFREEZE, $/;"	e	enum:__anon140
egcFREEZE	includeheaders/types/topology.h	/^  egcTC,    egcENER,   egcACC, egcFREEZE, $/;"	e	enum:__anon140
egcNR	includeheaders/types/topology.h	/^  egcNR $/;"	e	enum:__anon140
egcORFIT	includeheaders/types/topology.h	/^  egcORFIT, egcQMMM,$/;"	e	enum:__anon140
egcQMMM	includeheaders/types/topology.h	/^  egcORFIT, egcQMMM,$/;"	e	enum:__anon140
egcTC	includeheaders/types/topology.h	/^  egcTC,    egcENER,   egcACC, egcFREEZE, $/;"	e	enum:__anon140
egcUser1	includeheaders/types/topology.h	/^  egcUser1, egcUser2,  egcVCM, egcXTC,$/;"	e	enum:__anon140
egcUser2	includeheaders/types/topology.h	/^  egcUser1, egcUser2,  egcVCM, egcXTC,$/;"	e	enum:__anon140
egcVCM	includeheaders/types/topology.h	/^  egcUser1, egcUser2,  egcVCM, egcXTC,$/;"	e	enum:__anon140
egcXTC	includeheaders/types/topology.h	/^  egcUser1, egcUser2,  egcVCM, egcXTC,$/;"	e	enum:__anon140
egcolBlack	includeheaders/types/graph.h	/^typedef enum { egcolWhite, egcolGrey, egcolBlack, egcolNR } egCol;$/;"	e	enum:__anon61
egcolGrey	includeheaders/types/graph.h	/^typedef enum { egcolWhite, egcolGrey, egcolBlack, egcolNR } egCol;$/;"	e	enum:__anon61
egcolNR	includeheaders/types/graph.h	/^typedef enum { egcolWhite, egcolGrey, egcolBlack, egcolNR } egCol;$/;"	e	enum:__anon61
egcolWhite	includeheaders/types/graph.h	/^typedef enum { egcolWhite, egcolGrey, egcolBlack, egcolNR } egCol;$/;"	e	enum:__anon61
egp_flags	includeheaders/types/forcerec.h	/^  int *egp_flags;$/;"	m	struct:__anon157
egp_flags	includeheaders/types/inputrec.h	/^  int     *egp_flags;            \/* Exclusions\/tables of energy group pairs *\/$/;"	m	struct:__anon160
eiBD	includeheaders/types/enums.h	/^  eiMD, eiSteep, eiCG, eiBD, eiSD2, eiNM, eiLBFGS, eiTPI, eiTPIC, eiSD1, eiVV, eiVVAK, eiNR$/;"	e	enum:__anon112
eiCG	includeheaders/types/enums.h	/^  eiMD, eiSteep, eiCG, eiBD, eiSD2, eiNM, eiLBFGS, eiTPI, eiTPIC, eiSD1, eiVV, eiVVAK, eiNR$/;"	e	enum:__anon112
eiLBFGS	includeheaders/types/enums.h	/^  eiMD, eiSteep, eiCG, eiBD, eiSD2, eiNM, eiLBFGS, eiTPI, eiTPIC, eiSD1, eiVV, eiVVAK, eiNR$/;"	e	enum:__anon112
eiMD	includeheaders/types/enums.h	/^  eiMD, eiSteep, eiCG, eiBD, eiSD2, eiNM, eiLBFGS, eiTPI, eiTPIC, eiSD1, eiVV, eiVVAK, eiNR$/;"	e	enum:__anon112
eiNM	includeheaders/types/enums.h	/^  eiMD, eiSteep, eiCG, eiBD, eiSD2, eiNM, eiLBFGS, eiTPI, eiTPIC, eiSD1, eiVV, eiVVAK, eiNR$/;"	e	enum:__anon112
eiNR	includeheaders/types/enums.h	/^  eiMD, eiSteep, eiCG, eiBD, eiSD2, eiNM, eiLBFGS, eiTPI, eiTPIC, eiSD1, eiVV, eiVVAK, eiNR$/;"	e	enum:__anon112
eiSD1	includeheaders/types/enums.h	/^  eiMD, eiSteep, eiCG, eiBD, eiSD2, eiNM, eiLBFGS, eiTPI, eiTPIC, eiSD1, eiVV, eiVVAK, eiNR$/;"	e	enum:__anon112
eiSD2	includeheaders/types/enums.h	/^  eiMD, eiSteep, eiCG, eiBD, eiSD2, eiNM, eiLBFGS, eiTPI, eiTPIC, eiSD1, eiVV, eiVVAK, eiNR$/;"	e	enum:__anon112
eiSteep	includeheaders/types/enums.h	/^  eiMD, eiSteep, eiCG, eiBD, eiSD2, eiNM, eiLBFGS, eiTPI, eiTPIC, eiSD1, eiVV, eiVVAK, eiNR$/;"	e	enum:__anon112
eiTPI	includeheaders/types/enums.h	/^  eiMD, eiSteep, eiCG, eiBD, eiSD2, eiNM, eiLBFGS, eiTPI, eiTPIC, eiSD1, eiVV, eiVVAK, eiNR$/;"	e	enum:__anon112
eiTPIC	includeheaders/types/enums.h	/^  eiMD, eiSteep, eiCG, eiBD, eiSD2, eiNM, eiLBFGS, eiTPI, eiTPIC, eiSD1, eiVV, eiVVAK, eiNR$/;"	e	enum:__anon112
eiVV	includeheaders/types/enums.h	/^  eiMD, eiSteep, eiCG, eiBD, eiSD2, eiNM, eiLBFGS, eiTPI, eiTPIC, eiSD1, eiVV, eiVVAK, eiNR$/;"	e	enum:__anon112
eiVVAK	includeheaders/types/enums.h	/^  eiMD, eiSteep, eiCG, eiBD, eiSD2, eiNM, eiLBFGS, eiTPI, eiTPIC, eiSD1, eiVV, eiVVAK, eiNR$/;"	e	enum:__anon112
eig	includeheaders/types/fcdata.h	/^  real   *eig;        \/* Eigenvalues\/vectors, for output only (nex x 12)    *\/$/;"	m	struct:__anon64
eig_diag	includeheaders/types/fcdata.h	/^  double *eig_diag;$/;"	m	struct:__anon64
eisGBSA	includeheaders/types/enums.h	/^	eisNO, eisGBSA, eisNR $/;"	e	enum:__anon126
eisNO	includeheaders/types/enums.h	/^	eisNO, eisGBSA, eisNR $/;"	e	enum:__anon126
eisNR	includeheaders/types/enums.h	/^	eisNO, eisGBSA, eisNR $/;"	e	enum:__anon126
ekin	includeheaders/types/group.h	/^  tensor       ekin;            \/* overall kinetic energy               *\/$/;"	m	struct:__anon170
ekin_n	includeheaders/types/state.h	/^  int      ekin_n;$/;"	m	struct:__anon55
ekin_total	includeheaders/types/state.h	/^  tensor   ekin_total;$/;"	m	struct:__anon55
ekinf	includeheaders/types/group.h	/^  tensor  ekinf; 	\/* Kinetic energy at full step     *\/$/;"	m	struct:__anon167
ekinf	includeheaders/types/state.h	/^  tensor  *ekinf;$/;"	m	struct:__anon55
ekinh	includeheaders/types/group.h	/^  tensor       ekinh;           \/* overall 1\/2 step kinetic energy      *\/$/;"	m	struct:__anon170
ekinh	includeheaders/types/group.h	/^  tensor  ekinh;	\/* Kinetic energy at half step     *\/$/;"	m	struct:__anon167
ekinh	includeheaders/types/state.h	/^  tensor  *ekinh;$/;"	m	struct:__anon55
ekinh_old	includeheaders/types/group.h	/^  tensor  ekinh_old;	\/* Kinetic energy at old half step *\/$/;"	m	struct:__anon167
ekinh_old	includeheaders/types/state.h	/^  tensor  *ekinh_old;$/;"	m	struct:__anon55
ekinscalef_nhc	includeheaders/types/group.h	/^  double  ekinscalef_nhc;\/* Scaling factor for NHC- full step *\/$/;"	m	struct:__anon167
ekinscalef_nhc	includeheaders/types/state.h	/^  double  *ekinscalef_nhc;$/;"	m	struct:__anon55
ekinscaleh_nhc	includeheaders/types/group.h	/^  double  ekinscaleh_nhc;\/* Scaling factor for NHC- half step *\/$/;"	m	struct:__anon167
ekinscaleh_nhc	includeheaders/types/state.h	/^  double  *ekinscaleh_nhc;$/;"	m	struct:__anon55
ekinstate	includeheaders/types/state.h	/^  ekinstate_t   ekinstate; \/* The state of the kinetic energy data      *\/$/;"	m	struct:__anon58
ekinstate_t	includeheaders/types/state.h	/^} ekinstate_t;$/;"	t	typeref:struct:__anon55
elem	includeheaders/types/atoms.h	/^  char          elem[4];        \/* Element name                         *\/$/;"	m	struct:__anon85
element	statistics/probability.h	/^    Element *element; \/* element array *\/$/;"	m	struct:__anon51
em_stepsize	includeheaders/types/inputrec.h	/^  real em_stepsize;	    \/* The stepsize for updating			*\/$/;"	m	struct:__anon164
em_tol	includeheaders/types/inputrec.h	/^  real em_tol;		    \/* The tolerance				*\/$/;"	m	struct:__anon164
encode_structure	g_sa_encode.c	/^void encode_structure(FragmentSet *fragment_set, Str *fragment_str,$/;"	f
encodedString	sequence/encode.h	/^    char *encodedString;$/;"	m	struct:__anon1
end	includeheaders/types/graph.h	/^  int      end;		\/* The last atom in this graph			*\/$/;"	m	struct:__anon62
ener	includeheaders/types/forcerec.h	/^  real *ener[egNR];  \/* Energy terms for each pair of groups *\/$/;"	m	struct:__anon154
ener_ave	includeheaders/types/state.h	/^  double *   ener_ave;     \/* Energy term history sum to get fluctuations   *\/$/;"	m	struct:__anon57
ener_sum	includeheaders/types/state.h	/^  double *   ener_sum;     \/* Energy term history sum to get fluctuations   *\/$/;"	m	struct:__anon57
ener_sum_sim	includeheaders/types/state.h	/^  double *   ener_sum_sim; \/* Energy term history sum of the whole sim      *\/$/;"	m	struct:__anon57
enerdiffsix	includeheaders/types/forcerec.h	/^  real enerdiffsix;$/;"	m	struct:__anon157
enerdifftwelve	includeheaders/types/forcerec.h	/^  real enerdifftwelve;$/;"	m	struct:__anon157
energy	includeheaders/molfile_plugin.h	/^  double energy;            \/**< energy of the electronic state.$/;"	m	struct:__anon79
energyhistory_t	includeheaders/types/state.h	/^energyhistory_t;$/;"	t	typeref:struct:__anon57
enerhist	includeheaders/types/state.h	/^  energyhistory_t  enerhist; \/* Energy history for statistics           *\/$/;"	m	struct:__anon58
enerpart_lambda	includeheaders/types/forcerec.h	/^  double *enerpart_lambda; \/* Partial energy for lambda and flambda[] *\/$/;"	m	struct:__anon155
enershiftsix	includeheaders/types/forcerec.h	/^  real enershiftsix;$/;"	m	struct:__anon157
enershifttwelve	includeheaders/types/forcerec.h	/^  real enershifttwelve;$/;"	m	struct:__anon157
enlist	includeheaders/types/nblist.h	/^  int             enlist;      \/* The type of nblist, enum, see above    *\/$/;"	m	struct:__anon96
enlistATOM_ATOM	includeheaders/types/nblist.h	/^  enlistATOM_ATOM,$/;"	e	enum:__anon95
enlistCG_CG	includeheaders/types/nblist.h	/^  enlistCG_CG,$/;"	e	enum:__anon95
enlistNR	includeheaders/types/nblist.h	/^  enlistNR$/;"	e	enum:__anon95
enlistSPC_ATOM	includeheaders/types/nblist.h	/^  enlistSPC_ATOM,   enlistSPC_SPC,$/;"	e	enum:__anon95
enlistSPC_SPC	includeheaders/types/nblist.h	/^  enlistSPC_ATOM,   enlistSPC_SPC,$/;"	e	enum:__anon95
enlistTIP4P_ATOM	includeheaders/types/nblist.h	/^  enlistTIP4P_ATOM, enlistTIP4P_TIP4P,$/;"	e	enum:__anon95
enlistTIP4P_TIP4P	includeheaders/types/nblist.h	/^  enlistTIP4P_ATOM, enlistTIP4P_TIP4P,$/;"	e	enum:__anon95
ensGRID	includeheaders/types/enums.h	/^  ensGRID, ensSIMPLE, ensNR$/;"	e	enum:__anon111
ensNR	includeheaders/types/enums.h	/^  ensGRID, ensSIMPLE, ensNR$/;"	e	enum:__anon111
ensSIMPLE	includeheaders/types/enums.h	/^  ensGRID, ensSIMPLE, ensNR$/;"	e	enum:__anon111
entropy_per_position	g_sa_analyze.c	/^void entropy_per_position(const char *outFilename, int sequenceLength, SeqSet *fastaSequenceSet, const output_env_t oenv) {$/;"	f
entropy_per_position	g_sa_encode.c	/^void entropy_per_position(const char *outFilename, int sequenceLength, SeqSet *fastaSequenceSet, const output_env_t oenv){$/;"	f
epbcNONE	includeheaders/types/enums.h	/^  epbcXYZ, epbcNONE, epbcXY, epbcSCREW, epbcNR$/;"	e	enum:__anon101
epbcNR	includeheaders/types/enums.h	/^  epbcXYZ, epbcNONE, epbcXY, epbcSCREW, epbcNR$/;"	e	enum:__anon101
epbcSCREW	includeheaders/types/enums.h	/^  epbcXYZ, epbcNONE, epbcXY, epbcSCREW, epbcNR$/;"	e	enum:__anon101
epbcXY	includeheaders/types/enums.h	/^  epbcXYZ, epbcNONE, epbcXY, epbcSCREW, epbcNR$/;"	e	enum:__anon101
epbcXYZ	includeheaders/types/enums.h	/^  epbcXYZ, epbcNONE, epbcXY, epbcSCREW, epbcNR$/;"	e	enum:__anon101
epc	includeheaders/types/inputrec.h	/^  int  epc;		\/* pressure coupling                            *\/$/;"	m	struct:__anon164
epcBERENDSEN	includeheaders/types/enums.h	/^  epcNO, epcBERENDSEN, epcPARRINELLORAHMAN, epcISOTROPIC, epcMTTK, epcNR$/;"	e	enum:__anon103
epcISOTROPIC	includeheaders/types/enums.h	/^  epcNO, epcBERENDSEN, epcPARRINELLORAHMAN, epcISOTROPIC, epcMTTK, epcNR$/;"	e	enum:__anon103
epcMTTK	includeheaders/types/enums.h	/^  epcNO, epcBERENDSEN, epcPARRINELLORAHMAN, epcISOTROPIC, epcMTTK, epcNR$/;"	e	enum:__anon103
epcNO	includeheaders/types/enums.h	/^  epcNO, epcBERENDSEN, epcPARRINELLORAHMAN, epcISOTROPIC, epcMTTK, epcNR$/;"	e	enum:__anon103
epcNR	includeheaders/types/enums.h	/^  epcNO, epcBERENDSEN, epcPARRINELLORAHMAN, epcISOTROPIC, epcMTTK, epcNR$/;"	e	enum:__anon103
epcPARRINELLORAHMAN	includeheaders/types/enums.h	/^  epcNO, epcBERENDSEN, epcPARRINELLORAHMAN, epcISOTROPIC, epcMTTK, epcNR$/;"	e	enum:__anon103
epct	includeheaders/types/inputrec.h	/^  int  epct;		\/* pressure coupling type			*\/$/;"	m	struct:__anon164
epctANISOTROPIC	includeheaders/types/enums.h	/^  epctISOTROPIC, epctSEMIISOTROPIC, epctANISOTROPIC,$/;"	e	enum:__anon106
epctISOTROPIC	includeheaders/types/enums.h	/^  epctISOTROPIC, epctSEMIISOTROPIC, epctANISOTROPIC,$/;"	e	enum:__anon106
epctNR	includeheaders/types/enums.h	/^  epctSURFACETENSION, epctNR$/;"	e	enum:__anon106
epctSEMIISOTROPIC	includeheaders/types/enums.h	/^  epctISOTROPIC, epctSEMIISOTROPIC, epctANISOTROPIC,$/;"	e	enum:__anon106
epctSURFACETENSION	includeheaders/types/enums.h	/^  epctSURFACETENSION, epctNR$/;"	e	enum:__anon106
epgrppbc	includeheaders/types/inputrec.h	/^  int        epgrppbc; \/* The type of pbc for this pull group, see enum above *\/$/;"	m	struct:__anon162
epgrppbcCOS	includeheaders/types/inputrec.h	/^enum { epgrppbcNONE, epgrppbcREFAT, epgrppbcCOS };$/;"	e	enum:__anon161
epgrppbcNONE	includeheaders/types/inputrec.h	/^enum { epgrppbcNONE, epgrppbcREFAT, epgrppbcCOS };$/;"	e	enum:__anon161
epgrppbcREFAT	includeheaders/types/inputrec.h	/^enum { epgrppbcNONE, epgrppbcREFAT, epgrppbcCOS };$/;"	e	enum:__anon161
epsfac	includeheaders/types/forcerec.h	/^  real epsilon_r,epsilon_rf,epsfac;  $/;"	m	struct:__anon157
epsilon_r	includeheaders/types/forcerec.h	/^  real epsilon_r,epsilon_rf,epsfac;  $/;"	m	struct:__anon157
epsilon_r	includeheaders/types/inputrec.h	/^  real epsilon_r;       \/* relative dielectric constant                 *\/ $/;"	m	struct:__anon164
epsilon_rf	includeheaders/types/forcerec.h	/^  real epsilon_r,epsilon_rf,epsfac;  $/;"	m	struct:__anon157
epsilon_rf	includeheaders/types/inputrec.h	/^  real epsilon_rf;      \/* relative dielectric constant of the RF       *\/ $/;"	m	struct:__anon164
epsilon_surface	includeheaders/types/inputrec.h	/^  real epsilon_surface; \/* Epsilon for PME dipole correction            *\/$/;"	m	struct:__anon164
eptAtom	includeheaders/types/atoms.h	/^  eptAtom, eptNucleus, eptShell, eptBond, eptVSite, eptNR$/;"	e	enum:__anon84
eptBond	includeheaders/types/atoms.h	/^  eptAtom, eptNucleus, eptShell, eptBond, eptVSite, eptNR$/;"	e	enum:__anon84
eptNR	includeheaders/types/atoms.h	/^  eptAtom, eptNucleus, eptShell, eptBond, eptVSite, eptNR$/;"	e	enum:__anon84
eptNucleus	includeheaders/types/atoms.h	/^  eptAtom, eptNucleus, eptShell, eptBond, eptVSite, eptNR$/;"	e	enum:__anon84
eptShell	includeheaders/types/atoms.h	/^  eptAtom, eptNucleus, eptShell, eptBond, eptVSite, eptNR$/;"	e	enum:__anon84
eptVSite	includeheaders/types/atoms.h	/^  eptAtom, eptNucleus, eptShell, eptBond, eptVSite, eptNR$/;"	e	enum:__anon84
epullCONSTRAINT	includeheaders/types/enums.h	/^  epullNO, epullUMBRELLA, epullCONSTRAINT, epullCONST_F, epullNR$/;"	e	enum:__anon130
epullCONST_F	includeheaders/types/enums.h	/^  epullNO, epullUMBRELLA, epullCONSTRAINT, epullCONST_F, epullNR$/;"	e	enum:__anon130
epullNO	includeheaders/types/enums.h	/^  epullNO, epullUMBRELLA, epullCONSTRAINT, epullCONST_F, epullNR$/;"	e	enum:__anon130
epullNR	includeheaders/types/enums.h	/^  epullNO, epullUMBRELLA, epullCONSTRAINT, epullCONST_F, epullNR$/;"	e	enum:__anon130
epullUMBRELLA	includeheaders/types/enums.h	/^  epullNO, epullUMBRELLA, epullCONSTRAINT, epullCONST_F, epullNR$/;"	e	enum:__anon130
epullgCYL	includeheaders/types/enums.h	/^  epullgDIST, epullgDIR, epullgCYL, epullgPOS, epullgDIRPBC, epullgNR$/;"	e	enum:__anon131
epullgDIR	includeheaders/types/enums.h	/^  epullgDIST, epullgDIR, epullgCYL, epullgPOS, epullgDIRPBC, epullgNR$/;"	e	enum:__anon131
epullgDIRPBC	includeheaders/types/enums.h	/^  epullgDIST, epullgDIR, epullgCYL, epullgPOS, epullgDIRPBC, epullgNR$/;"	e	enum:__anon131
epullgDIST	includeheaders/types/enums.h	/^  epullgDIST, epullgDIR, epullgCYL, epullgPOS, epullgDIRPBC, epullgNR$/;"	e	enum:__anon131
epullgNR	includeheaders/types/enums.h	/^  epullgDIST, epullgDIR, epullgCYL, epullgPOS, epullgDIRPBC, epullgNR$/;"	e	enum:__anon131
epullgPOS	includeheaders/types/enums.h	/^  epullgDIST, epullgDIR, epullgCYL, epullgPOS, epullgDIRPBC, epullgNR$/;"	e	enum:__anon131
erscALL	includeheaders/types/enums.h	/^  erscNO, erscALL, erscCOM, erscNR$/;"	e	enum:__anon107
erscCOM	includeheaders/types/enums.h	/^  erscNO, erscALL, erscCOM, erscNR$/;"	e	enum:__anon107
erscNO	includeheaders/types/enums.h	/^  erscNO, erscALL, erscCOM, erscNR$/;"	e	enum:__anon107
erscNR	includeheaders/types/enums.h	/^  erscNO, erscALL, erscCOM, erscNR$/;"	e	enum:__anon107
esaAPPROX	includeheaders/types/enums.h	/^  esaAPPROX, esaNO, esaSTILL, esaNR$/;"	e	enum:__anon128
esaNO	includeheaders/types/enums.h	/^  esaAPPROX, esaNO, esaSTILL, esaNR$/;"	e	enum:__anon128
esaNR	includeheaders/types/enums.h	/^  esaAPPROX, esaNO, esaSTILL, esaNR$/;"	e	enum:__anon128
esaSTILL	includeheaders/types/enums.h	/^  esaAPPROX, esaNO, esaSTILL, esaNR$/;"	e	enum:__anon128
eshellBASH	includeheaders/types/enums.h	/^  eshellCSH, eshellBASH, eshellZSH, eshellNR$/;"	e	enum:__anon123
eshellCSH	includeheaders/types/enums.h	/^  eshellCSH, eshellBASH, eshellZSH, eshellNR$/;"	e	enum:__anon123
eshellNR	includeheaders/types/enums.h	/^  eshellCSH, eshellBASH, eshellZSH, eshellNR$/;"	e	enum:__anon123
eshellZSH	includeheaders/types/enums.h	/^  eshellCSH, eshellBASH, eshellZSH, eshellNR$/;"	e	enum:__anon123
esolNO	includeheaders/types/enums.h	/^  esolNO, esolSPC, esolTIP4P, esolNR$/;"	e	enum:__anon121
esolNR	includeheaders/types/enums.h	/^  esolNO, esolSPC, esolTIP4P, esolNR$/;"	e	enum:__anon121
esolSPC	includeheaders/types/enums.h	/^  esolNO, esolSPC, esolTIP4P, esolNR$/;"	e	enum:__anon121
esolTIP4P	includeheaders/types/enums.h	/^  esolNO, esolSPC, esolTIP4P, esolNR$/;"	e	enum:__anon121
estBOX	includeheaders/types/state.h	/^       estBOX, estBOX_REL, estBOXV, estPRES_PREV, estNH_XI,  estTC_INT,$/;"	e	enum:__anon53
estBOXV	includeheaders/types/state.h	/^       estBOX, estBOX_REL, estBOXV, estPRES_PREV, estNH_XI,  estTC_INT,$/;"	e	enum:__anon53
estBOX_REL	includeheaders/types/state.h	/^       estBOX, estBOX_REL, estBOXV, estPRES_PREV, estNH_XI,  estTC_INT,$/;"	e	enum:__anon53
estCGP	includeheaders/types/state.h	/^       estX,   estV,       estSDX,  estCGP,       estLD_RNG, estLD_RNGI,$/;"	e	enum:__anon53
estDISRE_INITF	includeheaders/types/state.h	/^       estDISRE_INITF, estDISRE_RM3TAV,$/;"	e	enum:__anon53
estDISRE_RM3TAV	includeheaders/types/state.h	/^       estDISRE_INITF, estDISRE_RM3TAV,$/;"	e	enum:__anon53
estFVIR_PREV	includeheaders/types/state.h	/^       estSVIR_PREV, estNH_VXI, estVETA, estVOL0, estNHPRES_XI, estNHPRES_VXI,estFVIR_PREV,$/;"	e	enum:__anon53
estLAMBDA	includeheaders/types/state.h	/^enum { estLAMBDA,$/;"	e	enum:__anon53
estLD_RNG	includeheaders/types/state.h	/^       estX,   estV,       estSDX,  estCGP,       estLD_RNG, estLD_RNGI,$/;"	e	enum:__anon53
estLD_RNGI	includeheaders/types/state.h	/^       estX,   estV,       estSDX,  estCGP,       estLD_RNG, estLD_RNGI,$/;"	e	enum:__anon53
estNHPRES_VXI	includeheaders/types/state.h	/^       estSVIR_PREV, estNH_VXI, estVETA, estVOL0, estNHPRES_XI, estNHPRES_VXI,estFVIR_PREV,$/;"	e	enum:__anon53
estNHPRES_XI	includeheaders/types/state.h	/^       estSVIR_PREV, estNH_VXI, estVETA, estVOL0, estNHPRES_XI, estNHPRES_VXI,estFVIR_PREV,$/;"	e	enum:__anon53
estNH_VXI	includeheaders/types/state.h	/^       estSVIR_PREV, estNH_VXI, estVETA, estVOL0, estNHPRES_XI, estNHPRES_VXI,estFVIR_PREV,$/;"	e	enum:__anon53
estNH_XI	includeheaders/types/state.h	/^       estBOX, estBOX_REL, estBOXV, estPRES_PREV, estNH_XI,  estTC_INT,$/;"	e	enum:__anon53
estNR	includeheaders/types/state.h	/^       estNR };$/;"	e	enum:__anon53
estORIRE_DTAV	includeheaders/types/state.h	/^       estORIRE_INITF, estORIRE_DTAV,$/;"	e	enum:__anon53
estORIRE_INITF	includeheaders/types/state.h	/^       estORIRE_INITF, estORIRE_DTAV,$/;"	e	enum:__anon53
estPRES_PREV	includeheaders/types/state.h	/^       estBOX, estBOX_REL, estBOXV, estPRES_PREV, estNH_XI,  estTC_INT,$/;"	e	enum:__anon53
estSDX	includeheaders/types/state.h	/^       estX,   estV,       estSDX,  estCGP,       estLD_RNG, estLD_RNGI,$/;"	e	enum:__anon53
estSVIR_PREV	includeheaders/types/state.h	/^       estSVIR_PREV, estNH_VXI, estVETA, estVOL0, estNHPRES_XI, estNHPRES_VXI,estFVIR_PREV,$/;"	e	enum:__anon53
estTC_INT	includeheaders/types/state.h	/^       estBOX, estBOX_REL, estBOXV, estPRES_PREV, estNH_XI,  estTC_INT,$/;"	e	enum:__anon53
estV	includeheaders/types/state.h	/^       estX,   estV,       estSDX,  estCGP,       estLD_RNG, estLD_RNGI,$/;"	e	enum:__anon53
estVETA	includeheaders/types/state.h	/^       estSVIR_PREV, estNH_VXI, estVETA, estVOL0, estNHPRES_XI, estNHPRES_VXI,estFVIR_PREV,$/;"	e	enum:__anon53
estVOL0	includeheaders/types/state.h	/^       estSVIR_PREV, estNH_VXI, estVETA, estVOL0, estNHPRES_XI, estNHPRES_VXI,estFVIR_PREV,$/;"	e	enum:__anon53
estX	includeheaders/types/state.h	/^       estX,   estV,       estSDX,  estCGP,       estLD_RNG, estLD_RNGI,$/;"	e	enum:__anon53
estimate_MI_error	g_sa_analyze.c	/^float estimate_MI_error(ProbMatrix *probMat, Set *codeSet, Set *altCodeSet, int nObs) {$/;"	f
esum	includeheaders/types/energy.h	/^  double esum;	\/* The sum of energies until now.			*\/$/;"	m	struct:__anon147
et	includeheaders/types/inputrec.h	/^  t_cosines et[DIM];	\/* Electric field stuff	(time part)		*\/$/;"	m	struct:__anon164
etc	includeheaders/types/inputrec.h	/^  int  etc;		\/* temperature coupling         		*\/$/;"	m	struct:__anon164
etcANDERSEN	includeheaders/types/enums.h	/^  etcNO, etcBERENDSEN, etcNOSEHOOVER, etcYES, etcANDERSEN, etcANDERSENINTERVAL, etcVRESCALE, etcNR$/;"	e	enum:__anon102
etcANDERSENINTERVAL	includeheaders/types/enums.h	/^  etcNO, etcBERENDSEN, etcNOSEHOOVER, etcYES, etcANDERSEN, etcANDERSENINTERVAL, etcVRESCALE, etcNR$/;"	e	enum:__anon102
etcBERENDSEN	includeheaders/types/enums.h	/^  etcNO, etcBERENDSEN, etcNOSEHOOVER, etcYES, etcANDERSEN, etcANDERSENINTERVAL, etcVRESCALE, etcNR$/;"	e	enum:__anon102
etcNO	includeheaders/types/enums.h	/^  etcNO, etcBERENDSEN, etcNOSEHOOVER, etcYES, etcANDERSEN, etcANDERSENINTERVAL, etcVRESCALE, etcNR$/;"	e	enum:__anon102
etcNOSEHOOVER	includeheaders/types/enums.h	/^  etcNO, etcBERENDSEN, etcNOSEHOOVER, etcYES, etcANDERSEN, etcANDERSENINTERVAL, etcVRESCALE, etcNR$/;"	e	enum:__anon102
etcNR	includeheaders/types/enums.h	/^  etcNO, etcBERENDSEN, etcNOSEHOOVER, etcYES, etcANDERSEN, etcANDERSENINTERVAL, etcVRESCALE, etcNR$/;"	e	enum:__anon102
etcVRESCALE	includeheaders/types/enums.h	/^  etcNO, etcBERENDSEN, etcNOSEHOOVER, etcYES, etcANDERSEN, etcANDERSENINTERVAL, etcVRESCALE, etcNR$/;"	e	enum:__anon102
etcYES	includeheaders/types/enums.h	/^  etcNO, etcBERENDSEN, etcNOSEHOOVER, etcYES, etcANDERSEN, etcANDERSENINTERVAL, etcVRESCALE, etcNR$/;"	e	enum:__anon102
etrtBARONHC	includeheaders/types/enums.h	/^  etrtNONE, etrtNHC, etrtBAROV, etrtBARONHC, etrtNHC2, etrtBAROV2, etrtBARONHC2, $/;"	e	enum:__anon104
etrtBARONHC2	includeheaders/types/enums.h	/^  etrtNONE, etrtNHC, etrtBAROV, etrtBARONHC, etrtNHC2, etrtBAROV2, etrtBARONHC2, $/;"	e	enum:__anon104
etrtBAROV	includeheaders/types/enums.h	/^  etrtNONE, etrtNHC, etrtBAROV, etrtBARONHC, etrtNHC2, etrtBAROV2, etrtBARONHC2, $/;"	e	enum:__anon104
etrtBAROV2	includeheaders/types/enums.h	/^  etrtNONE, etrtNHC, etrtBAROV, etrtBARONHC, etrtNHC2, etrtBAROV2, etrtBARONHC2, $/;"	e	enum:__anon104
etrtNHC	includeheaders/types/enums.h	/^  etrtNONE, etrtNHC, etrtBAROV, etrtBARONHC, etrtNHC2, etrtBAROV2, etrtBARONHC2, $/;"	e	enum:__anon104
etrtNHC2	includeheaders/types/enums.h	/^  etrtNONE, etrtNHC, etrtBAROV, etrtBARONHC, etrtNHC2, etrtBAROV2, etrtBARONHC2, $/;"	e	enum:__anon104
etrtNONE	includeheaders/types/enums.h	/^  etrtNONE, etrtNHC, etrtBAROV, etrtBARONHC, etrtNHC2, etrtBAROV2, etrtBARONHC2, $/;"	e	enum:__anon104
etrtNR	includeheaders/types/enums.h	/^  etrtVELOCITY1, etrtVELOCITY2, etrtPOSITION, etrtSKIPALL, etrtNR$/;"	e	enum:__anon104
etrtPOSITION	includeheaders/types/enums.h	/^  etrtVELOCITY1, etrtVELOCITY2, etrtPOSITION, etrtSKIPALL, etrtNR$/;"	e	enum:__anon104
etrtSKIPALL	includeheaders/types/enums.h	/^  etrtVELOCITY1, etrtVELOCITY2, etrtPOSITION, etrtSKIPALL, etrtNR$/;"	e	enum:__anon104
etrtVELOCITY1	includeheaders/types/enums.h	/^  etrtVELOCITY1, etrtVELOCITY2, etrtPOSITION, etrtSKIPALL, etrtNR$/;"	e	enum:__anon104
etrtVELOCITY2	includeheaders/types/enums.h	/^  etrtVELOCITY1, etrtVELOCITY2, etrtPOSITION, etrtSKIPALL, etrtNR$/;"	e	enum:__anon104
ettTSEQ0	includeheaders/types/enums.h	/^  ettTSEQ0,  ettTSEQ1,  ettTSEQ2,  ettTSEQ3,  ettTSEQ4, ettTSEQMAX$/;"	e	enum:__anon105
ettTSEQ1	includeheaders/types/enums.h	/^  ettTSEQ0,  ettTSEQ1,  ettTSEQ2,  ettTSEQ3,  ettTSEQ4, ettTSEQMAX$/;"	e	enum:__anon105
ettTSEQ2	includeheaders/types/enums.h	/^  ettTSEQ0,  ettTSEQ1,  ettTSEQ2,  ettTSEQ3,  ettTSEQ4, ettTSEQMAX$/;"	e	enum:__anon105
ettTSEQ3	includeheaders/types/enums.h	/^  ettTSEQ0,  ettTSEQ1,  ettTSEQ2,  ettTSEQ3,  ettTSEQ4, ettTSEQMAX$/;"	e	enum:__anon105
ettTSEQ4	includeheaders/types/enums.h	/^  ettTSEQ0,  ettTSEQ1,  ettTSEQ2,  ettTSEQ3,  ettTSEQ4, ettTSEQMAX$/;"	e	enum:__anon105
ettTSEQMAX	includeheaders/types/enums.h	/^  ettTSEQ0,  ettTSEQ1,  ettTSEQ2,  ettTSEQ3,  ettTSEQ4, ettTSEQMAX$/;"	e	enum:__anon105
ev_alltoall_finish	includeheaders/mpelogging.h	/^     int ev_alltoall_start,          ev_alltoall_finish;$/;"	v
ev_alltoall_start	includeheaders/mpelogging.h	/^     int ev_alltoall_start,          ev_alltoall_finish;$/;"	v
ev_calc_bonds_finish	includeheaders/mpelogging.h	/^     int ev_calc_bonds_start,        ev_calc_bonds_finish;$/;"	v
ev_calc_bonds_start	includeheaders/mpelogging.h	/^     int ev_calc_bonds_start,        ev_calc_bonds_finish;$/;"	v
ev_clear_rvecs_finish	includeheaders/mpelogging.h	/^     int ev_clear_rvecs_start,       ev_clear_rvecs_finish;$/;"	v
ev_clear_rvecs_start	includeheaders/mpelogging.h	/^     int ev_clear_rvecs_start,       ev_clear_rvecs_finish;$/;"	v
ev_do_fnbf_finish	includeheaders/mpelogging.h	/^     int ev_do_fnbf_start,           ev_do_fnbf_finish;$/;"	v
ev_do_fnbf_start	includeheaders/mpelogging.h	/^     int ev_do_fnbf_start,           ev_do_fnbf_finish;$/;"	v
ev_ed_apply_cons_finish	includeheaders/mpelogging.h	/^     int ev_ed_apply_cons_start,     ev_ed_apply_cons_finish;$/;"	v
ev_ed_apply_cons_start	includeheaders/mpelogging.h	/^     int ev_ed_apply_cons_start,     ev_ed_apply_cons_finish;$/;"	v
ev_edsam_finish	includeheaders/mpelogging.h	/^     int ev_edsam_start,             ev_edsam_finish;$/;"	v
ev_edsam_start	includeheaders/mpelogging.h	/^     int ev_edsam_start,             ev_edsam_finish;$/;"	v
ev_fit_to_reference_finish	includeheaders/mpelogging.h	/^     int ev_fit_to_reference_start,  ev_fit_to_reference_finish;$/;"	v
ev_fit_to_reference_start	includeheaders/mpelogging.h	/^     int ev_fit_to_reference_start,  ev_fit_to_reference_finish;$/;"	v
ev_force_finish	includeheaders/mpelogging.h	/^     int ev_force_start,             ev_force_finish;$/;"	v
ev_force_start	includeheaders/mpelogging.h	/^     int ev_force_start,             ev_force_finish;$/;"	v
ev_gather_f_bsplines_finish	includeheaders/mpelogging.h	/^     int ev_gather_f_bsplines_start, ev_gather_f_bsplines_finish;$/;"	v
ev_gather_f_bsplines_start	includeheaders/mpelogging.h	/^     int ev_gather_f_bsplines_start, ev_gather_f_bsplines_finish;$/;"	v
ev_get_group_x_finish	includeheaders/mpelogging.h	/^     int ev_get_group_x_start,       ev_get_group_x_finish;$/;"	v
ev_get_group_x_start	includeheaders/mpelogging.h	/^     int ev_get_group_x_start,       ev_get_group_x_finish;$/;"	v
ev_global_stat_finish	includeheaders/mpelogging.h	/^     int ev_global_stat_start,       ev_global_stat_finish;$/;"	v
ev_global_stat_start	includeheaders/mpelogging.h	/^     int ev_global_stat_start,       ev_global_stat_finish;$/;"	v
ev_gmxfft3d_finish	includeheaders/mpelogging.h	/^     int ev_gmxfft3d_start,          ev_gmxfft3d_finish;$/;"	v
ev_gmxfft3d_start	includeheaders/mpelogging.h	/^     int ev_gmxfft3d_start,          ev_gmxfft3d_finish;$/;"	v
ev_init_pme_finish	includeheaders/mpelogging.h	/^     int ev_init_pme_start,          ev_init_pme_finish;$/;"	v
ev_init_pme_start	includeheaders/mpelogging.h	/^     int ev_init_pme_start,          ev_init_pme_finish;$/;"	v
ev_mk_mshift_finish	includeheaders/mpelogging.h	/^     int ev_mk_mshift_start,         ev_mk_mshift_finish;$/;"	v
ev_mk_mshift_start	includeheaders/mpelogging.h	/^     int ev_mk_mshift_start,         ev_mk_mshift_finish;$/;"	v
ev_ns_finish	includeheaders/mpelogging.h	/^     int ev_ns_start,                ev_ns_finish;$/;"	v
ev_ns_start	includeheaders/mpelogging.h	/^     int ev_ns_start,                ev_ns_finish;$/;"	v
ev_output_finish	includeheaders/mpelogging.h	/^     int ev_output_start,            ev_output_finish;$/;"	v
ev_output_start	includeheaders/mpelogging.h	/^     int ev_output_start,            ev_output_finish;$/;"	v
ev_pme_finish	includeheaders/mpelogging.h	/^     int ev_pme_start,               ev_pme_finish;$/;"	v
ev_pme_start	includeheaders/mpelogging.h	/^     int ev_pme_start,               ev_pme_finish;$/;"	v
ev_pmeredist_finish	includeheaders/mpelogging.h	/^     int ev_pmeredist_start,         ev_pmeredist_finish;$/;"	v
ev_pmeredist_start	includeheaders/mpelogging.h	/^     int ev_pmeredist_start,         ev_pmeredist_finish;$/;"	v
ev_reduce_finish	includeheaders/mpelogging.h	/^     int ev_reduce_start,            ev_reduce_finish;$/;"	v
ev_reduce_start	includeheaders/mpelogging.h	/^     int ev_reduce_start,            ev_reduce_finish;$/;"	v
ev_rscatter_finish	includeheaders/mpelogging.h	/^     int ev_rscatter_start,          ev_rscatter_finish;$/;"	v
ev_rscatter_start	includeheaders/mpelogging.h	/^     int ev_rscatter_start,          ev_rscatter_finish;$/;"	v
ev_send_coordinates_finish	includeheaders/mpelogging.h	/^     int ev_send_coordinates_start,  ev_send_coordinates_finish;$/;"	v
ev_send_coordinates_start	includeheaders/mpelogging.h	/^     int ev_send_coordinates_start,  ev_send_coordinates_finish;$/;"	v
ev_shift_finish	includeheaders/mpelogging.h	/^     int ev_shift_start,             ev_shift_finish;     $/;"	v
ev_shift_start	includeheaders/mpelogging.h	/^     int ev_shift_start,             ev_shift_finish;     $/;"	v
ev_solve_pme_finish	includeheaders/mpelogging.h	/^     int ev_solve_pme_start,         ev_solve_pme_finish;$/;"	v
ev_solve_pme_start	includeheaders/mpelogging.h	/^     int ev_solve_pme_start,         ev_solve_pme_finish;$/;"	v
ev_sort_finish	includeheaders/mpelogging.h	/^     int ev_sort_start,              ev_sort_finish;$/;"	v
ev_sort_start	includeheaders/mpelogging.h	/^     int ev_sort_start,              ev_sort_finish;$/;"	v
ev_spread_on_grid_finish	includeheaders/mpelogging.h	/^     int ev_spread_on_grid_start,    ev_spread_on_grid_finish;$/;"	v
ev_spread_on_grid_start	includeheaders/mpelogging.h	/^     int ev_spread_on_grid_start,    ev_spread_on_grid_finish;$/;"	v
ev_sum_lrforces_finish	includeheaders/mpelogging.h	/^     int ev_sum_lrforces_start,      ev_sum_lrforces_finish;$/;"	v
ev_sum_lrforces_start	includeheaders/mpelogging.h	/^     int ev_sum_lrforces_start,      ev_sum_lrforces_finish;$/;"	v
ev_sum_qgrid_finish	includeheaders/mpelogging.h	/^     int ev_sum_qgrid_start,         ev_sum_qgrid_finish;$/;"	v
ev_sum_qgrid_start	includeheaders/mpelogging.h	/^     int ev_sum_qgrid_start,         ev_sum_qgrid_finish;$/;"	v
ev_timestep1	includeheaders/mpelogging.h	/^     int ev_timestep1,               ev_timestep2;$/;"	v
ev_timestep2	includeheaders/mpelogging.h	/^     int ev_timestep1,               ev_timestep2;$/;"	v
ev_unshift_finish	includeheaders/mpelogging.h	/^     int ev_unshift_start,           ev_unshift_finish;     $/;"	v
ev_unshift_start	includeheaders/mpelogging.h	/^     int ev_unshift_start,           ev_unshift_finish;     $/;"	v
ev_update_finish	includeheaders/mpelogging.h	/^     int ev_update_start,            ev_update_finish;     $/;"	v
ev_update_fr_finish	includeheaders/mpelogging.h	/^     int ev_update_fr_start,         ev_update_fr_finish;$/;"	v
ev_update_fr_start	includeheaders/mpelogging.h	/^     int ev_update_fr_start,         ev_update_fr_finish;$/;"	v
ev_update_start	includeheaders/mpelogging.h	/^     int ev_update_start,            ev_update_finish;     $/;"	v
ev_virial_finish	includeheaders/mpelogging.h	/^     int ev_virial_start,            ev_virial_finish;$/;"	v
ev_virial_start	includeheaders/mpelogging.h	/^     int ev_virial_start,            ev_virial_finish;$/;"	v
eval_horn_NR_corrxn	structure/quatRMSD.c	/^eval_horn_NR_corrxn(const double *c, const double x)$/;"	f	file:
eval_horn_quart	structure/quatRMSD.c	/^eval_horn_quart(const double *c, const double x)$/;"	f
eval_horn_quart_deriv	structure/quatRMSD.c	/^eval_horn_quart_deriv(const double *c, const double x)$/;"	f
evdwCUT	includeheaders/types/enums.h	/^  evdwCUT, evdwSWITCH, evdwSHIFT, evdwUSER, evdwENCADSHIFT, evdwNR$/;"	e	enum:__anon110
evdwENCADSHIFT	includeheaders/types/enums.h	/^  evdwCUT, evdwSWITCH, evdwSHIFT, evdwUSER, evdwENCADSHIFT, evdwNR$/;"	e	enum:__anon110
evdwNR	includeheaders/types/enums.h	/^  evdwCUT, evdwSWITCH, evdwSHIFT, evdwUSER, evdwENCADSHIFT, evdwNR$/;"	e	enum:__anon110
evdwSHIFT	includeheaders/types/enums.h	/^  evdwCUT, evdwSWITCH, evdwSHIFT, evdwUSER, evdwENCADSHIFT, evdwNR$/;"	e	enum:__anon110
evdwSWITCH	includeheaders/types/enums.h	/^  evdwCUT, evdwSWITCH, evdwSHIFT, evdwUSER, evdwENCADSHIFT, evdwNR$/;"	e	enum:__anon110
evdwUSER	includeheaders/types/enums.h	/^  evdwCUT, evdwSWITCH, evdwSHIFT, evdwUSER, evdwENCADSHIFT, evdwNR$/;"	e	enum:__anon110
even	legacyheaders/macros.h	71;"	d
ewald_geometry	includeheaders/types/inputrec.h	/^  int  ewald_geometry;  \/* normal\/3d ewald, or pseudo-2d LR corrections *\/$/;"	m	struct:__anon164
ewald_rtol	includeheaders/types/inputrec.h	/^  real ewald_rtol;      \/* Real space tolerance for Ewald, determines   *\/$/;"	m	struct:__anon164
ewald_tab_t	includeheaders/types/forcerec.h	/^typedef struct ewald_tab *ewald_tab_t; $/;"	t	typeref:struct:ewald_tab
ewald_table	includeheaders/types/forcerec.h	/^  ewald_tab_t ewald_table;$/;"	m	struct:__anon157
ewaldcoeff	includeheaders/types/forcerec.h	/^  real ewaldcoeff;$/;"	m	struct:__anon157
ewt104	includeheaders/types/enums.h	/^  ewt93, ewt104, ewtTABLE, ewt126, ewtNR$/;"	e	enum:__anon129
ewt126	includeheaders/types/enums.h	/^  ewt93, ewt104, ewtTABLE, ewt126, ewtNR$/;"	e	enum:__anon129
ewt93	includeheaders/types/enums.h	/^  ewt93, ewt104, ewtTABLE, ewt126, ewtNR$/;"	e	enum:__anon129
ewtNR	includeheaders/types/enums.h	/^  ewt93, ewt104, ewtTABLE, ewt126, ewtNR$/;"	e	enum:__anon129
ewtTABLE	includeheaders/types/enums.h	/^  ewt93, ewt104, ewtTABLE, ewt126, ewtNR$/;"	e	enum:__anon129
ex	includeheaders/types/idef.h	/^  struct {int  ex,power,label; real c,obs,kfac;           } orires;$/;"	m	struct:__anon7::__anon34
ex	includeheaders/types/inputrec.h	/^  t_cosines ex[DIM];	\/* Electric field stuff	(spatial part)		*\/$/;"	m	struct:__anon164
excitation	includeheaders/molfile_plugin.h	/^  int   excitation;         \/**< 0 for ground state, 1,2,3,... for excited states *\/$/;"	m	struct:__anon79
excl	includeheaders/types/nblist.h	/^  t_excl *        excl;         \/* Exclusions, only with enltypeCG       *\/$/;"	m	struct:__anon96
excls	includeheaders/types/topology.h	/^  t_blocka      excls;          \/* The exclusions                       *\/$/;"	m	struct:__anon141
excls	includeheaders/types/topology.h	/^  t_blocka      excls;          \/* The exclusions                       *\/$/;"	m	struct:__anon145
excls	includeheaders/types/topology.h	/^  t_blocka      excls;          \/* The exclusions                       *\/$/;"	m	struct:__anon146
exp_min_t_tau	includeheaders/types/fcdata.h	/^  real   exp_min_t_tau; \/* Factor for slowly switching on the force         *\/$/;"	m	struct:__anon64
exp_min_t_tau	includeheaders/types/fcdata.h	/^  real exp_min_t_tau; \/* Factor for slowly switching on the force         *\/$/;"	m	struct:__anon63
extend_segment	structure/transform_segment.c	/^float extend_segment(gsl_matrix *X, gsl_matrix *Y, gsl_matrix *U, gsl_vector *t, Vec *coords_A, Vec *coords_B, Vec *coords_D, Vec *refcoords, int npoints, int mpoints, int overlap)$/;"	f
extract_code_from_string	statistics/code.c	/^void extract_code_from_string(char *string, Set *codeSet) {$/;"	f
f	includeheaders/types/idef.h	/^  struct {real a,b,c,d,e,f;                               } vsite;   $/;"	m	struct:__anon7::__anon30
f	includeheaders/types/inputrec.h	/^  dvec       f;        \/* force due to the pulling\/constraining *\/$/;"	m	struct:__anon162
f	includeheaders/types/trx.h	/^  rvec *f;        \/* forces (natoms)                  *\/$/;"	m	struct:trxframe
f_novirsum	includeheaders/types/forcerec.h	/^  rvec *f_novirsum;$/;"	m	struct:__anon157
f_novirsum_alloc	includeheaders/types/forcerec.h	/^  rvec *f_novirsum_alloc;$/;"	m	struct:__anon157
f_novirsum_n	includeheaders/types/forcerec.h	/^  int  f_novirsum_n;$/;"	m	struct:__anon157
f_novirsum_nalloc	includeheaders/types/forcerec.h	/^  int  f_novirsum_nalloc;$/;"	m	struct:__anon157
f_scal	includeheaders/types/inputrec.h	/^  double     f_scal;   \/* Scalar force for directional pulling *\/$/;"	m	struct:__anon162
f_twin	includeheaders/types/forcerec.h	/^  rvec *f_twin;$/;"	m	struct:__anon157
fbox_diag	includeheaders/types/pbc.h	/^  rvec   fbox_diag;$/;"	m	struct:__anon100
fc	includeheaders/types/fcdata.h	/^  real   fc;          \/* Force constant for the restraints                  *\/$/;"	m	struct:__anon64
fcA	includeheaders/types/idef.h	/^  struct {real pos0A[DIM],fcA[DIM],pos0B[DIM],fcB[DIM];   } posres;$/;"	m	struct:__anon7::__anon28
fcB	includeheaders/types/idef.h	/^  struct {real pos0A[DIM],fcA[DIM],pos0B[DIM],fcB[DIM];   } posres;$/;"	m	struct:__anon7::__anon28
fc_stepsize	includeheaders/types/forcerec.h	/^  real fc_stepsize;$/;"	m	struct:__anon157
fc_stepsize	includeheaders/types/inputrec.h	/^  real fc_stepsize;     \/* Stepsize for directional minimization        *\/$/;"	m	struct:__anon164
fene	includeheaders/types/idef.h	/^  struct {real bm,kb;                                      } fene;$/;"	m	union:__anon7	typeref:struct:__anon7::__anon12
ffparams	includeheaders/types/topology.h	/^  gmx_ffparams_t ffparams;$/;"	m	struct:__anon144
filename_extension	includeheaders/molfile_plugin.h	/^  const char *filename_extension;$/;"	m	struct:__anon83
filetype	includeheaders/vmdio.h	/^    const char* filetype;$/;"	m	struct:__anon2
fitgrow_chain	structure/transform_segment.c	/^float fitgrow_chain(gsl_matrix *X, gsl_matrix *Y, gsl_matrix *U, gsl_vector *t, Vec *coords_A, Vec *coords_B, Vec *refcoords, int npoints, int mpoints, int overlap)$/;"	f
flags	includeheaders/types/ifunc.h	/^  unsigned long   flags;        \/* Flags (see above)                            *\/$/;"	m	struct:__anon171
flags	includeheaders/types/matrix.h	/^  unsigned int flags; \/* The possible flags are defined above *\/$/;"	m	struct:__anon94
flags	includeheaders/types/state.h	/^  int           flags;  \/* Flags telling which entries are present      *\/$/;"	m	struct:__anon58
flags	includeheaders/types/trx.h	/^  int  flags;     \/* flags for read_first\/next_frame  *\/$/;"	m	struct:trxframe
flambda	includeheaders/types/inputrec.h	/^  double *flambda;      \/* The foreign lambda values                    *\/$/;"	m	struct:__anon164
fqq	includeheaders/types/idef.h	/^  struct {real fqq,qi,qj,c6,c12;	                   } ljc14;$/;"	m	struct:__anon7::__anon22
frag_overlap_rmsd	structure/fragments.c	/^float frag_overlap_rmsd(Str *fragment1, Str *fragment2, int lFragment, int overlap){$/;"	f
free_ReconStructure	sequence/encode.c	/^void free_ReconStructure(ReconStructure *reconStr, int nRecStr) {$/;"	f
free_colour_set	structure/fragment_colour.c	/^void free_colour_set(SA_colour *SA_colour_set){$/;"	f
free_energy	includeheaders/types/nblist.h	/^  int             free_energy;  \/* Free energy setting for this list     *\/$/;"	m	struct:__anon96
free_float_matrix	general/matrix.c	/^void free_float_matrix(float **matrix, int nRow)$/;"	f
free_float_matrix3D	general/matrix.c	/^void free_float_matrix3D(float ***float_matrix3D, int x, int y)$/;"	f
free_fragment_sets	structure/fragments.c	/^void free_fragment_sets(FragmentSet *fragment_set)$/;"	f
free_int_matrix	general/matrix.c	/^void free_int_matrix(int **matrix, int nRow)$/;"	f
free_probability_matrix	statistics/probability.c	/^void free_probability_matrix(ProbMatrix *probMat) {$/;"	f
free_xpm_matrix	g_sa_analyze.c	/^void free_xpm_matrix(t_matrix *xpm_mat, int nmatcol, int nFragment) {$/;"	f
free_xpm_matrix	g_sa_encode.c	/^void free_xpm_matrix(t_matrix *xpm_mat, int nmatcol){$/;"	f
fshift	includeheaders/types/forcerec.h	/^  rvec *fshift;$/;"	m	struct:__anon157
fudgeQQ	includeheaders/types/forcerec.h	/^  real fudgeQQ;$/;"	m	struct:__anon157
fudgeQQ	includeheaders/types/idef.h	/^  real       fudgeQQ;    \/* The scaling factor for Coulomb 1-4: f*q1*q2  *\/$/;"	m	struct:__anon42
fudgeQQ	includeheaders/types/idef.h	/^  real fudgeQQ;$/;"	m	struct:__anon44
functype	includeheaders/types/idef.h	/^  t_functype *functype;$/;"	m	struct:__anon42
functype	includeheaders/types/idef.h	/^  t_functype *functype;$/;"	m	struct:__anon44
fval	includeheaders/vec.h	/^  float fval;$/;"	m	union:__anon4
fvir_prev	includeheaders/types/state.h	/^  matrix        fvir_prev; \/* Force virial of the previous step for pcoupl  *\/$/;"	m	struct:__anon58
g	includeheaders/types/matrix.h	/^  real r,g,b;$/;"	m	struct:__anon91
g	structure/fragment_colour.h	/^  float g;$/;"	m	struct:__anon138
gamma	includeheaders/molfile_plugin.h	/^  float A, B, C, alpha, beta, gamma; $/;"	m	struct:__anon73
gb	includeheaders/types/idef.h	/^  struct {real sar,st,pi,gbr,bmlt;                        } gb;$/;"	m	union:__anon7	typeref:struct:__anon7::__anon36
gb_algorithm	includeheaders/types/inputrec.h	/^  int  gb_algorithm;    \/* Algorithm to use for calculation Born radii  *\/$/;"	m	struct:__anon164
gb_dielectric_offset	includeheaders/types/inputrec.h	/^  real gb_dielectric_offset; \/* Dielectric offset for Still\/HCT\/OBC     *\/$/;"	m	struct:__anon164
gb_epsilon_solvent	includeheaders/types/forcerec.h	/^  real gb_epsilon_solvent;$/;"	m	struct:__anon157
gb_epsilon_solvent	includeheaders/types/inputrec.h	/^  real gb_epsilon_solvent; \/* dielectric coeff. of implicit solvent     *\/$/;"	m	struct:__anon164
gb_obc_alpha	includeheaders/types/inputrec.h	/^  real gb_obc_alpha;    \/* 1st scaling factor for Bashford-Case GB      *\/$/;"	m	struct:__anon164
gb_obc_beta	includeheaders/types/inputrec.h	/^  real gb_obc_beta;     \/* 2nd scaling factor for Bashford-Case GB      *\/$/;"	m	struct:__anon164
gb_obc_gamma	includeheaders/types/inputrec.h	/^  real gb_obc_gamma;    \/* 3rd scaling factor for Bashford-Case GB      *\/$/;"	m	struct:__anon164
gb_radius	includeheaders/types/atoms.h	/^  real         *gb_radius;      \/* GB radius for each atom type                 *\/$/;"	m	struct:__anon90
gb_saltconc	includeheaders/types/inputrec.h	/^  real gb_saltconc;     \/* Salt concentration (M) for GBSA models       *\/$/;"	m	struct:__anon164
gblist	includeheaders/types/forcerec.h	/^  t_nblist gblist;$/;"	m	struct:__anon157
gblist_lr	includeheaders/types/forcerec.h	/^  t_nblist gblist_lr;$/;"	m	struct:__anon157
gblist_sr	includeheaders/types/forcerec.h	/^  t_nblist gblist_sr;$/;"	m	struct:__anon157
gbr	includeheaders/types/idef.h	/^  struct {real sar,st,pi,gbr,bmlt;                        } gb;$/;"	m	struct:__anon7::__anon36
gbtab	includeheaders/types/forcerec.h	/^  t_forcetable gbtab;$/;"	m	struct:__anon157
gbtabr	includeheaders/types/forcerec.h	/^  real gbtabr;$/;"	m	struct:__anon157
gbtabscale	includeheaders/types/forcerec.h	/^  real gbtabscale;$/;"	m	struct:__anon157
generic	includeheaders/types/idef.h	/^  struct {real buf[MAXFORCEPARAM];	  	          } generic; \/* Conversion *\/$/;"	m	union:__anon7	typeref:struct:__anon7::__anon38
geometry	includeheaders/molfile_plugin.h	/^  char geometry[MOLFILE_BUFSIZ];        \/**< type of provided geometry,   XXX: remove?$/;"	m	struct:__anon78
getAltCode	partition/value.c	/^void getAltCode(float *rightSideVec, int rightSideVecLength, Data *data,$/;"	f
get_best_fragment	structure/fragments.c	/^int get_best_fragment(Vec *subStructure, FragmentSet *fragment_set, Str *fragment_str, float *ptr_rmsd){$/;"	f
get_string_from_column	sequence/sequence.c	/^char *get_string_from_column(SeqSet *fastaSequenceSet, int column) {$/;"	f
ggrpnr	includeheaders/types/topology.h	83;"	d
gid	includeheaders/types/nblist.h	/^  int *           gid;          \/* Index in energy arrays                *\/$/;"	m	struct:__anon96
gid2nblists	includeheaders/types/forcerec.h	/^  int  *gid2nblists;$/;"	m	struct:__anon157
globalfit_encode	sequence/encode.c	/^void globalfit_encode(ReconStructure *recStr, ReconStructure *tempRecStr,$/;"	f
gmx_angle	includeheaders/vec.h	/^gmx_angle(const rvec a, const rvec b)$/;"	f
gmx_bool	legacyheaders/types/simple.h	/^typedef int gmx_bool;$/;"	t
gmx_cmap_t	includeheaders/types/idef.h	/^} gmx_cmap_t;$/;"	t	typeref:struct:__anon41
gmx_constr_t	includeheaders/types/constr.h	/^typedef struct gmx_constr *gmx_constr_t;$/;"	t	typeref:struct:gmx_constr
gmx_ddbox_t	legacyheaders/typedefs.h	/^typedef struct gmx_ddbox_t gmx_ddbox_t;$/;"	t	typeref:struct:gmx_ddbox_t
gmx_domdec_t	legacyheaders/typedefs.h	/^typedef struct gmx_domdec_t gmx_domdec_t;$/;"	t	typeref:struct:gmx_domdec_t
gmx_domdec_zones_t	legacyheaders/typedefs.h	/^typedef struct gmx_domdec_zones_t gmx_domdec_zones_t;$/;"	t	typeref:struct:gmx_domdec_zones_t
gmx_edsam_t	includeheaders/types/constr.h	/^typedef struct gmx_edsam *gmx_edsam_t;$/;"	t	typeref:struct:gmx_edsam
gmx_ekindata_t	includeheaders/types/group.h	/^} gmx_ekindata_t;$/;"	t	typeref:struct:__anon170
gmx_enerdata_t	includeheaders/types/forcerec.h	/^} gmx_enerdata_t;$/;"	t	typeref:struct:__anon155
gmx_ffparams_t	includeheaders/types/idef.h	/^} gmx_ffparams_t;$/;"	t	typeref:struct:__anon42
gmx_groups_t	includeheaders/types/topology.h	/^} gmx_groups_t;$/;"	t	typeref:struct:__anon143
gmx_grppairener_t	includeheaders/types/forcerec.h	/^} gmx_grppairener_t;$/;"	t	typeref:struct:__anon154
gmx_inline	legacyheaders/types/simple.h	220;"	d
gmx_inline	legacyheaders/types/simple.h	223;"	d
gmx_int32_t	legacyheaders/types/simple.h	/^typedef __int32 gmx_int32_t;$/;"	t
gmx_int32_t	legacyheaders/types/simple.h	/^typedef int32_t gmx_int32_t;$/;"	t
gmx_int64_t	legacyheaders/types/simple.h	/^typedef __int64 gmx_int64_t;$/;"	t
gmx_int64_t	legacyheaders/types/simple.h	/^typedef int64_t gmx_int64_t;$/;"	t
gmx_invsqrt	includeheaders/vec.h	/^static real gmx_invsqrt(real x)$/;"	f
gmx_invsqrt	includeheaders/vec.h	215;"	d
gmx_lincsdata_t	includeheaders/types/constr.h	/^typedef struct gmx_lincsdata *gmx_lincsdata_t;$/;"	t	typeref:struct:gmx_lincsdata
gmx_localtop_t	includeheaders/types/topology.h	/^} gmx_localtop_t;$/;"	t	typeref:struct:__anon145
gmx_log2	includeheaders/maths.h	/^gmx_log2(real x)$/;"	f
gmx_molblock_t	includeheaders/types/topology.h	/^} gmx_molblock_t;$/;"	t	typeref:struct:__anon142
gmx_moltype_t	includeheaders/types/topology.h	/^} gmx_moltype_t;$/;"	t	typeref:struct:__anon141
gmx_mtop_t	includeheaders/types/topology.h	/^} gmx_mtop_t;$/;"	t	typeref:struct:__anon144
gmx_multisim_t	legacyheaders/typedefs.h	/^typedef struct gmx_multisim_t gmx_multisim_t;$/;"	t	typeref:struct:gmx_multisim_t
gmx_numzero	includeheaders/maths.h	/^gmx_numzero(double a)$/;"	f
gmx_pme_t	includeheaders/types/forcerec.h	/^typedef struct gmx_pme *gmx_pme_t;$/;"	t	typeref:struct:gmx_pme
gmx_real_fullprecision_pfmt	legacyheaders/types/simple.h	145;"	d
gmx_real_fullprecision_pfmt	legacyheaders/types/simple.h	158;"	d
gmx_restrict	legacyheaders/types/simple.h	229;"	d
gmx_settledata_t	includeheaders/types/constr.h	/^typedef struct gmx_settledata *gmx_settledata_t;$/;"	t	typeref:struct:gmx_settledata
gmx_shakedata_t	includeheaders/types/constr.h	/^typedef struct gmx_shakedata *gmx_shakedata_t;$/;"	t	typeref:struct:gmx_shakedata
gmx_shellfc_t	includeheaders/types/shellfc.h	/^typedef struct gmx_shellfc *gmx_shellfc_t;$/;"	t	typeref:struct:gmx_shellfc
gmx_uint32_t	legacyheaders/types/simple.h	/^typedef uint32_t gmx_uint32_t;$/;"	t
gmx_uint32_t	legacyheaders/types/simple.h	/^typedef unsigned __int32 gmx_uint32_t;$/;"	t
gmx_uint64_t	legacyheaders/types/simple.h	/^typedef uint64_t gmx_uint64_t;$/;"	t
gmx_uint64_t	legacyheaders/types/simple.h	/^typedef unsigned __int64 gmx_uint64_t;$/;"	t
gmx_unused	legacyheaders/types/simple.h	242;"	d
gmx_unused	legacyheaders/types/simple.h	245;"	d
gmx_unused	legacyheaders/types/simple.h	248;"	d
gmx_unused	legacyheaders/types/simple.h	251;"	d
gmx_unused	legacyheaders/types/simple.h	254;"	d
gmx_unused	legacyheaders/types/simple.h	256;"	d
gmx_wallcycle_t	includeheaders/types/nrnb.h	/^typedef struct gmx_wallcycle *gmx_wallcycle_t;$/;"	t	typeref:struct:gmx_wallcycle
gmx_within_tol	includeheaders/maths.h	/^gmx_within_tol(double   f1,$/;"	f
gradient	includeheaders/molfile_plugin.h	/^  float  *gradient;         \/**< force on each atom (=gradient of energy) *\/$/;"	m	struct:__anon80
grid_spacing	includeheaders/types/idef.h	/^	int grid_spacing;     \/* Grid spacing *\/$/;"	m	struct:__anon41
groups	includeheaders/types/topology.h	/^  gmx_groups_t   groups;$/;"	m	struct:__anon144
grow_chain	structure/transform_segment.c	/^float grow_chain(gsl_matrix *X, gsl_matrix *Y, gsl_matrix *U, gsl_vector *t, Vec *coords_A, Vec *coords_B, Vec *refcoords, int npoints, int mpoints, int overlap)$/;"	f
grp	includeheaders/types/inputrec.h	/^  t_pullgrp  *grp;        \/* groups to pull\/restrain\/etc\/ *\/$/;"	m	struct:__anon163
grpname	includeheaders/types/topology.h	/^  char           ***grpname;    \/* Names of the groups                  *\/$/;"	m	struct:__anon143
grpnr	includeheaders/types/topology.h	/^  unsigned char  *grpnr[egcNR]; \/* Group numbers or NULL                *\/$/;"	m	struct:__anon143
grpp	includeheaders/types/forcerec.h	/^  gmx_grppairener_t grpp;$/;"	m	struct:__anon155
grps	includeheaders/types/topology.h	/^  t_grps         grps[egcNR];   \/* Groups of things                     *\/$/;"	m	struct:__anon143
grpstat	includeheaders/types/group.h	/^  t_grp_acc    *grpstat;	\/* Acceleration data			*\/$/;"	m	struct:__anon170
gsl_vector_cross	structure/kabsch.c	/^__inline__ static void gsl_vector_cross($/;"	f	file:
handle	includeheaders/vmdio.h	/^    void* handle;$/;"	m	struct:__anon2
harmonic	includeheaders/types/idef.h	/^  struct {real rA,krA,rB,krB;           	           } harmonic;$/;"	m	union:__anon7	typeref:struct:__anon7::__anon9
has_color	includeheaders/molfile_plugin.h	/^  int has_color;        \/**< flag indicating presence of voxel color data   *\/$/;"	m	struct:__anon74
has_gradient	includeheaders/molfile_plugin.h	/^  int has_gradient;                    \/**< if timestep contains gradient    *\/$/;"	m	struct:molfile_qm_timestep_metadata
has_occup_per_wavef	includeheaders/molfile_plugin.h	/^  int has_occup_per_wavef[MOLFILE_MAXWAVEPERTS]; \/**< orbital occupancy flags *\/$/;"	m	struct:molfile_qm_timestep_metadata
has_orben_per_wavef	includeheaders/molfile_plugin.h	/^  int has_orben_per_wavef[MOLFILE_MAXWAVEPERTS]; \/**< orbital energy flags *\/$/;"	m	struct:molfile_qm_timestep_metadata
has_velocities	includeheaders/molfile_plugin.h	/^  int has_velocities;                  \/**< if timesteps have velocities     *\/$/;"	m	struct:molfile_timestep_metadata
have_carthessian	includeheaders/molfile_plugin.h	/^  int have_carthessian;         \/**< hessian in cartesian coords available  *\/$/;"	m	struct:__anon75
have_inthessian	includeheaders/molfile_plugin.h	/^  int have_inthessian;          \/**< hessian in internal coords available  *\/$/;"	m	struct:__anon75
have_normalmodes	includeheaders/molfile_plugin.h	/^  int have_normalmodes;         \/**< normal modes available  *\/$/;"	m	struct:__anon75
have_sysinfo	includeheaders/molfile_plugin.h	/^  int have_sysinfo;$/;"	m	struct:__anon75
hbox_diag	includeheaders/types/pbc.h	/^  rvec   hbox_diag;$/;"	m	struct:__anon100
hcg	includeheaders/types/forcerec.h	/^  int  cg0,hcg;$/;"	m	struct:__anon157
hess	includeheaders/molfile_plugin.h	/^  molfile_qm_hessian_t hess;            \/* hessian info *\/$/;"	m	struct:__anon81
hist	includeheaders/types/state.h	/^  history_t     hist;   \/* Time history for restraints                  *\/$/;"	m	struct:__anon58
history_t	includeheaders/types/state.h	/^} history_t;$/;"	t	typeref:struct:__anon54
homenr	includeheaders/types/mdatom.h	/^  int           homenr;$/;"	m	struct:__anon150
iatoms	includeheaders/types/idef.h	/^  t_iatom *iatoms;$/;"	m	struct:__anon39
ic	includeheaders/types/atoms.h	/^  unsigned char ic;             \/* Code for insertion of residues       *\/$/;"	m	struct:__anon86
icg0	includeheaders/types/nsgrid.h	/^  int    icg0;          \/* The start of the i-cg range          *\/$/;"	m	struct:__anon148
icg1	includeheaders/types/nsgrid.h	/^  int    icg1;          \/* The end of the i-cg range            *\/$/;"	m	struct:__anon148
icoul	includeheaders/types/nblist.h	/^  int             icoul;        \/* Coulomb loop type index for kernels   *\/$/;"	m	struct:__anon96
idef	includeheaders/types/topology.h	/^  t_idef        idef;           \/* The interaction function definition	*\/$/;"	m	struct:__anon145
idef	includeheaders/types/topology.h	/^  t_idef        idef;           \/* The interaction function definition	*\/$/;"	m	struct:__anon146
ifunc	includeheaders/types/ifunc.h	/^  t_ifunc *ifunc;	\/* the function it self				*\/$/;"	m	struct:__anon171
iinr	includeheaders/types/nblist.h	/^  int *           iinr;	        \/* The i-elements	   	         *\/$/;"	m	struct:__anon96
iinr_end	includeheaders/types/nblist.h	/^  int *           iinr_end;     \/* The end atom, only with enlistCG      *\/$/;"	m	struct:__anon96
iiprod	includeheaders/vec.h	/^static gmx_inline int iiprod(const ivec a,const ivec b)$/;"	f
il	includeheaders/types/idef.h	/^  t_ilist il[F_NRE];$/;"	m	struct:__anon44
il_code	includeheaders/types/nblist.h	/^  int             il_code;      \/* Innerloop index from nrnb.h, used     *\/$/;"	m	struct:__anon96
ilist	includeheaders/types/topology.h	/^  t_ilist       ilist[F_NRE];$/;"	m	struct:__anon141
ilsort	includeheaders/types/idef.h	/^  int ilsort;$/;"	m	struct:__anon44
ilsortFE_SORTED	includeheaders/types/idef.h	/^  ilsortUNKNOWN, ilsortNO_FE, ilsortFE_UNSORTED, ilsortFE_SORTED$/;"	e	enum:__anon43
ilsortFE_UNSORTED	includeheaders/types/idef.h	/^  ilsortUNKNOWN, ilsortNO_FE, ilsortFE_UNSORTED, ilsortFE_SORTED$/;"	e	enum:__anon43
ilsortNO_FE	includeheaders/types/idef.h	/^  ilsortUNKNOWN, ilsortNO_FE, ilsortFE_UNSORTED, ilsortFE_SORTED$/;"	e	enum:__anon43
ilsortUNKNOWN	includeheaders/types/idef.h	/^  ilsortUNKNOWN, ilsortNO_FE, ilsortFE_UNSORTED, ilsortFE_SORTED$/;"	e	enum:__anon43
imag_modes	includeheaders/molfile_plugin.h	/^  int    *imag_modes;   \/**< list(nimag) of imaginary modes *\/$/;"	m	struct:__anon76
imatrix	legacyheaders/types/simple.h	/^typedef int             imatrix[DIM][DIM];$/;"	t
implicit_solvent	includeheaders/types/inputrec.h	/^  int  implicit_solvent;\/* No (=explicit water), or GBSA solvent models *\/$/;"	m	struct:__anon164
ind	includeheaders/types/inputrec.h	/^  atom_id    *ind;     \/* The global atoms numbers *\/$/;"	m	struct:__anon162
ind_loc	includeheaders/types/inputrec.h	/^  atom_id    *ind_loc; \/* Local pull indices *\/$/;"	m	struct:__anon162
index	includeheaders/types/block.h	/^  atom_id *index;		\/* Array of indices (dim: nr+1) 	*\/$/;"	m	struct:__anon97
index	includeheaders/types/block.h	/^  atom_id *index;		\/* Array of indices in a (dim: nr+1)	*\/$/;"	m	struct:__anon98
index	includeheaders/types/nsgrid.h	/^  int    *index;	\/* The index into a for each cell	*\/$/;"	m	struct:__anon148
info	includeheaders/molfile_plugin.h	/^  char info[MOLFILE_BUFSIZ]; \/**< string for additional type info *\/$/;"	m	struct:__anon79
init	includeheaders/types/inputrec.h	/^  rvec       init;     \/* Initial reference displacement *\/$/;"	m	struct:__anon162
init_float_matrix3D	general/matrix.c	/^void init_float_matrix3D(float ***float_matrix3D, int x, int y, int z, float val)$/;"	f
init_lambda	includeheaders/types/inputrec.h	/^  double init_lambda;	\/* initial value for perturbation variable	*\/$/;"	m	struct:__anon164
init_step	includeheaders/types/inputrec.h	/^  gmx_large_int_t init_step;	\/* start at a stepcount >0 (used w. tpbconv)    *\/$/;"	m	struct:__anon164
init_t	includeheaders/types/inputrec.h	/^  double init_t;	\/* initial time (ps) 				*\/$/;"	m	struct:__anon164
initialise_ReconStructure	sequence/encode.c	/^ReconStructure *initialise_ReconStructure(int lFragment, int natom,$/;"	f
initialise_float_matrix	general/matrix.c	/^void initialise_float_matrix(float **matrix, int nRow, int nCol, float init_value)$/;"	f
initialise_fragment_set	structure/fragments.c	/^int initialise_fragment_set(FragmentSet *selected_set, char *setname){$/;"	f
initialise_int_matrix	general/matrix.c	/^void initialise_int_matrix(int **matrix, int nRow, int nCol, int init_value)$/;"	f
initialize_code_from_string	statistics/code.c	/^void initialize_code_from_string(char *string, Set *codeSet) {$/;"	f
initialize_prefix_sums	partition/object.c	/^void initialize_prefix_sums(float *p, int n, Collection *collection,$/;"	f
initialize_prefix_sums_wrapper	partition/score.c	/^void initialize_prefix_sums_wrapper(float *p, int n, Collection *collection,$/;"	f
initialize_probability_matrix	statistics/probability.c	/^void initialize_probability_matrix(ProbMatrix *probMat, Set *codeSet,$/;"	f
initialize_xpm_SA_mapping	g_sa_analyze.c	/^void initialize_xpm_SA_mapping(t_mapping *SA_mapping, FragmentSet *fragment_set, SA_colour *colours) {$/;"	f
initialize_xpm_SA_mapping	g_sa_encode.c	/^void initialize_xpm_SA_mapping(t_mapping *SA_mapping, FragmentSet *fragment_set, SA_colour *colours){$/;"	f
initialize_xpm_matrix	g_sa_analyze.c	/^void initialize_xpm_matrix(t_matrix *xpm_mat, int nx, int ny) {$/;"	f
initialize_xpm_matrix	g_sa_encode.c	/^void initialize_xpm_matrix(t_matrix *xpm_mat, int nx, int ny){$/;"	f
insertion	includeheaders/molfile_plugin.h	/^  char insertion[2];  \/**< optional PDB insertion code           *\/$/;"	m	struct:__anon72
instance	partition/value.h	/^    Instance *instance; \/* input values *\/$/;"	m	struct:__anon166
intensities	includeheaders/molfile_plugin.h	/^  float *intensities;   \/**< array(ncart) of intensities of normal modes *\/$/;"	m	struct:__anon76
inthessian	includeheaders/molfile_plugin.h	/^  double *inthessian;   \/**< hessian matrix in internal coordinates$/;"	m	struct:__anon76
invmass	includeheaders/types/mdatom.h	/^  real          *massA,*massB,*massT,*invmass;$/;"	m	struct:__anon150
invsqrta	includeheaders/types/forcerec.h	/^  real *invsqrta;$/;"	m	struct:__anon157
invtm	includeheaders/types/inputrec.h	/^  real       invtm;    \/* inverse total mass of the group: 1\/wscale sum w m *\/$/;"	m	struct:__anon162
iparams	includeheaders/types/idef.h	/^  t_iparams  *iparams;$/;"	m	struct:__anon42
iparams	includeheaders/types/idef.h	/^  t_iparams  *iparams;$/;"	m	struct:__anon44
iparams_posres	includeheaders/types/idef.h	/^  t_iparams  *iparams_posres;$/;"	m	struct:__anon44
iparams_posres_nalloc	includeheaders/types/idef.h	/^  int iparams_posres_nalloc;$/;"	m	struct:__anon44
iprod	includeheaders/vec.h	/^static gmx_inline real iprod(const rvec a,const rvec b)$/;"	f
ishift	includeheaders/types/graph.h	/^  ivec     *ishift;	\/* Shift for each particle              	*\/$/;"	m	struct:__anon62
ivdw	includeheaders/types/nblist.h	/^  int             ivdw;         \/* VdW loop type index for kernels       *\/$/;"	m	struct:__anon96
ivec	legacyheaders/types/simple.h	/^typedef int             ivec[DIM];$/;"	t
ivec_add	includeheaders/vec.h	/^static gmx_inline void ivec_add(const ivec a,const ivec b,ivec c)$/;"	f
ivec_sub	includeheaders/vec.h	/^static gmx_inline void ivec_sub(const ivec a,const ivec b,ivec c)$/;"	f
jindex	includeheaders/types/nblist.h	/^  int *           jindex;       \/* Index in jjnr                         *\/$/;"	m	struct:__anon96
jjnr	includeheaders/types/nblist.h	/^  int *           jjnr;	        \/* The j-atom list                       *\/$/;"	m	struct:__anon96
jjnr_end	includeheaders/types/nblist.h	/^  int *           jjnr_end;     \/* The end atom, only with enltypeCG     *\/$/;"	m	struct:__anon96
joint_entropy	statistics/probability.c	/^float joint_entropy(ProbMatrix *probMat, Set *codeSet, Set *altCodeSet) {$/;"	f
k	includeheaders/types/inputrec.h	/^  real       k;        \/* force constant *\/$/;"	m	struct:__anon162
kA	includeheaders/types/idef.h	/^  struct {int  table;real kA;real kB;                     } tab;$/;"	m	struct:__anon7::__anon35
kA	includeheaders/types/idef.h	/^  struct {real lowA,up1A,up2A,kA,lowB,up1B,up2B,kB;        } restraint;$/;"	m	struct:__anon7::__anon10
kB	includeheaders/types/idef.h	/^  struct {int  table;real kA;real kB;                     } tab;$/;"	m	struct:__anon7::__anon35
kB	includeheaders/types/idef.h	/^  struct {real lowA,up1A,up2A,kA,lowB,up1B,up2B,kB;        } restraint;$/;"	m	struct:__anon7::__anon10
kB	includeheaders/types/inputrec.h	/^  real       kB;       \/* force constant for state B *\/$/;"	m	struct:__anon162
kUB	includeheaders/types/idef.h	/^  struct {real theta,ktheta,r13,kUB;                       } u_b;$/;"	m	struct:__anon7::__anon15
k_rf	includeheaders/types/forcerec.h	/^  real kappa,k_rf,c_rf;$/;"	m	struct:__anon157
kabsch	structure/kabsch.c	/^int kabsch($/;"	f
kabsch_alloc	structure/transform_segment.c	/^void kabsch_alloc(gsl_matrix **ptr_U, gsl_vector **ptr_t, gsl_matrix **ptr_X, gsl_matrix **ptr_Y, int npoints){$/;"	f
kabsch_free	structure/transform_segment.c	/^void kabsch_free(gsl_matrix *U, gsl_vector *t, gsl_matrix *X, gsl_matrix *Y){$/;"	f
kappa	includeheaders/types/forcerec.h	/^  real kappa,k_rf,c_rf;$/;"	m	struct:__anon157
kb	includeheaders/types/idef.h	/^  struct {real b0,kb,kcub;                                 } cubic;$/;"	m	struct:__anon7::__anon11
kb	includeheaders/types/idef.h	/^  struct {real bm,kb;                                      } fene;$/;"	m	struct:__anon7::__anon12
kcub	includeheaders/types/idef.h	/^  struct {real b0,kb,kcub;                                 } cubic;$/;"	m	struct:__anon7::__anon11
kfac	includeheaders/types/idef.h	/^  struct {int  ex,power,label; real c,obs,kfac;           } orires;$/;"	m	struct:__anon7::__anon34
kfac	includeheaders/types/idef.h	/^  struct {real low,up1,up2,kfac;int type,label,npair;     } disres; $/;"	m	struct:__anon7::__anon32
kfac	includeheaders/types/idef.h	/^  struct {real phi,dphi,kfac;int label,power;             } dihres;  $/;"	m	struct:__anon7::__anon33
krA	includeheaders/types/idef.h	/^  struct {real rA,krA,rB,krB;           	           } harmonic;$/;"	m	struct:__anon7::__anon9
krB	includeheaders/types/idef.h	/^  struct {real rA,krA,rB,krB;           	           } harmonic;$/;"	m	struct:__anon7::__anon9
krr	includeheaders/types/idef.h	/^  struct {real r1e,r2e,krr;                                } cross_bb;$/;"	m	struct:__anon7::__anon13
krt	includeheaders/types/idef.h	/^  struct {real r1e,r2e,r3e,krt;                            } cross_ba;$/;"	m	struct:__anon7::__anon14
ktheta	includeheaders/types/idef.h	/^  struct {real theta,ktheta,r13,kUB;                       } u_b;$/;"	m	struct:__anon7::__anon15
lFragment	structure/fragments.h	/^    int lFragment;$/;"	m	struct:__anon5
lFragment	structure/fragments_coords.h	/^    int lFragment;$/;"	m	struct:__anon66
label	includeheaders/types/idef.h	/^  struct {int  ex,power,label; real c,obs,kfac;           } orires;$/;"	m	struct:__anon7::__anon34
label	includeheaders/types/idef.h	/^  struct {real low,up1,up2,kfac;int type,label,npair;     } disres; $/;"	m	struct:__anon7::__anon32
label	includeheaders/types/idef.h	/^  struct {real phi,dphi,kfac;int label,power;             } dihres;  $/;"	m	struct:__anon7::__anon33
label	partition/label.h	/^    Label *label; \/* label *\/$/;"	m	struct:__anon68
label_x	includeheaders/types/matrix.h	/^  char label_x[256];$/;"	m	struct:__anon94
label_y	includeheaders/types/matrix.h	/^  char label_y[256];$/;"	m	struct:__anon94
lambda	includeheaders/types/group.h	/^  real    lambda;       \/* Berendsen coupling lambda       *\/$/;"	m	struct:__anon167
lambda	includeheaders/types/mdatom.h	/^  real          lambda;$/;"	m	struct:__anon150
lambda	includeheaders/types/state.h	/^  real          lambda; \/* the free energy switching parameter          *\/$/;"	m	struct:__anon58
lambda	includeheaders/types/trx.h	/^  real lambda;    \/* free energy perturbation lambda  *\/$/;"	m	struct:trxframe
ld_rng	includeheaders/types/state.h	/^  unsigned int  *ld_rng;  \/* RNG random state                           *\/$/;"	m	struct:__anon58
ld_rngi	includeheaders/types/state.h	/^  int           *ld_rngi; \/* RNG index                                  *\/$/;"	m	struct:__anon58
ld_seed	includeheaders/types/inputrec.h	/^  int  ld_seed;         \/* Random seed for SD and BD                    *\/$/;"	m	struct:__anon164
legend	includeheaders/types/matrix.h	/^  char legend[256];$/;"	m	struct:__anon94
length	structure/pdb_structure.h	/^    int length; \/* length of sequence *\/$/;"	m	struct:__anon47
limit_distance2	includeheaders/types/pbc.h	/^  real   limit_distance2;$/;"	m	struct:__anon100
lj	includeheaders/types/idef.h	/^  struct {real c6,c12;				           } lj;$/;"	m	union:__anon7	typeref:struct:__anon7::__anon20
lj14	includeheaders/types/idef.h	/^  struct {real c6A,c12A,c6B,c12B;		           } lj14;$/;"	m	union:__anon7	typeref:struct:__anon7::__anon21
ljc14	includeheaders/types/idef.h	/^  struct {real fqq,qi,qj,c6,c12;	                   } ljc14;$/;"	m	union:__anon7	typeref:struct:__anon7::__anon22
ljcnb	includeheaders/types/idef.h	/^  struct {real qi,qj,c6,c12;		                   } ljcnb;$/;"	m	union:__anon7	typeref:struct:__anon7::__anon23
load_colour_set	structure/fragment_colour.c	/^SA_colour *load_colour_set(int *ptr_nSet){$/;"	f
load_fragment_data	structure/fragments.c	/^Str *load_fragment_data(char *pdbCodeFileName, char *userCodeString, char *stralphabetName, FragmentSet *fragment_set, int pdbcode){$/;"	f
local_rmsd	structure/fragments.c	/^float local_rmsd(Vec *subStructure, Str *fragment, int lSubStr, int overlap){$/;"	f
localfit_encode	sequence/encode.c	/^void localfit_encode(ReconStructure *recStr, Vec *refcoord,$/;"	f
longname	includeheaders/types/ifunc.h	/^  const char *longname; \/* The name for printing etc.                   *\/$/;"	m	struct:__anon171
low	includeheaders/types/idef.h	/^  struct {real low,up1,up2,kfac;int type,label,npair;     } disres; $/;"	m	struct:__anon7::__anon32
lowA	includeheaders/types/idef.h	/^  struct {real lowA,up1A,up2A,kA,lowB,up1B,up2B,kB;        } restraint;$/;"	m	struct:__anon7::__anon10
lowB	includeheaders/types/idef.h	/^  struct {real lowA,up1A,up2A,kA,lowB,up1B,up2B,kB;        } restraint;$/;"	m	struct:__anon7::__anon10
m	includeheaders/types/atoms.h	/^  real          m,q;            \/* Mass and charge                      *\/$/;"	m	struct:__anon85
mA	includeheaders/types/group.h	/^  double  mA;           \/* Mass for topology A		                *\/$/;"	m	struct:__anon168
mB	includeheaders/types/atoms.h	/^  real          mB,qB;          \/* Mass and charge for Free Energy calc *\/$/;"	m	struct:__anon85
mB	includeheaders/types/group.h	/^  double  mB;           \/* Mass for topology B		                *\/$/;"	m	struct:__anon168
m_add	includeheaders/vec.h	/^static gmx_inline void m_add(matrix a,matrix b,matrix dest)$/;"	f
m_inv	includeheaders/vec.h	/^static gmx_inline void m_inv(matrix src,matrix dest)$/;"	f
m_inv_ur0	includeheaders/vec.h	/^static gmx_inline void m_inv_ur0(matrix src,matrix dest)$/;"	f
m_rveccopy	includeheaders/vec.h	/^static void m_rveccopy(int dim, rvec *a, rvec *b)$/;"	f
m_sub	includeheaders/vec.h	/^static gmx_inline void m_sub(matrix a,matrix b,matrix dest)$/;"	f
main	g_sa_analyze.c	/^int main(int argc,char *argv[])$/;"	f
main	g_sa_encode.c	/^int main(int argc,char *argv[])$/;"	f
map	includeheaders/types/matrix.h	/^  t_mapping *map;$/;"	m	struct:__anon94
mass	includeheaders/molfile_plugin.h	/^  float mass;         \/**< optional mass value                   *\/$/;"	m	struct:__anon72
massA	includeheaders/types/mdatom.h	/^  real          *massA,*massB,*massT,*invmass;$/;"	m	struct:__anon150
massB	includeheaders/types/mdatom.h	/^  real          *massA,*massB,*massT,*invmass;$/;"	m	struct:__anon150
massT	includeheaders/types/mdatom.h	/^  real          *massA,*massB,*massT,*invmass;$/;"	m	struct:__anon150
matrix	includeheaders/types/matrix.h	/^  t_matelmt **matrix;$/;"	m	struct:__anon94
matrix	legacyheaders/types/simple.h	/^typedef real            matrix[DIM][DIM];$/;"	t
matrix_convert	includeheaders/vec.h	/^static void matrix_convert(matrix box, rvec vec, rvec angle)$/;"	f
max	legacyheaders/macros.h	68;"	d
max	partition/score.c	/^float max(float a, float b)$/;"	f
max_cutoff2	includeheaders/types/pbc.h	/^  real   max_cutoff2;$/;"	m	struct:__anon100
maxlen	includeheaders/types/nblist.h	/^  int             maxlen;       \/* maxnr of j atoms for a single i atom  *\/$/;"	m	struct:__anon96
maxnri	includeheaders/types/nblist.h	/^  int             nri,maxnri;   \/* Current\/max number of i particles	 *\/$/;"	m	struct:__anon96
maxnrj	includeheaders/types/nblist.h	/^  int             nrj,maxnrj;   \/* Current\/max number of j particles	 *\/$/;"	m	struct:__anon96
maxres_renum	includeheaders/types/topology.h	/^  int            maxres_renum;  \/* Parameter for residue numbering      *\/$/;"	m	struct:__anon144
maxresnr	includeheaders/types/topology.h	/^  int            maxresnr;      \/* The maximum residue number in moltype *\/$/;"	m	struct:__anon144
memory	includeheaders/molfile_plugin.h	/^  int memory;            \/**< amount of memory used in Mbyte. XXX:? *\/ $/;"	m	struct:__anon78
merge	general/mergesort.c	/^void merge(unsigned char *input, int left, int right, int length, int midpoint, size_t esize, unsigned char *scratch, int (*compare) (const void *key1, const void *key2)){$/;"	f
mergeSort	general/mergesort.c	/^void mergeSort(unsigned char *input, int left, int right, size_t esize, unsigned char *scratch, int (*compare) (const void *key1, const void *key2))$/;"	f
mhbox_diag	includeheaders/types/pbc.h	/^  rvec   mhbox_diag;$/;"	m	struct:__anon100
min	legacyheaders/macros.h	65;"	d
mmul	includeheaders/vec.h	/^static gmx_inline void mmul(matrix a,matrix b,matrix dest)$/;"	f
mmul_ur0	includeheaders/vec.h	/^static gmx_inline void mmul_ur0(matrix a,matrix b,matrix dest)$/;"	f
mod	includeheaders/vec.h	870;"	d
molblock	includeheaders/types/topology.h	/^  gmx_molblock_t *molblock;$/;"	m	struct:__anon144
molfile_atom_t	includeheaders/molfile_plugin.h	/^} molfile_atom_t;$/;"	t	typeref:struct:__anon72
molfile_graphics_t	includeheaders/molfile_plugin.h	/^} molfile_graphics_t;$/;"	t	typeref:struct:__anon82
molfile_graphics_type	includeheaders/molfile_plugin.h	/^enum molfile_graphics_type {$/;"	g
molfile_metadata_t	includeheaders/molfile_plugin.h	/^} molfile_metadata_t;$/;"	t	typeref:struct:__anon71
molfile_plugin_t	includeheaders/molfile_plugin.h	/^} molfile_plugin_t;$/;"	t	typeref:struct:__anon83
molfile_qm_basis_t	includeheaders/molfile_plugin.h	/^} molfile_qm_basis_t;$/;"	t	typeref:struct:__anon77
molfile_qm_charge_type	includeheaders/molfile_plugin.h	/^enum molfile_qm_charge_type {$/;"	g
molfile_qm_hessian_t	includeheaders/molfile_plugin.h	/^} molfile_qm_hessian_t;$/;"	t	typeref:struct:__anon76
molfile_qm_metadata_t	includeheaders/molfile_plugin.h	/^} molfile_qm_metadata_t;$/;"	t	typeref:struct:__anon75
molfile_qm_sysinfo_t	includeheaders/molfile_plugin.h	/^} molfile_qm_sysinfo_t;$/;"	t	typeref:struct:__anon78
molfile_qm_t	includeheaders/molfile_plugin.h	/^} molfile_qm_t;$/;"	t	typeref:struct:__anon81
molfile_qm_timestep_metadata	includeheaders/molfile_plugin.h	/^typedef struct molfile_qm_timestep_metadata {$/;"	s
molfile_qm_timestep_metadata_t	includeheaders/molfile_plugin.h	/^} molfile_qm_timestep_metadata_t;$/;"	t	typeref:struct:molfile_qm_timestep_metadata
molfile_qm_timestep_t	includeheaders/molfile_plugin.h	/^} molfile_qm_timestep_t;$/;"	t	typeref:struct:__anon80
molfile_qm_wavefunc_type	includeheaders/molfile_plugin.h	/^enum molfile_qm_wavefunc_type {$/;"	g
molfile_qm_wavefunction_t	includeheaders/molfile_plugin.h	/^} molfile_qm_wavefunction_t;$/;"	t	typeref:struct:__anon79
molfile_timestep_metadata	includeheaders/molfile_plugin.h	/^typedef struct molfile_timestep_metadata {$/;"	s
molfile_timestep_metadata_t	includeheaders/molfile_plugin.h	/^} molfile_timestep_metadata_t;$/;"	t	typeref:struct:molfile_timestep_metadata
molfile_timestep_t	includeheaders/molfile_plugin.h	/^} molfile_timestep_t;$/;"	t	typeref:struct:__anon73
molfile_volumetric_t	includeheaders/molfile_plugin.h	/^} molfile_volumetric_t;$/;"	t	typeref:struct:__anon74
mols	includeheaders/types/topology.h	/^  t_block        mols;          \/* The molecules                        *\/$/;"	m	struct:__anon144
mols	includeheaders/types/topology.h	/^  t_block       mols;           \/* The molecules                        *\/$/;"	m	struct:__anon146
moltype	includeheaders/types/topology.h	/^  gmx_moltype_t  *moltype;$/;"	m	struct:__anon144
morse	includeheaders/types/idef.h	/^  struct {real b0,cb,beta;                        	  } morse;$/;"	m	union:__anon7	typeref:struct:__anon7::__anon27
mpi_comm_ensemble	includeheaders/types/fcdata.h	/^  MPI_Comm mpi_comm_ensemble; \/* For ensemble averaging                   *\/$/;"	m	struct:__anon63
mref	includeheaders/types/fcdata.h	/^  real *mref;         \/* The masses of the reference atoms                  *\/$/;"	m	struct:__anon64
msmul	includeheaders/vec.h	/^static gmx_inline void msmul(matrix m1,real r1,matrix dest)$/;"	f
mtmul	includeheaders/vec.h	/^static gmx_inline void mtmul(matrix a,matrix b,matrix dest)$/;"	f
mtx	includeheaders/types/nblist.h	/^  void *          mtx;          \/* mutex to lock the counter             *\/$/;"	m	struct:__anon96
mu_tot	includeheaders/types/forcerec.h	/^  rvec   mu_tot[2];$/;"	m	struct:__anon157
mult	includeheaders/types/idef.h	/^  struct {real phiA,cpA;int mult;real phiB,cpB;            } pdihs;$/;"	m	struct:__anon7::__anon24
multiplicity	includeheaders/molfile_plugin.h	/^  int   multiplicity;       \/**< spin multiplicity of the state, zero if unknown *\/$/;"	m	struct:__anon79
mutual_information	statistics/probability.c	/^float mutual_information(ProbMatrix *probMat, Set *codeSet, Set *altCodeSet) {$/;"	f
mvcos	includeheaders/types/group.h	/^  real    mvcos;        \/* The cos momenta of home particles            *\/$/;"	m	struct:__anon169
mvcos	includeheaders/types/state.h	/^  real     mvcos;$/;"	m	struct:__anon55
mvmul	includeheaders/vec.h	/^static gmx_inline void mvmul(matrix a,const rvec src,rvec dest)$/;"	f
mvmul_ur0	includeheaders/vec.h	/^static gmx_inline void mvmul_ur0(matrix a,const rvec src,rvec dest)$/;"	f
my_rank	g_sa_analyze.c	/^int my_rank = 0;$/;"	v
my_rank	g_sa_analyze.c	/^int my_rank; \/* rank of 'this' node *\/$/;"	v
n	includeheaders/types/forcerec.h	/^  int  n;         \/* n+1 is the number of points *\/$/;"	m	struct:__anon151
n	includeheaders/types/idef.h	/^  int  n;         \/* n+1 is the number of points *\/$/;"	m	struct:__anon45
n	includeheaders/types/idef.h	/^  struct {int  n; real a;                                 } vsiten;   $/;"	m	struct:__anon7::__anon31
n	includeheaders/types/inputrec.h	/^  int  n;		\/* Number of terms				*\/$/;"	m	struct:__anon158
n	includeheaders/types/nrnb.h	/^  double n[eNRNB];$/;"	m	struct:__anon70
n	includeheaders/types/nsgrid.h	/^  ivec	 n;	        \/* The dimension of the grid		*\/$/;"	m	struct:__anon148
nChargePerturbed	includeheaders/types/mdatom.h	/^  int           nChargePerturbed;$/;"	m	struct:__anon150
nElements	statistics/probability.h	/^    int nElements; \/* number of elements *\/$/;"	m	struct:__anon51
nFragment	structure/fragment_colour.h	/^	int nFragment;$/;"	m	struct:__anon139
nFragment	structure/fragments.h	/^    int nFragment;$/;"	m	struct:__anon5
nFragment	structure/fragments_coords.h	/^    int nFragment;$/;"	m	struct:__anon66
nFragmentVector	structure/fragment_colour.c	/^int nFragmentVector[] = {25};$/;"	v
nFreeze	includeheaders/types/inputrec.h	/^  ivec    *nFreeze;	         \/* Freeze the group in each direction ?    *\/$/;"	m	struct:__anon160
nInstances	partition/value.h	/^    int nInstances; \/* number of values *\/$/;"	m	struct:__anon166
nLabels	partition/label.h	/^    int nLabels; \/* number of labels *\/$/;"	m	struct:__anon68
nLincsIter	includeheaders/types/inputrec.h	/^  int  nLincsIter;      \/* Number of iterations in the final Lincs step *\/$/;"	m	struct:__anon164
nMassPerturbed	includeheaders/types/mdatom.h	/^  int           nMassPerturbed;$/;"	m	struct:__anon150
nObjects	partition/score.h	/^    int nObjects; \/* number of objects *\/$/;"	m	struct:__anon137
nPerturbed	includeheaders/types/mdatom.h	/^  int           nPerturbed;$/;"	m	struct:__anon150
nProjOrder	includeheaders/types/inputrec.h	/^  int  nProjOrder;      \/* Order of the LINCS Projection Algorithm      *\/$/;"	m	struct:__anon164
nSequences	sequence/sequence.h	/^    int nSequences; \/* number of elements *\/$/;"	m	struct:__anon149
nStructuralAlphabets	structure/fragment_colour.c	/^int nStructuralAlphabets = 1;$/;"	v
nWatMol	includeheaders/types/forcerec.h	/^  int  nWatMol;$/;"	m	struct:__anon157
n_flambda	includeheaders/types/inputrec.h	/^  int  n_flambda;       \/* The number of foreign lambda points          *\/$/;"	m	struct:__anon164
n_lambda	includeheaders/types/forcerec.h	/^  int    n_lambda;$/;"	m	struct:__anon155
n_tpi	includeheaders/types/forcerec.h	/^  gmx_bool n_tpi;$/;"	m	struct:__anon157
nalloc	includeheaders/types/idef.h	/^  int nalloc;$/;"	m	struct:__anon39
nalloc	includeheaders/types/mdatom.h	/^  int           nalloc;$/;"	m	struct:__anon150
nalloc	includeheaders/types/state.h	/^  int           nalloc; \/* Allocation size for x, v and sd_x when !=NULL*\/$/;"	m	struct:__anon58
nalloc_a	includeheaders/types/block.h	/^  int nalloc_a;                 \/* The allocation size for a            *\/$/;"	m	struct:__anon98
nalloc_dadx	includeheaders/types/forcerec.h	/^  int   nalloc_dadx; \/* Allocated size of dadx *\/$/;"	m	struct:__anon157
nalloc_force	includeheaders/types/forcerec.h	/^  int nalloc_force;$/;"	m	struct:__anon157
nalloc_index	includeheaders/types/block.h	/^  int nalloc_index;             \/* The allocation size for index        *\/$/;"	m	struct:__anon97
nalloc_index	includeheaders/types/block.h	/^  int nalloc_index;             \/* The allocation size for index        *\/$/;"	m	struct:__anon98
nalloc_loc	includeheaders/types/inputrec.h	/^  int        nalloc_loc; \/* Allocation size for ind_loc and weight_loc *\/ $/;"	m	struct:__anon162
name	includeheaders/molfile_plugin.h	/^  char name[16];      \/**< required atom name string             *\/$/;"	m	struct:__anon72
name	includeheaders/types/atoms.h	/^  char          **name;         \/* Pointer to the residue name          *\/$/;"	m	struct:__anon86
name	includeheaders/types/ifunc.h	/^  const char *name;	\/* the name of this function			*\/$/;"	m	struct:__anon171
name	includeheaders/types/topology.h	/^  char           **name;        \/* Name of the topology                 *\/$/;"	m	struct:__anon144
name	includeheaders/types/topology.h	/^  char          **name;         \/* Name of the molecule type  	        *\/$/;"	m	struct:__anon141
name	includeheaders/types/topology.h	/^  char          **name;         \/* Name of the topology                 *\/$/;"	m	struct:__anon146
name	structure/pdb_structure.h	/^    char *name; \/* sequence name *\/$/;"	m	struct:__anon47
nat	includeheaders/types/group.h	/^  int     nat;		\/* Number of atoms in this group		*\/$/;"	m	struct:__anon168
nat	includeheaders/types/inputrec.h	/^  int        nat;      \/* Number of atoms in the pull group *\/$/;"	m	struct:__anon162
nat_loc	includeheaders/types/inputrec.h	/^  int        nat_loc;  \/* Number of local pull atoms *\/$/;"	m	struct:__anon162
natom	sequence/encode.h	/^    int natom;$/;"	m	struct:__anon1
natom	structure/pdb_structure.h	/^	int natom; \/* number of selected (CA) atoms *\/$/;"	m	struct:__anon49
natoms	includeheaders/types/state.h	/^  int           natoms;$/;"	m	struct:__anon58
natoms	includeheaders/types/topology.h	/^  int            natoms;$/;"	m	struct:__anon144
natoms	includeheaders/types/trx.h	/^  int  natoms;    \/* number of atoms (atoms, x, v, f) *\/$/;"	m	struct:trxframe
natoms_force	includeheaders/types/forcerec.h	/^  int natoms_force;$/;"	m	struct:__anon157
natoms_force_constr	includeheaders/types/forcerec.h	/^  int natoms_force_constr;$/;"	m	struct:__anon157
natoms_mol	includeheaders/types/topology.h	/^  int           natoms_mol;     \/* The number of atoms in one molecule    *\/$/;"	m	struct:__anon142
nbfgscorr	includeheaders/types/inputrec.h	/^  int  nbfgscorr;       \/* Number of corrections to the hessian to keep *\/$/;"	m	struct:__anon164
nbfp	includeheaders/types/forcerec.h	/^  real *nbfp;$/;"	m	struct:__anon157
nblists	includeheaders/types/forcerec.h	/^  t_nblists *nblists;$/;"	m	struct:__anon157
nbound	includeheaders/types/graph.h	/^  int      nbound;	\/* The number of nodes with edges		*\/$/;"	m	struct:__anon62
nboundeddim	includeheaders/types/nsgrid.h	/^  int    nboundeddim;   \/* The number of bounded dimensions     *\/$/;"	m	struct:__anon148
ncart	includeheaders/molfile_plugin.h	/^  int ncart;                    \/**< number cartesian coordinates *\/$/;"	m	struct:__anon75
ncells	includeheaders/types/nsgrid.h	/^  int    ncells;	\/* Total number of cells		*\/$/;"	m	struct:__anon148
ncg_force	includeheaders/types/forcerec.h	/^  int ncg_force;$/;"	m	struct:__anon157
ncg_gl	includeheaders/types/state.h	/^  int           ncg_gl; \/* The number of local charge groups            *\/$/;"	m	struct:__anon58
ncg_ideal	includeheaders/types/nsgrid.h	/^  int    ncg_ideal;     \/* The ideal number of cg's per cell    *\/$/;"	m	struct:__anon148
ncpddc	includeheaders/types/nsgrid.h	/^  ivec   ncpddc;        \/* The number of cells per DD cell      *\/$/;"	m	struct:__anon148
ndelta	includeheaders/types/inputrec.h	/^  int  ndelta;		\/* number of cells per rlong			*\/$/;"	m	struct:__anon164
ndh	includeheaders/types/state.h	/^    int  *ndh;          \/* the number in each energy difference list *\/$/;"	m	struct:__anon56
ndim_ePBC	includeheaders/types/pbc.h	/^  int    ndim_ePBC;$/;"	m	struct:__anon100
ndisrepairs	includeheaders/types/state.h	/^  int  ndisrepairs;    \/* The number of distance restraints                *\/$/;"	m	struct:__anon54
nedge	includeheaders/types/graph.h	/^  int      *nedge;	\/* For each node the number of edges		*\/$/;"	m	struct:__anon62
negc	includeheaders/types/graph.h	/^  int      negc;         $/;"	m	struct:__anon62
nener	includeheaders/types/forcerec.h	/^  int  nener;        \/* The number of energy group pairs     *\/$/;"	m	struct:__anon154
nener	includeheaders/types/state.h	/^  int        nener;        \/* Number of energy terms in two previous arrays *\/$/;"	m	struct:__anon57
nenergrp	includeheaders/types/mdatom.h	/^  int           nenergrp;$/;"	m	struct:__anon150
nex	includeheaders/types/fcdata.h	/^  int    nex;         \/* The number of experiments                          *\/$/;"	m	struct:__anon64
next	includeheaders/types/symtab.h	/^  struct symbuf *next;$/;"	m	struct:symbuf	typeref:struct:symbuf::symbuf
ngQM	includeheaders/types/inputrec.h	/^  int     ngQM;         \/* nr of QM groups                              *\/$/;"	m	struct:__anon160
ngacc	includeheaders/types/group.h	/^  int          ngacc;           \/* The number of acceleration groups    *\/$/;"	m	struct:__anon170
ngacc	includeheaders/types/inputrec.h	/^  int     ngacc;                 \/* # Accelerate groups                     *\/$/;"	m	struct:__anon160
ngener	includeheaders/types/inputrec.h	/^  int     ngener;	         \/* # Ener groups			    *\/$/;"	m	struct:__anon160
ngfrz	includeheaders/types/inputrec.h	/^  int     ngfrz;                 \/* # Freeze groups                         *\/$/;"	m	struct:__anon160
ngrid	includeheaders/types/idef.h	/^	int ngrid;            \/* Number of allocated cmap (cmapdata_t ) grids *\/$/;"	m	struct:__anon41
ngrp	includeheaders/types/inputrec.h	/^  int        ngrp;        \/* number of groups *\/$/;"	m	struct:__anon163
ngrpname	includeheaders/types/topology.h	/^  int            ngrpname;      \/* Number of groupnames                 *\/$/;"	m	struct:__anon143
ngrpnr	includeheaders/types/topology.h	/^  int            ngrpnr[egcNR];$/;"	m	struct:__anon143
ngtc	includeheaders/types/group.h	/^  int          ngtc;            \/* The number of T-coupling groups      *\/$/;"	m	struct:__anon170
ngtc	includeheaders/types/inputrec.h	/^  int     ngtc;                  \/* # T-Coupl groups                        *\/$/;"	m	struct:__anon160
ngtc	includeheaders/types/state.h	/^  int           ngtc;$/;"	m	struct:__anon58
nhchainlength	includeheaders/types/inputrec.h	/^  int     nhchainlength;         \/* # of nose-hoover chains per group       *\/$/;"	m	struct:__anon160
nhchainlength	includeheaders/types/state.h	/^  int           nhchainlength; \/* length of each nose-hoover chain      *\/$/;"	m	struct:__anon58
nhpres_vxi	includeheaders/types/state.h	/^  double        *nhpres_vxi; \/* for Nose-Hoover pcoupl for barostat     *\/$/;"	m	struct:__anon58
nhpres_xi	includeheaders/types/state.h	/^  double        *nhpres_xi;  \/* for Nose-Hoover pcoupl for barostat     *\/$/;"	m	struct:__anon58
nimag	includeheaders/molfile_plugin.h	/^  int nimag;                    \/**< number of imaginary modes *\/$/;"	m	struct:__anon75
nintcoords	includeheaders/molfile_plugin.h	/^  int nintcoords;               \/**< number internal coordinates *\/$/;"	m	struct:__anon75
niter	includeheaders/types/inputrec.h	/^  int  niter;           \/* Number of iterations for convergence of      *\/$/;"	m	struct:__anon164
nkx	includeheaders/types/inputrec.h	/^  int  nkx,nky,nkz;     \/* number of k vectors in each spatial dimension*\/$/;"	m	struct:__anon164
nky	includeheaders/types/inputrec.h	/^  int  nkx,nky,nkz;     \/* number of k vectors in each spatial dimension*\/$/;"	m	struct:__anon164
nkz	includeheaders/types/inputrec.h	/^  int  nkx,nky,nkz;     \/* number of k vectors in each spatial dimension*\/$/;"	m	struct:__anon164
nlist_lr	includeheaders/types/forcerec.h	/^  t_nblist nlist_lr[eNL_NR];$/;"	m	struct:__anon152
nlist_sr	includeheaders/types/forcerec.h	/^  t_nblist nlist_sr[eNL_NR];$/;"	m	struct:__anon152
nlr	includeheaders/types/forcerec.h	/^  int  nlr;$/;"	m	struct:__anon157
nm_ind	includeheaders/types/atoms.h	/^  int  *nm_ind;                 \/* Index in the group names             *\/$/;"	m	struct:__anon88
nmap	includeheaders/types/matrix.h	/^  int nmap;$/;"	m	struct:__anon94
nmol	includeheaders/types/topology.h	/^  int           nmol;           \/* The number of molecules in this block  *\/$/;"	m	struct:__anon142
nmolblock	includeheaders/types/topology.h	/^  int            nmolblock;$/;"	m	struct:__anon144
nmoltype	includeheaders/types/topology.h	/^  int            nmoltype;$/;"	m	struct:__anon144
nnblists	includeheaders/types/forcerec.h	/^  int  nnblists;$/;"	m	struct:__anon157
nndh	includeheaders/types/state.h	/^    int nndh;           \/* the number of energy difference lists *\/$/;"	m	struct:__anon56
nnhpres	includeheaders/types/state.h	/^  int           nnhpres;$/;"	m	struct:__anon58
nnodes	includeheaders/types/graph.h	/^  int      nnodes;	\/* The number of nodes				*\/$/;"	m	struct:__anon62
nodes	g_sa_analyze.c	/^int nodes = 1;$/;"	v
nodes	g_sa_analyze.c	/^int nodes; \/* number of nodes *\/$/;"	v
norire_Dtav	includeheaders/types/state.h	/^  int  norire_Dtav;    \/* The number of matrix element in dtav (npair*5)   *\/$/;"	m	struct:__anon54
norm	includeheaders/vec.h	/^static gmx_inline real norm(const rvec a)$/;"	f
norm2	includeheaders/vec.h	/^static gmx_inline real norm2(const rvec a)$/;"	f
normalmodes	includeheaders/molfile_plugin.h	/^  float *normalmodes;   \/**< matrix(ncart*ncart) of normal modes  *\/$/;"	m	struct:__anon76
nosehoover_vxi	includeheaders/types/state.h	/^  double        *nosehoover_vxi; \/* for N-H tcoupl (ngtc)               *\/$/;"	m	struct:__anon58
nosehoover_xi	includeheaders/types/state.h	/^  double        *nosehoover_xi;  \/* for Nose-Hoover tcoupl (ngtc)       *\/$/;"	m	struct:__anon58
not_ok	includeheaders/types/trx.h	/^  int  not_ok;    \/* integrity flags (see statutil.h  *\/$/;"	m	struct:trxframe
npair	includeheaders/types/fcdata.h	/^  int  npair;         \/* The number of distance restraint pairs           *\/$/;"	m	struct:__anon63
npair	includeheaders/types/idef.h	/^  struct {real low,up1,up2,kfac;int type,label,npair;     } disres; $/;"	m	struct:__anon7::__anon32
npbcdim	includeheaders/types/inputrec.h	/^  int        npbcdim;     \/* do pbc in dims 0 <= dim < npbcdim *\/$/;"	m	struct:__anon163
npbcdim	includeheaders/types/nsgrid.h	/^  int    npbcdim;       \/* The number of dimensions with pbc    *\/$/;"	m	struct:__anon148
nposres_xA	includeheaders/types/topology.h	/^  int           nposres_xA;     \/* The number of posres coords for top A  *\/$/;"	m	struct:__anon142
nposres_xB	includeheaders/types/topology.h	/^  int           nposres_xB;     \/* The number of posres coords for top B  *\/$/;"	m	struct:__anon142
nproc	includeheaders/molfile_plugin.h	/^  int nproc;             \/**< number of processors used. XXX:? *\/$/;"	m	struct:__anon78
nr	includeheaders/types/atoms.h	/^  int           nr;             \/* Nr of atoms                          *\/$/;"	m	struct:__anon89
nr	includeheaders/types/atoms.h	/^  int           nr;             \/* Residue number                       *\/$/;"	m	struct:__anon86
nr	includeheaders/types/atoms.h	/^  int           nr;             \/* number of atomtypes                          *\/$/;"	m	struct:__anon90
nr	includeheaders/types/atoms.h	/^  int  nr;                      \/* Number of different groups           *\/$/;"	m	struct:__anon88
nr	includeheaders/types/block.h	/^  int nr;			\/* The number of blocks			*\/$/;"	m	struct:__anon97
nr	includeheaders/types/block.h	/^  int nr;			\/* The number of blocks			*\/$/;"	m	struct:__anon98
nr	includeheaders/types/fcdata.h	/^  int    nr;          \/* The number of orientation restraints               *\/$/;"	m	struct:__anon64
nr	includeheaders/types/idef.h	/^  int nr;$/;"	m	struct:__anon39
nr	includeheaders/types/mdatom.h	/^  int           nr;$/;"	m	struct:__anon150
nr	includeheaders/types/nsgrid.h	/^  int	 nr;		\/* Total number of charge groups	*\/$/;"	m	struct:__anon148
nr	includeheaders/types/symtab.h	/^  int      nr;$/;"	m	struct:__anon172
nr_alloc	includeheaders/types/nsgrid.h	/^  int    nr_alloc;      \/* Allocation size of cell_index and a  *\/$/;"	m	struct:__anon148
nr_nonperturbed	includeheaders/types/idef.h	/^  int nr_nonperturbed;$/;"	m	struct:__anon39
nra	includeheaders/types/block.h	/^  int nra;			\/* The number of atoms 			*\/$/;"	m	struct:__anon98
nra	includeheaders/types/nsgrid.h	/^  int    *nra;		\/* The number of entries in a cell	*\/$/;"	m	struct:__anon148
nratoms	includeheaders/types/ifunc.h	/^  int     nratoms;	\/* nr of atoms needed for this function		*\/$/;"	m	struct:__anon171
nrdf	includeheaders/types/inputrec.h	/^  real    *nrdf;	         \/* Nr of degrees of freedom in a group	    *\/$/;"	m	struct:__anon160
nref	includeheaders/types/fcdata.h	/^  int  nref;          \/* The number of atoms for the fit                    *\/$/;"	m	struct:__anon64
nres	includeheaders/types/atoms.h	/^  int           nres;           \/* The number of resinfo entries        *\/$/;"	m	struct:__anon89
nres	includeheaders/types/fcdata.h	/^  int  nres;          \/* The number of distance restraints                *\/$/;"	m	struct:__anon63
nrfpA	includeheaders/types/ifunc.h	/^  int     nrfpA,nrfpB;  \/* number of parameters for this function.      *\/$/;"	m	struct:__anon171
nrfpB	includeheaders/types/ifunc.h	/^  int     nrfpA,nrfpB;  \/* number of parameters for this function.      *\/$/;"	m	struct:__anon171
nri	includeheaders/types/nblist.h	/^  int             nri,maxnri;   \/* Current\/max number of i particles	 *\/$/;"	m	struct:__anon96
nrj	includeheaders/types/nblist.h	/^  int             nrj,maxnrj;   \/* Current\/max number of j particles	 *\/$/;"	m	struct:__anon96
nrnb_ind	includeheaders/types/ifunc.h	/^  int     nrnb_ind;     \/* index for nrnb (-1 if unknown)               *\/$/;"	m	struct:__anon171
nrng	includeheaders/types/state.h	/^  int           nrng;$/;"	m	struct:__anon58
nrngi	includeheaders/types/state.h	/^  int           nrngi;$/;"	m	struct:__anon58
ns	includeheaders/types/forcerec.h	/^  gmx_ns_t ns;$/;"	m	struct:__anon157
ns_type	includeheaders/types/inputrec.h	/^  int  ns_type;		\/* which ns method should we use?               *\/$/;"	m	struct:__anon164
nstcalcenergy	includeheaders/types/inputrec.h	/^  int  nstcalcenergy;	\/* fequency of energy calc. and T\/P coupl. upd.	*\/$/;"	m	struct:__anon164
nstcgsteep	includeheaders/types/inputrec.h	/^  int  nstcgsteep;      \/* number of steps after which a steepest       *\/$/;"	m	struct:__anon164
nstcheckpoint	includeheaders/types/inputrec.h	/^  int nstcheckpoint;    \/* checkpointing frequency                      *\/$/;"	m	struct:__anon164
nstcomm	includeheaders/types/inputrec.h	/^  int  nstcomm;		\/* number of steps after which center of mass	*\/$/;"	m	struct:__anon164
nstdhdl	includeheaders/types/inputrec.h	/^  int  nstdhdl;         \/* The frequency for writing to dhdl.xvg        *\/$/;"	m	struct:__anon164
nstdisreout	includeheaders/types/inputrec.h	/^  int  nstdisreout;     \/* frequency of writing pair distances to enx   *\/ $/;"	m	struct:__anon164
nstenergy	includeheaders/types/inputrec.h	/^  int nstenergy;	\/* number of steps after which energies printed *\/$/;"	m	struct:__anon164
nsteps	includeheaders/types/inputrec.h	/^  gmx_large_int_t nsteps;	\/* number of steps to be taken			*\/$/;"	m	struct:__anon164
nsteps	includeheaders/types/state.h	/^  gmx_large_int_t nsteps;       \/* The number of steps in the history            *\/$/;"	m	struct:__anon57
nsteps_sim	includeheaders/types/state.h	/^  gmx_large_int_t nsteps_sim;   \/* The number of steps in ener_sum_sim      *\/$/;"	m	struct:__anon57
nstfout	includeheaders/types/inputrec.h	/^  int        nstfout;     \/* Output frequency for pull f *\/$/;"	m	struct:__anon163
nstfout	includeheaders/types/inputrec.h	/^  int nstfout;		\/* id. for F					*\/$/;"	m	struct:__anon164
nstgbradii	includeheaders/types/inputrec.h	/^  int  nstgbradii;      \/* Frequency of updating Generalized Born radii *\/$/;"	m	struct:__anon164
nstlist	includeheaders/types/inputrec.h	/^  int  nstlist;		\/* number of steps before pairlist is generated	*\/$/;"	m	struct:__anon164
nstlog	includeheaders/types/inputrec.h	/^  int nstlog;		\/* number of steps after which print to logfile	*\/$/;"	m	struct:__anon164
nstorireout	includeheaders/types/inputrec.h	/^  int  nstorireout;     \/* frequency of writing tr(SD) to enx           *\/ $/;"	m	struct:__anon164
nstpcouple	includeheaders/types/inputrec.h	/^  int  nstpcouple;      \/* interval in steps for pressure coupling      *\/$/;"	m	struct:__anon164
nsttcouple	includeheaders/types/inputrec.h	/^  int  nsttcouple;      \/* interval in steps for temperature coupling   *\/$/;"	m	struct:__anon164
nstvout	includeheaders/types/inputrec.h	/^  int nstvout;		\/* id. for V					*\/$/;"	m	struct:__anon164
nstxout	includeheaders/types/inputrec.h	/^  int        nstxout;     \/* Output frequency for pull x *\/$/;"	m	struct:__anon163
nstxout	includeheaders/types/inputrec.h	/^  int nstxout;		\/* number of steps after which X is output	*\/$/;"	m	struct:__anon164
nstxtcout	includeheaders/types/inputrec.h	/^  int nstxtcout;	\/* id. for compressed trj (.xtc)		*\/$/;"	m	struct:__anon164
nsum	includeheaders/types/state.h	/^  gmx_large_int_t nsum;         \/* The nr. of steps in the ener_ave and ener_sum *\/$/;"	m	struct:__anon57
nsum_sim	includeheaders/types/state.h	/^  gmx_large_int_t nsum_sim;     \/* The number of frames in ener_sum_sim     *\/$/;"	m	struct:__anon57
nsystems	includeheaders/types/fcdata.h	/^  int  nsystems;      \/* The number of systems for ensemble averaging     *\/$/;"	m	struct:__anon63
ntric_vec	includeheaders/types/pbc.h	/^  int    ntric_vec;$/;"	m	struct:__anon100
ntype	includeheaders/types/forcerec.h	/^  int  ntype; \/* Number of atom types *\/$/;"	m	struct:__anon157
ntypes	includeheaders/types/idef.h	/^  int        ntypes;$/;"	m	struct:__anon42
ntypes	includeheaders/types/idef.h	/^  int ntypes;$/;"	m	struct:__anon44
nuc_charge	includeheaders/molfile_plugin.h	/^  double *nuc_charge;    \/**< array(natom) containing the nuclear charge of atom i *\/$/;"	m	struct:__anon78
num_basis_atoms	includeheaders/molfile_plugin.h	/^  int num_basis_atoms;          \/**< number of atoms in basis set *\/$/;"	m	struct:__anon75
num_basis_funcs	includeheaders/molfile_plugin.h	/^  int num_basis_funcs;          \/**< number of uncontracted basis functions in basis array *\/$/;"	m	struct:__anon75
num_charge_sets	includeheaders/molfile_plugin.h	/^  int num_charge_sets;            \/**< # of charge values per atom *\/$/;"	m	struct:molfile_qm_timestep_metadata
num_electrons	includeheaders/molfile_plugin.h	/^  int num_electrons;     \/**< number of electrons.    XXX: can be fractional in some DFT codes *\/$/;"	m	struct:__anon78
num_occupied_A	includeheaders/molfile_plugin.h	/^  int num_occupied_A;    \/**< number of occupied alpha orbitals *\/$/;"	m	struct:__anon78
num_occupied_B	includeheaders/molfile_plugin.h	/^  int num_occupied_B;    \/**< number of occupied beta orbitals *\/$/;"	m	struct:__anon78
num_orbitals_per_wavef	includeheaders/molfile_plugin.h	/^  int num_orbitals_per_wavef[MOLFILE_MAXWAVEPERTS]; \/**< # orbitals for each wavefunction *\/$/;"	m	struct:molfile_qm_timestep_metadata
num_prim_per_shell	includeheaders/molfile_plugin.h	/^  int *num_prim_per_shell;  \/**< number of shell primitives shell *\/$/;"	m	struct:__anon77
num_scfiter	includeheaders/molfile_plugin.h	/^  int num_scfiter;                     \/**< # scf iterations for this ts     *\/$/;"	m	struct:molfile_qm_timestep_metadata
num_shells	includeheaders/molfile_plugin.h	/^  int num_shells;               \/**< total number of atomic shells *\/$/;"	m	struct:__anon75
num_shells_per_atom	includeheaders/molfile_plugin.h	/^  int *num_shells_per_atom; \/**< number of shells per atom *\/$/;"	m	struct:__anon77
num_wavef	includeheaders/molfile_plugin.h	/^  int num_wavef ;                      \/**< # wavefunctions in this ts     *\/$/;"	m	struct:molfile_qm_timestep_metadata
nwall	includeheaders/types/forcerec.h	/^  int  nwall;$/;"	m	struct:__anon157
nwall	includeheaders/types/inputrec.h	/^  int  nwall;           \/* The number of walls                          *\/$/;"	m	struct:__anon164
nweight	includeheaders/types/inputrec.h	/^  int        nweight;  \/* The number of weights (0 or nat) *\/$/;"	m	struct:__anon162
nx	includeheaders/types/matrix.h	/^  int  nx,ny;$/;"	m	struct:__anon94
ny	includeheaders/types/matrix.h	/^  int  nx,ny;$/;"	m	struct:__anon94
object	partition/score.h	/^    Object *object; \/* input objects to partition *\/$/;"	m	struct:__anon137
objectCost	partition/object.c	/^float objectCost(Collection *collection, int i, int score_idx) {$/;"	f
objectCost_wrapper	partition/score.c	/^float objectCost_wrapper(Collection *collection, int i, int score_idx) {$/;"	f
obs	includeheaders/types/idef.h	/^  struct {int  ex,power,label; real c,obs,kfac;           } orires;$/;"	m	struct:__anon7::__anon34
occup	includeheaders/types/atoms.h	/^  real occup;                   \/* Occupancy                            *\/$/;"	m	struct:__anon87
occupancies	includeheaders/molfile_plugin.h	/^  float *occupancies;       \/**< orbital occupancies *\/$/;"	m	struct:__anon79
occupancy	includeheaders/molfile_plugin.h	/^  float occupancy;    \/**< optional occupancy value              *\/$/;"	m	struct:__anon72
oins	includeheaders/types/fcdata.h	/^  real   *oins;       \/* The calculated emsemble averaged orientations      *\/$/;"	m	struct:__anon64
oinsl	includeheaders/types/fcdata.h	/^  real   *oinsl;      \/* The calculated instantaneous orientations          *\/$/;"	m	struct:__anon64
omega	includeheaders/types/inputrec.h	/^  real omega;           \/* Frequency (1\/ps)                             *\/$/;"	m	struct:__anon159
open_file_read	includeheaders/molfile_plugin.h	/^  void *(* open_file_read)(const char *filepath, const char *filetype, $/;"	m	struct:__anon83
open_file_write	includeheaders/molfile_plugin.h	/^  void *(* open_file_write)(const char *filepath, const char *filetype, $/;"	m	struct:__anon83
opts	includeheaders/types/inputrec.h	/^  t_grpopts opts;	\/* Group options				*\/$/;"	m	struct:__anon164
orbital_energies	includeheaders/molfile_plugin.h	/^  float *orbital_energies;  \/**< list of orbital energies for wavefunction *\/$/;"	m	struct:__anon79
orbital_ids	includeheaders/molfile_plugin.h	/^  int   *orbital_ids;       \/**< orbital ID numbers; If NULL then VMD will$/;"	m	struct:__anon79
origin	includeheaders/molfile_plugin.h	/^  float origin[3];      \/**< origin: origin of volume (x=0, y=0, z=0 corner *\/$/;"	m	struct:__anon74
orire_Dtav	includeheaders/types/state.h	/^  real *orire_Dtav;    \/* The time averaged orientation tensors            *\/$/;"	m	struct:__anon54
orire_initf	includeheaders/types/state.h	/^  real orire_initf;    \/* The scaling factor for initializing the time av. *\/$/;"	m	struct:__anon54
orires	includeheaders/types/fcdata.h	/^  t_oriresdata orires;$/;"	m	struct:__anon65
orires	includeheaders/types/idef.h	/^  struct {int  ex,power,label; real c,obs,kfac;           } orires;$/;"	m	union:__anon7	typeref:struct:__anon7::__anon34
orires_fc	includeheaders/types/inputrec.h	/^  real orires_fc;	    \/* force constant for orientational restraints  *\/$/;"	m	struct:__anon164
orires_tau	includeheaders/types/inputrec.h	/^  real orires_tau;	    \/* time constant for memory function in orires 	*\/$/;"	m	struct:__anon164
os0	includeheaders/types/nsgrid.h	/^  rvec   *os0;$/;"	m	struct:__anon148
os1	includeheaders/types/nsgrid.h	/^  rvec   *os1;$/;"	m	struct:__anon148
otav	includeheaders/types/fcdata.h	/^  real   *otav;       \/* The calculated time and ensemble averaged orient.  *\/$/;"	m	struct:__anon64
out_f	includeheaders/types/inputrec.h	/^  FILE       *out_f;      \/* output file for pull data *\/$/;"	m	struct:__anon163
out_x	includeheaders/types/inputrec.h	/^  FILE       *out_x;      \/* output file for pull data *\/$/;"	m	struct:__anon163
output_env_t	includeheaders/types/oenv.h	/^typedef struct output_env *output_env_t;$/;"	t	typeref:struct:output_env
over_alloc_large	legacyheaders/typedefs.h	106;"	d
over_alloc_small	legacyheaders/typedefs.h	103;"	d
partition	partition/partition.c	/^void partition(Collection *collection, int n, int k, float *breaks,$/;"	f
partitionCost	partition/object.c	/^float partitionCost(Collection *collection, int i, int x, int score_idx) {$/;"	f
partitionCost_wrapper	partition/score.c	/^float partitionCost_wrapper(Collection *collection, int i, int x,$/;"	f
pbcatom	includeheaders/types/inputrec.h	/^  atom_id    pbcatom;  \/* The reference atom for pbc (global number) *\/$/;"	m	struct:__anon162
pdbinfo	includeheaders/types/atoms.h	/^  t_pdbinfo     *pdbinfo;       \/* PDB Information, such as aniso. Bfac *\/$/;"	m	struct:__anon89
pdihs	includeheaders/types/idef.h	/^  struct {real phiA,cpA;int mult;real phiB,cpB;            } pdihs;$/;"	m	union:__anon7	typeref:struct:__anon7::__anon24
phi	includeheaders/types/forcerec.h	/^  real *phi;$/;"	m	struct:__anon157
phi	includeheaders/types/idef.h	/^  struct {real phi,dphi,kfac;int label,power;             } dihres;  $/;"	m	struct:__anon7::__anon33
phi	includeheaders/types/inputrec.h	/^  real *phi;		\/* Phase angles					*\/$/;"	m	struct:__anon158
phiA	includeheaders/types/idef.h	/^  struct {real phiA,cpA;int mult;real phiB,cpB;            } pdihs;$/;"	m	struct:__anon7::__anon24
phiB	includeheaders/types/idef.h	/^  struct {real phiA,cpA;int mult;real phiB,cpB;            } pdihs;$/;"	m	struct:__anon7::__anon24
physical_time	includeheaders/molfile_plugin.h	/^  double physical_time; \/**< physical time point associated with this frame *\/$/;"	m	struct:__anon73
pi	includeheaders/types/idef.h	/^  struct {real sar,st,pi,gbr,bmlt;                        } gb;$/;"	m	struct:__anon7::__anon36
pme_order	includeheaders/types/inputrec.h	/^  int  pme_order;       \/* interpolation order for PME                  *\/$/;"	m	struct:__anon164
pmedata	includeheaders/types/forcerec.h	/^  gmx_pme_t pmedata;$/;"	m	struct:__anon157
polarize	includeheaders/types/idef.h	/^  struct {real alpha;                                      } polarize;$/;"	m	union:__anon7	typeref:struct:__anon7::__anon17
populate_probability_matrix	partition/value.c	/^void populate_probability_matrix(ProbMatrix *probMat, Data *data) {$/;"	f
pos	structure/pdb_structure.h	/^	Vec pos; \/* position vector *\/$/;"	m	struct:__anon48
pos0A	includeheaders/types/idef.h	/^  struct {real pos0A[DIM],fcA[DIM],pos0B[DIM],fcB[DIM];   } posres;$/;"	m	struct:__anon7::__anon28
pos0B	includeheaders/types/idef.h	/^  struct {real pos0A[DIM],fcA[DIM],pos0B[DIM],fcB[DIM];   } posres;$/;"	m	struct:__anon7::__anon28
posres	includeheaders/types/idef.h	/^  struct {real pos0A[DIM],fcA[DIM],pos0B[DIM],fcB[DIM];   } posres;$/;"	m	union:__anon7	typeref:struct:__anon7::__anon28
posres_com	includeheaders/types/forcerec.h	/^  rvec posres_com;$/;"	m	struct:__anon157
posres_com	includeheaders/types/inputrec.h	/^  rvec posres_com;      \/* The COM of the posres atoms                  *\/$/;"	m	struct:__anon164
posres_comB	includeheaders/types/forcerec.h	/^  rvec posres_comB;$/;"	m	struct:__anon157
posres_comB	includeheaders/types/inputrec.h	/^  rvec posres_comB;     \/* The B-state COM of the posres atoms          *\/$/;"	m	struct:__anon164
posres_xA	includeheaders/types/topology.h	/^  rvec          *posres_xA;     \/* The posres coords for top A            *\/$/;"	m	struct:__anon142
posres_xB	includeheaders/types/topology.h	/^  rvec          *posres_xB;     \/* The posres coords for top B            *\/$/;"	m	struct:__anon142
power	includeheaders/types/idef.h	/^  struct {int  ex,power,label; real c,obs,kfac;           } orires;$/;"	m	struct:__anon7::__anon34
power	includeheaders/types/idef.h	/^  struct {real phi,dphi,kfac;int label,power;             } dihres;  $/;"	m	struct:__anon7::__anon33
prec	includeheaders/types/trx.h	/^  real prec;      \/* precision of x, fraction of 1 nm *\/$/;"	m	struct:trxframe
pres_prev	includeheaders/types/state.h	/^  matrix        pres_prev; \/* Pressure of the previous step for pcoupl  *\/$/;"	m	struct:__anon58
print_float_matrix	general/matrix.c	/^void print_float_matrix(float **matrix, int nRow, int nCol)$/;"	f
print_force	includeheaders/types/forcerec.h	/^  real print_force;$/;"	m	struct:__anon157
print_int_matrix	general/matrix.c	/^void print_int_matrix(int **matrix, int nRow, int nCol)$/;"	f
print_partition_table	partition/partition.c	/^void print_partition_table(Collection *collection, LabelList *labelList, int k,$/;"	f
prob	statistics/probability.h	/^    float **prob; \/* probability matrix *\/$/;"	m	struct:__anon52
prob	statistics/probability.h	/^    float prob; \/* probability *\/$/;"	m	struct:__anon50
ptype	includeheaders/types/atoms.h	/^  int           ptype;          \/* Particle type                        *\/$/;"	m	struct:__anon85
ptype	includeheaders/types/mdatom.h	/^  unsigned short        *ptype;$/;"	m	struct:__anon150
pull	includeheaders/types/inputrec.h	/^  t_pull *pull;         \/* The data for center of mass pulling          *\/$/;"	m	struct:__anon164
q	includeheaders/types/atoms.h	/^  real          m,q;            \/* Mass and charge                      *\/$/;"	m	struct:__anon85
qB	includeheaders/types/atoms.h	/^  real          mB,qB;          \/* Mass and charge for Free Energy calc *\/$/;"	m	struct:__anon85
qangle	includeheaders/types/idef.h	/^  struct {real theta,c[5];                                 } qangle; $/;"	m	union:__anon7	typeref:struct:__anon7::__anon16
qi	includeheaders/types/idef.h	/^  struct {real fqq,qi,qj,c6,c12;	                   } ljc14;$/;"	m	struct:__anon7::__anon22
qi	includeheaders/types/idef.h	/^  struct {real qi,qj,c6,c12;		                   } ljcnb;$/;"	m	struct:__anon7::__anon23
qj	includeheaders/types/idef.h	/^  struct {real fqq,qi,qj,c6,c12;	                   } ljc14;$/;"	m	struct:__anon7::__anon22
qj	includeheaders/types/idef.h	/^  struct {real qi,qj,c6,c12;		                   } ljcnb;$/;"	m	struct:__anon7::__anon23
qr	includeheaders/types/forcerec.h	/^  t_QMMMrec    *qr;$/;"	m	struct:__anon157
qsum	includeheaders/types/forcerec.h	/^  double qsum[2];$/;"	m	struct:__anon157
r	includeheaders/types/forcerec.h	/^  real r;         \/* range of the table *\/$/;"	m	struct:__anon151
r	includeheaders/types/matrix.h	/^  real r,g,b;$/;"	m	struct:__anon91
r	structure/fragment_colour.h	/^  float r;$/;"	m	struct:__anon138
r13	includeheaders/types/idef.h	/^  struct {real theta,ktheta,r13,kUB;                       } u_b;$/;"	m	struct:__anon7::__anon15
r1e	includeheaders/types/idef.h	/^  struct {real r1e,r2e,krr;                                } cross_bb;$/;"	m	struct:__anon7::__anon13
r1e	includeheaders/types/idef.h	/^  struct {real r1e,r2e,r3e,krt;                            } cross_ba;$/;"	m	struct:__anon7::__anon14
r2e	includeheaders/types/idef.h	/^  struct {real r1e,r2e,krr;                                } cross_bb;$/;"	m	struct:__anon7::__anon13
r2e	includeheaders/types/idef.h	/^  struct {real r1e,r2e,r3e,krt;                            } cross_ba;$/;"	m	struct:__anon7::__anon14
r3e	includeheaders/types/idef.h	/^  struct {real r1e,r2e,r3e,krt;                            } cross_ba;$/;"	m	struct:__anon7::__anon14
rA	includeheaders/types/idef.h	/^  struct {real rA,krA,rB,krB;           	           } harmonic;$/;"	m	struct:__anon7::__anon9
rB	includeheaders/types/idef.h	/^  struct {real rA,krA,rB,krB;           	           } harmonic;$/;"	m	struct:__anon7::__anon9
rHH	includeheaders/types/idef.h	/^  struct {real al_x,al_y,al_z,rOH,rHH,rOD;                 } wpol;$/;"	m	struct:__anon7::__anon18
rOD	includeheaders/types/idef.h	/^  struct {real al_x,al_y,al_z,rOH,rHH,rOD;                 } wpol;$/;"	m	struct:__anon7::__anon18
rOH	includeheaders/types/idef.h	/^  struct {real al_x,al_y,al_z,rOH,rHH,rOD;                 } wpol;$/;"	m	struct:__anon7::__anon18
radius	includeheaders/molfile_plugin.h	/^  float radius;       \/**< optional radius value                 *\/$/;"	m	struct:__anon72
radius	includeheaders/types/atoms.h	/^  real         *radius;         \/* GBSA radius for each atomtype                *\/$/;"	m	struct:__anon90
random_column_mutual_information	g_sa_analyze.c	/^void random_column_mutual_information(float *ptr_meanMI, float *ptr_stdMI, float *ptr_pValueMI, float MIij, SeqSet *fastaSequenceSet, ProbMatrix *probMat, int icol, int jcol, int nSurrogates,	gsl_rng *rndGenerator) {$/;"	f
rate	includeheaders/types/inputrec.h	/^  real       rate;     \/* Rate of motion (nm\/ps) *\/$/;"	m	struct:__anon162
rbcA	includeheaders/types/idef.h	/^  struct {real rbcA[NR_RBDIHS], rbcB[NR_RBDIHS];          } rbdihs;$/;"	m	struct:__anon7::__anon29
rbcB	includeheaders/types/idef.h	/^  struct {real rbcA[NR_RBDIHS], rbcB[NR_RBDIHS];          } rbdihs;$/;"	m	struct:__anon7::__anon29
rbdihs	includeheaders/types/idef.h	/^  struct {real rbcA[NR_RBDIHS], rbcB[NR_RBDIHS];          } rbdihs;$/;"	m	union:__anon7	typeref:struct:__anon7::__anon29
rbuf	includeheaders/types/inputrec.h	/^  rvec       *rbuf;       \/* COM calculation buffer *\/$/;"	m	struct:__anon163
rc_scaling	includeheaders/types/forcerec.h	/^  int  rc_scaling;$/;"	m	struct:__anon157
rcoulomb	includeheaders/types/forcerec.h	/^  real rcoulomb_switch,rcoulomb;$/;"	m	struct:__anon157
rcoulomb	includeheaders/types/inputrec.h	/^  real rcoulomb;        \/* Coulomb cutoff (nm)		                *\/$/;"	m	struct:__anon164
rcoulomb_switch	includeheaders/types/forcerec.h	/^  real rcoulomb_switch,rcoulomb;$/;"	m	struct:__anon157
rcoulomb_switch	includeheaders/types/inputrec.h	/^  real rcoulomb_switch; \/* Coulomb switch range start (nm)		*\/$/;"	m	struct:__anon164
read_angles	includeheaders/molfile_plugin.h	/^  int (* read_angles)(void *,$/;"	m	struct:__anon83
read_angles	includeheaders/molfile_plugin.h	/^  int (* read_angles)(void *handle, int *numangles, int **angles, int **angletypes,$/;"	m	struct:__anon83
read_bonds	includeheaders/molfile_plugin.h	/^  int (*read_bonds)(void *, int *nbonds, int **from, int **to, float **bondorder);$/;"	m	struct:__anon83
read_bonds	includeheaders/molfile_plugin.h	/^  int (*read_bonds)(void *, int *nbonds, int **from, int **to, float **bondorder, $/;"	m	struct:__anon83
read_collection_file	partition/object.c	/^void read_collection_file(FILE *collectionFile, int n, Collection *collection)$/;"	f
read_data_file	partition/value.c	/^void read_data_file(FILE *dataFile, int n, Data *data, Set *codeSet)$/;"	f
read_fragments	structure/getfragments.c	/^void read_fragments(FILE *fragmentfile,  FragmentSet *fragment_set)$/;"	f
read_inputFileEnsemble	sequence/sequence.c	/^void read_inputFileEnsemble(FILE *inputFile, SeqSet *inputSequenceSet) {$/;"	f
read_label_file	partition/label.c	/^void read_label_file(FILE *labelFile, int n, LabelList *labelList)$/;"	f
read_molecule_metadata	includeheaders/molfile_plugin.h	/^  int (* read_molecule_metadata)(void *, molfile_metadata_t **metadata);$/;"	m	struct:__anon83
read_n_fragments	structure/getfragments.c	/^void read_n_fragments(FILE *fragmentfile, FragmentSet *fragment_set, char *extended_codeOrder)$/;"	f
read_next_timestep	includeheaders/molfile_plugin.h	/^  int (* read_next_timestep)(void *, int natoms, molfile_timestep_t *);$/;"	m	struct:__anon83
read_number_lines	partition/object.c	/^int read_number_lines(FILE *collectionFile)$/;"	f
read_qm_metadata	includeheaders/molfile_plugin.h	/^  int (* read_qm_metadata)(void *, molfile_qm_metadata_t *metadata);$/;"	m	struct:__anon83
read_qm_rundata	includeheaders/molfile_plugin.h	/^  int (* read_qm_rundata)(void *, molfile_qm_t *qmdata);$/;"	m	struct:__anon83
read_qm_timestep_metadata	includeheaders/molfile_plugin.h	/^  int (* read_qm_timestep_metadata)(void *, molfile_qm_timestep_metadata_t *);$/;"	m	struct:__anon83
read_rawgraphics	includeheaders/molfile_plugin.h	/^  int (* read_rawgraphics)(void *, int *nelem, const molfile_graphics_t **data);$/;"	m	struct:__anon83
read_structure	includeheaders/molfile_plugin.h	/^  int (*read_structure)(void *, int *optflags, molfile_atom_t *atoms);$/;"	m	struct:__anon83
read_timestep	includeheaders/molfile_plugin.h	/^  int (* read_timestep)(void *, int natoms, molfile_timestep_t *,$/;"	m	struct:__anon83
read_timestep_metadata	includeheaders/molfile_plugin.h	/^  int (* read_timestep_metadata)(void *, molfile_timestep_metadata_t *);$/;"	m	struct:__anon83
read_volumetric_data	includeheaders/molfile_plugin.h	/^  int (* read_volumetric_data)(void *, int set, float *datablock, $/;"	m	struct:__anon83
read_volumetric_metadata	includeheaders/molfile_plugin.h	/^  int (* read_volumetric_metadata)(void *, int *nsets, $/;"	m	struct:__anon83
real	legacyheaders/types/simple.h	/^typedef double      real;$/;"	t
real	legacyheaders/types/simple.h	/^typedef float           real;$/;"	t
reconstruct_partition	partition/partition.c	/^void reconstruct_partition(Collection *collection, int **dividers, int n, int k,$/;"	f
recordName	structure/pdb_structure.h	/^	char recordName[8]; \/* Record type; 1 -  6*\/$/;"	m	struct:__anon48
record_probabilities_from_string	statistics/code.c	/^void record_probabilities_from_string(char *string, Set *codeSet) {$/;"	f
ref_p	includeheaders/types/inputrec.h	/^  tensor ref_p;		\/* reference pressure (kJ\/(mol nm^3))		*\/$/;"	m	struct:__anon164
ref_t	includeheaders/types/inputrec.h	/^  real    *ref_t;	         \/* Coupling temperature	per group   *\/$/;"	m	struct:__anon160
refcoord_scaling	includeheaders/types/inputrec.h	/^  int  refcoord_scaling;\/* How to scale absolute reference coordinates  *\/$/;"	m	struct:__anon164
remarklen	includeheaders/molfile_plugin.h	/^  int remarklen;       \/**< length of remarks string          *\/$/;"	m	struct:__anon71
remarks	includeheaders/molfile_plugin.h	/^  char *remarks;       \/**< free-form remarks about data      *\/$/;"	m	struct:__anon71
reppow	includeheaders/types/forcerec.h	/^  double reppow;$/;"	m	struct:__anon157
reppow	includeheaders/types/idef.h	/^  double     reppow;     \/* The repulsion power for VdW: C12*r^-reppow   *\/$/;"	m	struct:__anon42
res	structure/pdb_structure.h	/^    char *res; \/* array of residues = sequence *\/$/;"	m	struct:__anon47
reset_probabilities	statistics/code.c	/^void reset_probabilities(Set *codeSet) {$/;"	f
resid	includeheaders/molfile_plugin.h	/^  int resid;          \/**< required integer residue ID           *\/$/;"	m	struct:__anon72
residueName	structure/pdb_structure.h	/^	char residueName[4]; \/* Residue name; 18 - 20 *\/$/;"	m	struct:__anon48
residueNumber	structure/pdb_structure.h	/^	int residueNumber; \/* Residue sequence number; 23 - 26 *\/$/;"	m	struct:__anon48
resind	includeheaders/types/atoms.h	/^  int           resind;         \/* Index into resinfo (in t_atoms)      *\/$/;"	m	struct:__anon85
resinfo	includeheaders/types/atoms.h	/^  t_resinfo     *resinfo;       \/* Array of residue names and numbers   *\/$/;"	m	struct:__anon89
resname	includeheaders/molfile_plugin.h	/^  char resname[8];    \/**< required residue name string          *\/$/;"	m	struct:__anon72
restraint	includeheaders/types/idef.h	/^  struct {real lowA,up1A,up2A,kA,lowB,up1B,up2B,kB;        } restraint;$/;"	m	union:__anon7	typeref:struct:__anon7::__anon10
reverse_breaks_idx_list	partition/partition.c	/^void reverse_breaks_idx_list(int *breaks_idx, int nBreaks,$/;"	f
reverse_breaks_list	partition/partition.c	/^void reverse_breaks_list(float *breaks, int nBreaks, float *reverseBreaks) {$/;"	f
rfac	includeheaders/types/idef.h	/^  struct {real a,alpha1,alpha2,rfac;                       } thole;$/;"	m	struct:__anon7::__anon19
rgb	includeheaders/types/matrix.h	/^  t_rgb rgb;$/;"	m	struct:__anon93
rgbradii	includeheaders/types/inputrec.h	/^  real rgbradii;        \/* Cutoff for GB radii calculation              *\/$/;"	m	struct:__anon164
rlist	includeheaders/types/forcerec.h	/^  real rlist,rlistlong;$/;"	m	struct:__anon157
rlist	includeheaders/types/inputrec.h	/^  real rlist;		\/* short range pairlist cut-off (nm)		*\/$/;"	m	struct:__anon164
rlistlong	includeheaders/types/forcerec.h	/^  real rlist,rlistlong;$/;"	m	struct:__anon157
rlistlong	includeheaders/types/inputrec.h	/^  real rlistlong;	\/* long range pairlist cut-off (nm)		*\/$/;"	m	struct:__anon164
rm3tav	includeheaders/types/fcdata.h	/^  real *rm3tav;       \/* The calculated time averaged distance (npr)      *\/$/;"	m	struct:__anon63
rmsd	sequence/encode.h	/^    float rmsd;$/;"	m	struct:__anon1
rmsdev	includeheaders/types/fcdata.h	/^  real   rmsdev;      \/* The weighted (using kfac) RMS deviation            *\/$/;"	m	struct:__anon64
rscale	includeheaders/types/state.h	/^  double rscale;$/;"	m	struct:__anon60
rt	includeheaders/types/fcdata.h	/^  real *rt;           \/* The calculated instantaneous distance (npr)      *\/$/;"	m	struct:__anon63
rtp	includeheaders/types/atoms.h	/^  char          **rtp;          \/* rtp building block name (optional)   *\/$/;"	m	struct:__anon86
rtpi	includeheaders/types/inputrec.h	/^  real rtpi;            \/* Radius for test particle insertion           *\/$/;"	m	struct:__anon164
run	includeheaders/molfile_plugin.h	/^  molfile_qm_sysinfo_t run;             \/* system info  *\/$/;"	m	struct:__anon81
runtitle	includeheaders/molfile_plugin.h	/^  char runtitle[MOLFILE_BIGBUFSIZ];     \/**< title of run.                *\/$/;"	m	struct:__anon78
runtype	includeheaders/molfile_plugin.h	/^  int runtype;           \/**< flag indicating the calculation method. *\/$/;"	m	struct:__anon78
rvdw	includeheaders/types/forcerec.h	/^  real rvdw_switch,rvdw;$/;"	m	struct:__anon157
rvdw	includeheaders/types/inputrec.h	/^  real rvdw;		    \/* Van der Waals cutoff (nm)	        *\/$/;"	m	struct:__anon164
rvdw_switch	includeheaders/types/forcerec.h	/^  real rvdw_switch,rvdw;$/;"	m	struct:__anon157
rvdw_switch	includeheaders/types/inputrec.h	/^  real rvdw_switch;     \/* Van der Waals switch range start (nm)        *\/$/;"	m	struct:__anon164
rvec	legacyheaders/types/simple.h	/^typedef real            rvec[DIM];$/;"	t
rvec5	includeheaders/types/fcdata.h	/^typedef real rvec5[5];$/;"	t
rvec_add	includeheaders/vec.h	/^static gmx_inline void rvec_add(const rvec a,const rvec b,rvec c)$/;"	f
rvec_dec	includeheaders/vec.h	/^static gmx_inline void rvec_dec(rvec a,const rvec b)$/;"	f
rvec_inc	includeheaders/vec.h	/^static gmx_inline void rvec_inc(rvec a,const rvec b)$/;"	f
rvec_sub	includeheaders/vec.h	/^static gmx_inline void rvec_sub(const rvec a,const rvec b,rvec c)$/;"	f
rvscale	includeheaders/types/state.h	/^  double rvscale;$/;"	m	struct:__anon60
sa_algorithm	includeheaders/types/inputrec.h	/^  int  sa_algorithm;    \/* Algorithm for SA part of GBSA                *\/$/;"	m	struct:__anon164
sa_surface_tension	includeheaders/types/inputrec.h	/^  real sa_surface_tension; \/* Energy factor for SA part of GBSA *\/$/;"	m	struct:__anon164
safe_malloc	general/safe.c	/^void *safe_malloc(size_t size)$/;"	f
safe_open	general/safe.c	/^FILE *safe_open(const char *name, const char *mode)$/;"	f
safe_realloc	general/safe.c	/^void *safe_realloc(void *ptr, size_t size)$/;"	f
sar	includeheaders/types/idef.h	/^  struct {real sar,st,pi,gbr,bmlt;                        } gb;$/;"	m	struct:__anon7::__anon36
save_SA_xpm_matrix	g_sa_analyze.c	/^void save_SA_xpm_matrix(FILE *xpmout, SeqSet *fastaSequenceSet, int sequenceLength, FragmentSet *fragment_set, SA_colour *SA_colour_set, int nColourSets) {$/;"	f
save_SA_xpm_matrix	g_sa_encode.c	/^void save_SA_xpm_matrix(FILE *xpmout, SeqSet *fastaSequenceSet, int sequenceLength, FragmentSet *fragment_set, SA_colour *SA_colour_set, int nColourSets){$/;"	f
sc_alpha	includeheaders/types/forcerec.h	/^  real sc_alpha;$/;"	m	struct:__anon157
sc_alpha	includeheaders/types/inputrec.h	/^  real sc_alpha;        \/* free energy soft-core parameter              *\/$/;"	m	struct:__anon164
sc_power	includeheaders/types/forcerec.h	/^  int  sc_power;$/;"	m	struct:__anon157
sc_power	includeheaders/types/inputrec.h	/^  int  sc_power;        \/* lambda power for soft-core interactions      *\/$/;"	m	struct:__anon164
sc_sigma	includeheaders/types/inputrec.h	/^  real sc_sigma;        \/* free energy soft-core sigma when c6 or c12=0 *\/$/;"	m	struct:__anon164
sc_sigma6_def	includeheaders/types/forcerec.h	/^  real sc_sigma6_def;$/;"	m	struct:__anon157
sc_sigma6_min	includeheaders/types/forcerec.h	/^  real sc_sigma6_min;$/;"	m	struct:__anon157
sc_sigma_min	includeheaders/types/inputrec.h	/^  real sc_sigma_min;    \/* minimum FE sc sigma (default: =sg_sigma)     *\/$/;"	m	struct:__anon164
scale	includeheaders/types/forcerec.h	/^  real scale;     \/* distance between two points *\/$/;"	m	struct:__anon151
scale	includeheaders/types/idef.h	/^  real scale;     \/* distance between two points *\/$/;"	m	struct:__anon45
scale_exp	includeheaders/types/forcerec.h	/^  real scale_exp; \/* distance for exponential Buckingham table *\/$/;"	m	struct:__anon151
scalefactor	includeheaders/types/inputrec.h	/^  real scalefactor;     \/* factor for scaling the MM charges in QM calc.*\/$/;"	m	struct:__anon164
scfenergies	includeheaders/molfile_plugin.h	/^  double *scfenergies;      \/**< scfenergy per trajectory point. *\/$/;"	m	struct:__anon80
scftype	includeheaders/molfile_plugin.h	/^  int scftype;           \/**< SCF type: RHF, UHF, ROHF, GVB or MCSCF wfn. *\/$/;"	m	struct:__anon78
sd_X	includeheaders/types/state.h	/^  rvec          *sd_X;  \/* random part of the x update for stoch. dyn.  *\/$/;"	m	struct:__anon58
segid	includeheaders/molfile_plugin.h	/^  char segid[8];      \/**< required segment name string, or ""   *\/$/;"	m	struct:__anon72
separate_dhdl_file	includeheaders/types/inputrec.h	/^  int  separate_dhdl_file; \/* whether to write a separate dhdl.xvg file $/;"	m	struct:__anon164
sepdhdlfileNO	includeheaders/types/enums.h	/^    sepdhdlfileYES, sepdhdlfileNO, sepdhdlfileNR$/;"	e	enum:__anon119
sepdhdlfileNR	includeheaders/types/enums.h	/^    sepdhdlfileYES, sepdhdlfileNO, sepdhdlfileNR$/;"	e	enum:__anon119
sepdhdlfileYES	includeheaders/types/enums.h	/^    sepdhdlfileYES, sepdhdlfileNO, sepdhdlfileNR$/;"	e	enum:__anon119
sequence	sequence/sequence.h	/^    Seq *sequence; \/* array of sequences *\/$/;"	m	struct:__anon149
sequence	structure/pdb_structure.h	/^	Seq sequence; \/* sequence of structure *\/$/;"	m	struct:__anon49
series_sinhx	includeheaders/vec.h	/^static gmx_inline real series_sinhx(real x) $/;"	f
setname	structure/fragments.h	/^    char *setname;$/;"	m	struct:__anon5
setname	structure/fragments_coords.h	/^    char setname[64];$/;"	m	struct:__anon66
settle	includeheaders/types/idef.h	/^  struct {real doh,dhh;                                   } settle;$/;"	m	union:__anon7	typeref:struct:__anon7::__anon26
shake_tol	includeheaders/types/inputrec.h	/^  real shake_tol;	\/* tolerance for shake				*\/$/;"	m	struct:__anon164
shell_symmetry	includeheaders/molfile_plugin.h	/^  int *shell_symmetry;      \/**< symmetry type per shell in basis *\/$/;"	m	struct:__anon77
shift	includeheaders/types/nblist.h	/^  int *           shift;        \/* Shift vector index                    *\/$/;"	m	struct:__anon96
shift_vec	includeheaders/types/forcerec.h	/^  rvec *shift_vec;$/;"	m	struct:__anon157
sigma	includeheaders/types/inputrec.h	/^  real sigma;           \/* Width of the Gaussian pulse (FWHM) (ps)      *\/$/;"	m	struct:__anon159
sigma_square_average	structure/transform_segment.c	/^float sigma_square_average(gsl_matrix *U, gsl_vector *t, Vec *coords_A, Vec *coords_B, Vec *coords_C, int npoints, int iPos, int lStruct)$/;"	f
simulation_part	includeheaders/types/inputrec.h	/^  int  simulation_part; \/* Used in checkpointing to separate chunks *\/$/;"	m	struct:__anon164
size	includeheaders/molfile_plugin.h	/^  float size;           \/* A general size parameter     *\/$/;"	m	struct:__anon82
solvent_opt	includeheaders/types/forcerec.h	/^  int  solvent_opt;$/;"	m	struct:__anon157
spin	includeheaders/molfile_plugin.h	/^  int   spin;               \/**< 1 for alpha, -1 for beta *\/$/;"	m	struct:__anon79
sqr	includeheaders/vec.h	/^static real sqr(real x)$/;"	f
st	includeheaders/types/idef.h	/^  struct {real sar,st,pi,gbr,bmlt;                        } gb;$/;"	m	struct:__anon7::__anon36
start	includeheaders/types/graph.h	/^  int      start;	\/* The first atom in this graph			*\/$/;"	m	struct:__anon62
start	includeheaders/types/mdatom.h	/^  int           start;$/;"	m	struct:__anon150
start_lambda	includeheaders/types/state.h	/^    double start_lambda;   \/* lambda at start time *\/$/;"	m	struct:__anon56
start_lambda_set	includeheaders/types/state.h	/^    gmx_bool start_lambda_set; \/* whether the lambda value is set. Here$/;"	m	struct:__anon56
start_time	includeheaders/types/state.h	/^    double start_time;     \/* the start time of these energy diff blocks *\/$/;"	m	struct:__anon56
status	includeheaders/molfile_plugin.h	/^  int status;            \/**< indicates wether SCF and geometry optimization$/;"	m	struct:__anon78
step	includeheaders/types/trx.h	/^  int  step;      \/* MD step number                   *\/$/;"	m	struct:trxframe
style	includeheaders/molfile_plugin.h	/^  int style;            \/* A general style parameter    *\/$/;"	m	struct:__anon82
sumviol	includeheaders/types/fcdata.h	/^  real sumviol;       \/* The sum of violations                            *\/$/;"	m	struct:__anon63
superimpose_segment	structure/transform_segment.c	/^float superimpose_segment(gsl_matrix *X, gsl_matrix *Y, gsl_matrix *U, gsl_vector *t, Vec *coords_A, Vec *coords_B, Vec *coords_C, int npoints)$/;"	f
surftens	includeheaders/types/atoms.h	/^  real         *surftens;       \/* implicit solvent surftens for each atomtype  *\/$/;"	m	struct:__anon90
svir_prev	includeheaders/types/state.h	/^  matrix        svir_prev; \/* Shake virial for previous step for pcoupl *\/$/;"	m	struct:__anon58
svmul	includeheaders/vec.h	/^static gmx_inline void svmul(real a,const rvec v1,rvec v2)$/;"	f
sy_const	includeheaders/maths.h	/^static const double* sy_const[] = {$/;"	v
sy_const_1	includeheaders/maths.h	/^static const double sy_const_1[] = { 1. };$/;"	v
sy_const_3	includeheaders/maths.h	/^static const double sy_const_3[] = { 0.828981543588751,-0.657963087177502,0.828981543588751 };$/;"	v
sy_const_5	includeheaders/maths.h	/^static const double sy_const_5[] = { 0.2967324292201065,0.2967324292201065,-0.186929716880426,0.2967324292201065,0.2967324292201065 };$/;"	v
symbuf	includeheaders/types/symtab.h	/^  t_symbuf *symbuf;$/;"	m	struct:__anon172
symbuf	includeheaders/types/symtab.h	/^typedef struct symbuf {$/;"	s
symtab	includeheaders/types/topology.h	/^  t_symtab       symtab;        \/* The symbol table                     *\/$/;"	m	struct:__anon144
symtab	includeheaders/types/topology.h	/^  t_symtab      symtab;         \/* The symbol table                     *\/$/;"	m	struct:__anon146
t0	includeheaders/types/inputrec.h	/^  real t0;              \/* Centre of the Gaussian pulse (ps)            *\/$/;"	m	struct:__anon159
t0	includeheaders/types/trx.h	/^  real t0;        \/* time of the first frame, needed  *$/;"	m	struct:trxframe
t_atom	includeheaders/types/atoms.h	/^} t_atom;$/;"	t	typeref:struct:__anon85
t_atoms	includeheaders/types/atoms.h	/^} t_atoms;$/;"	t	typeref:struct:__anon89
t_atomtypes	includeheaders/types/atoms.h	/^} t_atomtypes;$/;"	t	typeref:struct:__anon90
t_block	includeheaders/types/block.h	/^} t_block;$/;"	t	typeref:struct:__anon97
t_blocka	includeheaders/types/block.h	/^} t_blocka;$/;"	t	typeref:struct:__anon98
t_commrec	legacyheaders/typedefs.h	/^typedef struct t_commrec t_commrec;$/;"	t	typeref:struct:t_commrec
t_convert	includeheaders/vec.h	/^} t_convert;$/;"	t	typeref:union:__anon4
t_cos_acc	includeheaders/types/group.h	/^} t_cos_acc;$/;"	t	typeref:struct:__anon169
t_cosines	includeheaders/types/inputrec.h	/^} t_cosines;$/;"	t	typeref:struct:__anon158
t_disresdata	includeheaders/types/fcdata.h	/^} t_disresdata;$/;"	t	typeref:struct:__anon63
t_efield	includeheaders/types/inputrec.h	/^} t_efield;$/;"	t	typeref:struct:__anon159
t_energy	includeheaders/types/energy.h	/^} t_energy;$/;"	t	typeref:struct:__anon147
t_excl	includeheaders/types/nblist.h	/^typedef unsigned long t_excl;$/;"	t
t_extmass	includeheaders/types/state.h	/^} t_extmass;$/;"	t	typeref:struct:__anon59
t_fcdata	includeheaders/types/fcdata.h	/^} t_fcdata;$/;"	t	typeref:struct:__anon65
t_fnbf	includeheaders/types/forcerec.h	/^  double t_fnbf;$/;"	m	struct:__anon157
t_forcerec	includeheaders/types/forcerec.h	/^} t_forcerec;$/;"	t	typeref:struct:__anon157
t_forcetable	includeheaders/types/forcerec.h	/^} t_forcetable;$/;"	t	typeref:struct:__anon151
t_functype	includeheaders/types/idef.h	/^typedef int t_functype;$/;"	t
t_gmxvmdplugin	includeheaders/vmdio.h	/^} t_gmxvmdplugin;$/;"	t	typeref:struct:__anon2
t_graph	includeheaders/types/graph.h	/^} t_graph;$/;"	t	typeref:struct:__anon62
t_grid	includeheaders/types/nsgrid.h	/^} t_grid;$/;"	t	typeref:struct:__anon148
t_grp_acc	includeheaders/types/group.h	/^} t_grp_acc;$/;"	t	typeref:struct:__anon168
t_grp_tcstat	includeheaders/types/group.h	/^} t_grp_tcstat;$/;"	t	typeref:struct:__anon167
t_grpopts	includeheaders/types/inputrec.h	/^} t_grpopts;$/;"	t	typeref:struct:__anon160
t_grps	includeheaders/types/atoms.h	/^} t_grps;$/;"	t	typeref:struct:__anon88
t_iatom	includeheaders/types/idef.h	/^typedef atom_id t_iatom;$/;"	t
t_idef	includeheaders/types/idef.h	/^} t_idef;$/;"	t	typeref:struct:__anon44
t_ifunc	includeheaders/types/ifunc.h	/^typedef real t_ifunc(int nbonds,const t_iatom iatoms[],$/;"	t
t_ilist	includeheaders/types/idef.h	/^} t_ilist;$/;"	t	typeref:struct:__anon39
t_inputrec	includeheaders/types/inputrec.h	/^} t_inputrec;$/;"	t	typeref:struct:__anon164
t_interaction_function	includeheaders/types/ifunc.h	/^} t_interaction_function;$/;"	t	typeref:struct:__anon171
t_iparams	includeheaders/types/idef.h	/^} t_iparams;$/;"	t	typeref:union:__anon7
t_mapping	includeheaders/types/matrix.h	/^} t_mapping;$/;"	t	typeref:struct:__anon93
t_matelmt	includeheaders/types/matrix.h	/^typedef short t_matelmt;$/;"	t
t_matrix	includeheaders/types/matrix.h	/^} t_matrix;$/;"	t	typeref:struct:__anon94
t_mdatoms	includeheaders/types/mdatom.h	/^} t_mdatoms;$/;"	t	typeref:struct:__anon150
t_nblist	includeheaders/types/nblist.h	/^} t_nblist;$/;"	t	typeref:struct:__anon96
t_nblists	includeheaders/types/forcerec.h	/^} t_nblists;$/;"	t	typeref:struct:__anon152
t_nrnb	includeheaders/types/nrnb.h	/^} t_nrnb;$/;"	t	typeref:struct:__anon70
t_oriresdata	includeheaders/types/fcdata.h	/^} t_oriresdata;$/;"	t	typeref:struct:__anon64
t_pbc	includeheaders/types/pbc.h	/^} t_pbc;$/;"	t	typeref:struct:__anon100
t_pdbinfo	includeheaders/types/atoms.h	/^} t_pdbinfo;$/;"	t	typeref:struct:__anon87
t_pull	includeheaders/types/inputrec.h	/^} t_pull;$/;"	t	typeref:struct:__anon163
t_pullgrp	includeheaders/types/inputrec.h	/^} t_pullgrp; $/;"	t	typeref:struct:__anon162
t_resinfo	includeheaders/types/atoms.h	/^} t_resinfo;$/;"	t	typeref:struct:__anon86
t_rgb	includeheaders/types/matrix.h	/^} t_rgb;$/;"	t	typeref:struct:__anon91
t_state	includeheaders/types/state.h	/^} t_state;$/;"	t	typeref:struct:__anon58
t_symbuf	includeheaders/types/symtab.h	/^} t_symbuf;$/;"	t	typeref:struct:symbuf
t_symtab	includeheaders/types/symtab.h	/^} t_symtab;$/;"	t	typeref:struct:__anon172
t_topology	includeheaders/types/topology.h	/^} t_topology;$/;"	t	typeref:struct:__anon146
t_trxframe	includeheaders/types/trx.h	/^} t_trxframe;$/;"	t	typeref:struct:trxframe
t_vetavars	includeheaders/types/state.h	/^} t_vetavars;$/;"	t	typeref:struct:__anon60
t_wait	includeheaders/types/forcerec.h	/^  double t_wait;$/;"	m	struct:__anon157
t_xpmelmt	includeheaders/types/matrix.h	/^} t_xpmelmt;$/;"	t	typeref:struct:__anon92
tab	includeheaders/types/forcerec.h	/^  real *tab;      \/* the actual tables, per point there are  4 numbers for$/;"	m	struct:__anon151
tab	includeheaders/types/forcerec.h	/^  t_forcetable tab;$/;"	m	struct:__anon152
tab	includeheaders/types/idef.h	/^  real *tab;      \/* the actual tables, per point there are  4 numbers *\/$/;"	m	struct:__anon45
tab	includeheaders/types/idef.h	/^  struct {int  table;real kA;real kB;                     } tab;$/;"	m	union:__anon7	typeref:struct:__anon7::__anon35
tab14	includeheaders/types/forcerec.h	/^  t_forcetable tab14; \/* for 1-4 interactions only *\/$/;"	m	struct:__anon157
tabext	includeheaders/types/inputrec.h	/^  real tabext;          \/* Extension of the table beyond the cut-off,   *$/;"	m	struct:__anon164
table	includeheaders/types/idef.h	/^  struct {int  table;real kA;real kB;                     } tab;$/;"	m	struct:__anon7::__anon35
tau_p	includeheaders/types/inputrec.h	/^  real tau_p;		\/* pressure coupling time (ps)			*\/$/;"	m	struct:__anon164
tau_t	includeheaders/types/inputrec.h	/^  real    *tau_t;	         \/* Tau coupling time 			    *\/$/;"	m	struct:__anon160
tcstat	includeheaders/types/group.h	/^  t_grp_tcstat *tcstat;         \/* T-coupling data 			*\/$/;"	m	struct:__anon170
temp	includeheaders/types/forcerec.h	/^  real zsquare,temp;$/;"	m	struct:__anon157
tensor	legacyheaders/types/simple.h	/^typedef real            tensor[DIM][DIM];$/;"	t
term	includeheaders/types/forcerec.h	/^  real term[F_NRE];    \/* The energies for all different interaction types *\/$/;"	m	struct:__anon155
text	partition/label.h	/^    char text[64]; \/* label text *\/$/;"	m	struct:__anon67
therm_integral	includeheaders/types/state.h	/^  double        *therm_integral; \/* for N-H\/V-rescale tcoupl (ngtc)     *\/$/;"	m	struct:__anon58
theta	includeheaders/types/idef.h	/^  struct {real theta,c[5];                                 } qangle; $/;"	m	struct:__anon7::__anon16
theta	includeheaders/types/idef.h	/^  struct {real theta,ktheta,r13,kUB;                       } u_b;$/;"	m	struct:__anon7::__anon15
thole	includeheaders/types/idef.h	/^  struct {real a,alpha1,alpha2,rfac;                       } thole;$/;"	m	union:__anon7	typeref:struct:__anon7::__anon19
time	includeheaders/types/trx.h	/^  real time;      \/* time of the frame                *\/$/;"	m	struct:trxframe
timesteps	includeheaders/types/forcerec.h	/^  int timesteps;$/;"	m	struct:__anon157
title	includeheaders/molfile_plugin.h	/^  char title[81];      \/**< brief title for this data         *\/$/;"	m	struct:__anon71
title	includeheaders/types/matrix.h	/^  char title[256];$/;"	m	struct:__anon94
title	includeheaders/types/trx.h	/^  const char *title; \/* title of the frame            *\/$/;"	m	struct:trxframe
tmass	includeheaders/types/mdatom.h	/^  real          tmassA,tmassB,tmass;$/;"	m	struct:__anon150
tmassA	includeheaders/types/mdatom.h	/^  real          tmassA,tmassB,tmass;$/;"	m	struct:__anon150
tmassB	includeheaders/types/mdatom.h	/^  real          tmassA,tmassB,tmass;$/;"	m	struct:__anon150
tmmul	includeheaders/vec.h	/^static gmx_inline void tmmul(matrix a,matrix b,matrix dest)$/;"	f
tmp	includeheaders/types/fcdata.h	/^  rvec5  *tmp;        \/* An array of temporary 5-vectors (nex);             *\/ $/;"	m	struct:__anon64
tmvmul_ur0	includeheaders/vec.h	/^static gmx_inline void tmvmul_ur0(matrix a,const rvec src,rvec dest)$/;"	f
totalcharge	includeheaders/molfile_plugin.h	/^  int totalcharge;       \/**< total charge of system. XXX: can be fractional in some DFT codes *\/$/;"	m	struct:__anon78
tpf	includeheaders/types/trx.h	/^  real tpf;       \/* time of the previous frame, not  *\/$/;"	m	struct:trxframe
tpos	structure/pdb_structure.h	/^	Vec tpos; \/* transformed position vector *\/$/;"	m	struct:__anon48
tppf	includeheaders/types/trx.h	/^  real tppf;      \/* time of two frames ago           *\/$/;"	m	struct:trxframe
trace	includeheaders/vec.h	/^static gmx_inline real trace(matrix m)$/;"	f
transform	structure/transform_segment.c	/^__inline__ static void transform(Vec i_coords_B, Vec *i_coords_C, gsl_matrix *U, gsl_vector *t)$/;"	f	file:
transform_coordinates	structure/transform_segment.c	/^float transform_coordinates(gsl_matrix *U, gsl_vector *t, Vec *coords_A, Vec *coords_B, Vec *coords_C, int npoints)$/;"	f
transpose	includeheaders/vec.h	/^static gmx_inline void transpose(matrix src,matrix dest)$/;"	f
tric_shift	includeheaders/types/pbc.h	/^  ivec   tric_shift[MAX_NTRICVEC];$/;"	m	struct:__anon100
tric_vec	includeheaders/types/pbc.h	/^  rvec   tric_vec[MAX_NTRICVEC];$/;"	m	struct:__anon100
trxframe	includeheaders/types/trx.h	/^typedef struct trxframe$/;"	s
type	includeheaders/molfile_plugin.h	/^  char type[16];      \/**< required atom type string             *\/$/;"	m	struct:__anon72
type	includeheaders/molfile_plugin.h	/^  int   type;               \/**< CANONICAL, LOCALIZED, OTHER *\/$/;"	m	struct:__anon79
type	includeheaders/molfile_plugin.h	/^  int type;             \/* One of molfile_graphics_type *\/$/;"	m	struct:__anon82
type	includeheaders/types/atoms.h	/^  int  type;                    \/* PDB record name                      *\/$/;"	m	struct:__anon87
type	includeheaders/types/atoms.h	/^  unsigned short type;          \/* Atom type                            *\/$/;"	m	struct:__anon85
type	includeheaders/types/idef.h	/^  struct {real low,up1,up2,kfac;int type,label,npair;     } disres; $/;"	m	struct:__anon7::__anon32
type	includeheaders/types/topology.h	/^  int           type;           \/* The molcule type index in mtop.moltype *\/$/;"	m	struct:__anon142
typeA	includeheaders/types/mdatom.h	/^  int           *typeA,*typeB;$/;"	m	struct:__anon150
typeB	includeheaders/types/atoms.h	/^  unsigned short typeB;         \/* Atom type for Free Energy calc       *\/$/;"	m	struct:__anon85
typeB	includeheaders/types/mdatom.h	/^  int           *typeA,*typeB;$/;"	m	struct:__anon150
u	includeheaders/types/group.h	/^  rvec	  u;           	\/* Mean velocities of home particles    	*\/$/;"	m	struct:__anon168
u_b	includeheaders/types/idef.h	/^  struct {real theta,ktheta,r13,kUB;                       } u_b;$/;"	m	union:__anon7	typeref:struct:__anon7::__anon15
uij	includeheaders/types/atoms.h	/^  int  uij[6];                  \/* Anisotropic B-factor                 *\/$/;"	m	struct:__anon87
unit_charge_e	includeheaders/physics.h	115;"	d
unit_density_SI	includeheaders/physics.h	136;"	d
unit_dipole_D	includeheaders/physics.h	121;"	d
unit_energy	includeheaders/physics.h	109;"	d
unit_invtime	includeheaders/physics.h	126;"	d
unit_invvisc_SI	includeheaders/physics.h	137;"	d
unit_length	includeheaders/physics.h	106;"	d
unit_length_SI	includeheaders/physics.h	132;"	d
unit_mass	includeheaders/physics.h	108;"	d
unit_mass_SI	includeheaders/physics.h	134;"	d
unit_pres_bar	includeheaders/physics.h	118;"	d
unit_surft_bar	includeheaders/physics.h	129;"	d
unit_temp_K	includeheaders/physics.h	112;"	d
unit_time	includeheaders/physics.h	107;"	d
unit_time_SI	includeheaders/physics.h	133;"	d
unit_vel	includeheaders/physics.h	124;"	d
unit_volume	includeheaders/physics.h	125;"	d
unitv	includeheaders/vec.h	/^static gmx_inline void unitv(const rvec src,rvec dest)$/;"	f
unitv_no_table	includeheaders/vec.h	/^static gmx_inline void unitv_no_table(const rvec src,rvec dest)$/;"	f
uold	includeheaders/types/group.h	/^  rvec	  uold;         \/* Previous mean velocities of home particles   *\/$/;"	m	struct:__anon168
up1	includeheaders/types/idef.h	/^  struct {real low,up1,up2,kfac;int type,label,npair;     } disres; $/;"	m	struct:__anon7::__anon32
up1A	includeheaders/types/idef.h	/^  struct {real lowA,up1A,up2A,kA,lowB,up1B,up2B,kB;        } restraint;$/;"	m	struct:__anon7::__anon10
up1B	includeheaders/types/idef.h	/^  struct {real lowA,up1A,up2A,kA,lowB,up1B,up2B,kB;        } restraint;$/;"	m	struct:__anon7::__anon10
up2	includeheaders/types/idef.h	/^  struct {real low,up1,up2,kfac;int type,label,npair;     } disres; $/;"	m	struct:__anon7::__anon32
up2A	includeheaders/types/idef.h	/^  struct {real lowA,up1A,up2A,kA,lowB,up1B,up2B,kB;        } restraint;$/;"	m	struct:__anon7::__anon10
up2B	includeheaders/types/idef.h	/^  struct {real lowA,up1A,up2A,kA,lowB,up1B,up2B,kB;        } restraint;$/;"	m	struct:__anon7::__anon10
userint1	includeheaders/types/forcerec.h	/^  int  userint1;$/;"	m	struct:__anon157
userint1	includeheaders/types/inputrec.h	/^  int  userint1;        \/* User determined parameters                   *\/$/;"	m	struct:__anon164
userint2	includeheaders/types/forcerec.h	/^  int  userint2;$/;"	m	struct:__anon157
userint2	includeheaders/types/inputrec.h	/^  int  userint2;$/;"	m	struct:__anon164
userint3	includeheaders/types/forcerec.h	/^  int  userint3;$/;"	m	struct:__anon157
userint3	includeheaders/types/inputrec.h	/^  int  userint3;$/;"	m	struct:__anon164
userint4	includeheaders/types/forcerec.h	/^  int  userint4;$/;"	m	struct:__anon157
userint4	includeheaders/types/inputrec.h	/^  int  userint4;$/;"	m	struct:__anon164
userreal1	includeheaders/types/forcerec.h	/^  real userreal1;$/;"	m	struct:__anon157
userreal1	includeheaders/types/inputrec.h	/^  real userreal1;$/;"	m	struct:__anon164
userreal2	includeheaders/types/forcerec.h	/^  real userreal2;$/;"	m	struct:__anon157
userreal2	includeheaders/types/inputrec.h	/^  real userreal2;$/;"	m	struct:__anon164
userreal3	includeheaders/types/forcerec.h	/^  real userreal3;$/;"	m	struct:__anon157
userreal3	includeheaders/types/inputrec.h	/^  real userreal3;$/;"	m	struct:__anon164
userreal4	includeheaders/types/forcerec.h	/^  real userreal4;$/;"	m	struct:__anon157
userreal4	includeheaders/types/inputrec.h	/^  real userreal4;$/;"	m	struct:__anon164
v	includeheaders/types/fcdata.h	/^  double **v;$/;"	m	struct:__anon64
v	includeheaders/types/state.h	/^  rvec          *v;     \/* the velocities (natoms)                      *\/$/;"	m	struct:__anon58
v	includeheaders/types/trx.h	/^  rvec *v;        \/* velocities (natoms)              *\/$/;"	m	struct:trxframe
value	partition/score.h	/^    float value; \/* object value *\/$/;"	m	struct:__anon136
value	partition/value.h	/^    float value; \/* value *\/$/;"	m	struct:__anon165
vcos	includeheaders/types/group.h	/^  real    vcos;         \/* The velocity of the cosine profile           *\/$/;"	m	struct:__anon169
vdwtab	includeheaders/types/forcerec.h	/^  real *vdwtab;       \/* Vdw only   *\/$/;"	m	struct:__anon152
vdwtype	includeheaders/types/forcerec.h	/^  int  vdwtype;$/;"	m	struct:__anon157
vdwtype	includeheaders/types/inputrec.h	/^  int  vdwtype;         \/* Type of Van der Waals treatment              *\/$/;"	m	struct:__anon164
vec	includeheaders/types/inputrec.h	/^  rvec       vec;      \/* The pull vector, direction or position *\/$/;"	m	struct:__anon162
velocities	includeheaders/molfile_plugin.h	/^  float *velocities;    \/**< space for velocities of all atoms; same layout *\/$/;"	m	struct:__anon73
version_string	includeheaders/molfile_plugin.h	/^  char version_string[MOLFILE_BUFSIZ];  \/**< QM code version information. *\/$/;"	m	struct:__anon78
veta	includeheaders/types/state.h	/^  real          veta; \/* trotter based isotropic P-coupling             *\/$/;"	m	struct:__anon58
veta	includeheaders/types/state.h	/^  real veta;   $/;"	m	struct:__anon60
vir_diag_posres	includeheaders/types/forcerec.h	/^  rvec vir_diag_posres;$/;"	m	struct:__anon157
vir_el_recip	includeheaders/types/forcerec.h	/^  tensor    vir_el_recip;$/;"	m	struct:__anon157
vir_wall_z	includeheaders/types/forcerec.h	/^  dvec vir_wall_z;$/;"	m	struct:__anon157
virdiffsix	includeheaders/types/forcerec.h	/^  real virdiffsix;$/;"	m	struct:__anon157
virdifftwelve	includeheaders/types/forcerec.h	/^  real virdifftwelve;$/;"	m	struct:__anon157
vmdplugin	includeheaders/types/trx.h	/^  t_gmxvmdplugin vmdplugin;$/;"	m	struct:trxframe
vmdplugin_ABIVERSION	includeheaders/vmdplugin.h	195;"	d
vmdplugin_HEAD	includeheaders/vmdplugin.h	172;"	d
vmdplugin_register_cb	includeheaders/vmdplugin.h	/^typedef int (*vmdplugin_register_cb)(void *, vmdplugin_t *);$/;"	t
vmdplugin_t	includeheaders/vmdplugin.h	/^} vmdplugin_t;$/;"	t	typeref:struct:__anon99
vol	includeheaders/types/atoms.h	/^  real         *vol;            \/* GBSA efective volume for each atomtype       *\/$/;"	m	struct:__anon90
vol0	includeheaders/types/state.h	/^  real          vol0; \/* initial volume,required for computing NPT conserverd quantity *\/$/;"	m	struct:__anon58
vscale	includeheaders/types/state.h	/^  double vscale;$/;"	m	struct:__anon60
vscale_nhc	includeheaders/types/group.h	/^  double  vscale_nhc;   \/* Scaling factor for NHC- velocity *\/$/;"	m	struct:__anon167
vscale_nhc	includeheaders/types/state.h	/^  double  *vscale_nhc;$/;"	m	struct:__anon55
vscale_nhc	includeheaders/types/state.h	/^  double *vscale_nhc;$/;"	m	struct:__anon60
vsite	includeheaders/types/idef.h	/^  struct {real a,b,c,d,e,f;                               } vsite;   $/;"	m	union:__anon7	typeref:struct:__anon7::__anon30
vsiten	includeheaders/types/idef.h	/^  struct {int  n; real a;                                 } vsiten;   $/;"	m	union:__anon7	typeref:struct:__anon7::__anon31
wall_atomtype	includeheaders/types/inputrec.h	/^  int  wall_atomtype[2];\/* The atom type for walls                      *\/$/;"	m	struct:__anon164
wall_density	includeheaders/types/inputrec.h	/^  real wall_density[2]; \/* Number density for walls                     *\/$/;"	m	struct:__anon164
wall_ewald_zfac	includeheaders/types/inputrec.h	/^  real wall_ewald_zfac; \/* Scaling factor for the box for Ewald         *\/$/;"	m	struct:__anon164
wall_r_linpot	includeheaders/types/inputrec.h	/^  real wall_r_linpot;   \/* The potentail is linear for r<=wall_r_linpot *\/$/;"	m	struct:__anon164
wall_tab	includeheaders/types/forcerec.h	/^  t_forcetable **wall_tab;$/;"	m	struct:__anon157
wall_type	includeheaders/types/inputrec.h	/^  int  wall_type;       \/* The type of walls                            *\/$/;"	m	struct:__anon164
wave	includeheaders/molfile_plugin.h	/^  molfile_qm_wavefunction_t *wave; \/**< array of wavefunction objects *\/$/;"	m	struct:__anon80
wave_coeffs	includeheaders/molfile_plugin.h	/^  float *wave_coeffs;       \/**< expansion coefficients for wavefunction in the$/;"	m	struct:__anon79
wavef_size	includeheaders/molfile_plugin.h	/^  int wavef_size;                      \/**< size of one wavefunction $/;"	m	struct:molfile_qm_timestep_metadata
wavef_size	includeheaders/molfile_plugin.h	/^  int wavef_size;               \/**< size of the wavefunction$/;"	m	struct:__anon75
wavenumbers	includeheaders/molfile_plugin.h	/^  float *wavenumbers;   \/**< array(ncart) of wavenumbers of normal modes *\/$/;"	m	struct:__anon76
weight	includeheaders/types/inputrec.h	/^  real       *weight;  \/* Weights (use all 1 when weight==NULL) *\/$/;"	m	struct:__anon162
weight_loc	includeheaders/types/inputrec.h	/^  real       *weight_loc; \/* Weights for the local indices *\/$/;"	m	struct:__anon162
wpol	includeheaders/types/idef.h	/^  struct {real al_x,al_y,al_z,rOH,rHH,rOD;                 } wpol;$/;"	m	union:__anon7	typeref:struct:__anon7::__anon18
write_angles	includeheaders/molfile_plugin.h	/^  int (* write_angles)(void *,$/;"	m	struct:__anon83
write_angles	includeheaders/molfile_plugin.h	/^  int (* write_angles)(void *handle, int numangles, const int *angles, const int *angletypes,$/;"	m	struct:__anon83
write_bonds	includeheaders/molfile_plugin.h	/^  int (* write_bonds)(void *, int nbonds, int *from, int *to, float *bondorder);$/;"	m	struct:__anon83
write_bonds	includeheaders/molfile_plugin.h	/^  int (* write_bonds)(void *, int nbonds, int *from, int *to, float *bondorder, $/;"	m	struct:__anon83
write_breaks	partition/partition.c	/^void write_breaks(float *breaks, int nBreaks, FILE *outputFile) {$/;"	f
write_data	partition/value.c	/^void write_data(Data *data, FILE *outputFile)$/;"	f
write_partitions	partition/object.c	/^void write_partitions(Collection *collection, int start, int end,$/;"	f
write_probabilities	statistics/probability.c	/^void write_probabilities(Set *codeSet, FILE *outputFile) {$/;"	f
write_structure	includeheaders/molfile_plugin.h	/^  int (* write_structure)(void *, int optflags, const molfile_atom_t *atoms);$/;"	m	struct:__anon83
write_timestep	includeheaders/molfile_plugin.h	/^  int (* write_timestep)(void *, const molfile_timestep_t *);$/;"	m	struct:__anon83
write_volumetric_data	includeheaders/molfile_plugin.h	/^  int (* write_volumetric_data)(void *, molfile_volumetric_t *metadata,$/;"	m	struct:__anon83
wscale	includeheaders/types/inputrec.h	/^  real       wscale;   \/* scaling factor for the weights: sum w m\/sum w w m *\/$/;"	m	struct:__anon162
x	includeheaders/types/inputrec.h	/^  dvec       x;        \/* center of mass before update *\/$/;"	m	struct:__anon162
x	includeheaders/types/state.h	/^  rvec          *x;     \/* the coordinates (natoms)                     *\/$/;"	m	struct:__anon58
x	includeheaders/types/trx.h	/^  rvec *x;        \/* coordinates (natoms)             *\/$/;"	m	struct:trxframe
x	structure/pdb_structure.h	/^   float x, y, z;$/;"	m	struct:__anon46
xaxis	includeheaders/molfile_plugin.h	/^  float xaxis[3];       \/**< direction (and length) for X axis              *\/ $/;"	m	struct:__anon74
xcat	includeheaders/vmdplugin.h	87;"	d
xp	includeheaders/types/inputrec.h	/^  dvec       xp;       \/* center of mass after update before constraining *\/$/;"	m	struct:__anon162
xref	includeheaders/types/fcdata.h	/^  rvec *xref;         \/* The reference coordinates for the fit (nref)       *\/$/;"	m	struct:__anon64
xsize	includeheaders/molfile_plugin.h	/^  int xsize;            \/**< number of grid cells along the X axis          *\/$/;"	m	struct:__anon74
xtcprec	includeheaders/types/inputrec.h	/^  real xtcprec;         \/* precision of xtc file                        *\/$/;"	m	struct:__anon164
xtmp	includeheaders/types/fcdata.h	/^  rvec *xtmp;         \/* Temporary array for fitting (nref)                 *\/$/;"	m	struct:__anon64
xyzVec2Mat	structure/vec2mat.c	/^void xyzVec2Mat(Vec *vec, double **matrix, int cols, int shift)$/;"	f
y	structure/pdb_structure.h	/^   float x, y, z;$/;"	m	struct:__anon46
y0	includeheaders/types/matrix.h	/^  int  y0;$/;"	m	struct:__anon94
yaxis	includeheaders/molfile_plugin.h	/^  float yaxis[3];       \/**< direction (and length) for Y axis              *\/$/;"	m	struct:__anon74
ysize	includeheaders/molfile_plugin.h	/^  int ysize;            \/**< number of grid cells along the Y axis          *\/$/;"	m	struct:__anon74
z	structure/pdb_structure.h	/^   float x, y, z;$/;"	m	struct:__anon46
zaxis	includeheaders/molfile_plugin.h	/^  float zaxis[3];       \/**< direction (and length) for Z axis              *\/$/;"	m	struct:__anon74
zsize	includeheaders/molfile_plugin.h	/^  int zsize;            \/**< number of grid cells along the Z axis          *\/$/;"	m	struct:__anon74
zsquare	includeheaders/types/forcerec.h	/^  real zsquare,temp;$/;"	m	struct:__anon157
