!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Atom	structure/pdb_structure.h	/^} Atom;$/;"	t	typeref:struct:__anon5
CADistCutoff	g_sa_encode.c	/^float CADistCutoff = 6.0;$/;"	v
CODE_H_	statistics/code.h	23;"	d
CalcQuarticCoeffs	structure/quatRMSD.c	/^CalcQuarticCoeffs(const double **coords1, const double **coords2, const int len, double *coeff)$/;"	f	file:
CenterCoords	structure/quatRMSD.c	/^CenterCoords(double **coords, const int len)$/;"	f
Collection	partition/score.h	/^} Collection;$/;"	t	typeref:struct:__anon14
ConstantFragmentSet	structure/fragments_coords.h	/^} ConstantFragmentSet;$/;"	t	typeref:struct:__anon10
CoordsInnerProd	structure/quatRMSD.c	/^CoordsInnerProd(const double **coords, const int len)$/;"	f	file:
Data	partition/value.h	/^} Data;$/;"	t	typeref:struct:__anon19
ENCODE_H	sequence/encode.h	23;"	d
Element	statistics/probability.h	/^} Element;$/;"	t	typeref:struct:__anon7
FRAGMENTS_H	structure/fragments.h	23;"	d
FRAGMENT_COLOUR_H	structure/fragment_colour.h	23;"	d
FRAGMENT_COORDS_H	structure/fragments_coords.h	23;"	d
FragmentSet	structure/fragments.h	/^} FragmentSet;$/;"	t	typeref:struct:__anon2
GETFRAGMENTS_H	structure/getfragments.h	23;"	d
Instance	partition/value.h	/^} Instance;$/;"	t	typeref:struct:__anon18
KABSCH_H	structure/kabsch.h	33;"	d
LABEL_H	partition/label.h	23;"	d
Label	partition/label.h	/^} Label;$/;"	t	typeref:struct:__anon11
LabelList	partition/label.h	/^} LabelList;$/;"	t	typeref:struct:__anon12
MATRIX_H	general/matrix.h	23;"	d
MERGESORT_H	general/mergesort.h	23;"	d
MI_costFunction	partition/score.c	/^float MI_costFunction(float **values, float *p, int i, int j, int x,$/;"	f
MI_initialize_prefix_sums	partition/score.c	/^void MI_initialize_prefix_sums(float *p, int n, Collection *collection) {$/;"	f
MI_objectCost	partition/score.c	/^float MI_objectCost(Collection *collection, int i) {$/;"	f
MI_partitionCost	partition/score.c	/^float MI_partitionCost(Collection *collection, int i, int x) {$/;"	f
MatDestroy	structure/quatRMSD.c	/^MatDestroy(double **matrix)$/;"	f
MatInit	structure/quatRMSD.c	/^**MatInit(const int rows, const int cols)$/;"	f
MergeSort	general/mergesort.c	/^void MergeSort(void *array, size_t size, size_t esize, int (*compare) (const void *key1, const void *key2))$/;"	f
NFILE	g_sa_analyze.c	785;"	d	file:
NFILE	g_sa_encode.c	626;"	d	file:
NORM_EPS	structure/kabsch.c	54;"	d	file:
OBJECT_H	partition/object.h	23;"	d
Object	partition/score.h	/^} Object;$/;"	t	typeref:struct:__anon13
PARTITION_H	partition/partition.h	23;"	d
PDB_STRUCTURE_H	structure/pdb_structure.h	24;"	d
PROBABILITY_H_	statistics/probability.h	23;"	d
PrintCoords	structure/quatRMSD.c	/^PrintCoords(const double **coords, const int len)$/;"	f
ProbMatrix	statistics/probability.h	/^} ProbMatrix;$/;"	t	typeref:struct:__anon9
QCP_rmsd	structure/quatRMSD.c	/^QCP_rmsd(double **coords1, double **coords2, const int len, double *coeff)$/;"	f
QCProot	structure/quatRMSD.c	/^QCProot(double *coeff, double guess, const double delta)$/;"	f	file:
QUATRMSD_H	structure/quatRMSD.h	39;"	d
QuatCharPoly	structure/quatRMSD.c	/^QuatCharPoly(const double **coords1, const double **coords2, const int len, double *coeff)$/;"	f
RecStrCmp	sequence/encode.c	/^int RecStrCmp(ReconStructure *recStrA, ReconStructure *recStrB) {$/;"	f
RecStrCpy	sequence/encode.c	/^void RecStrCpy(ReconStructure *recStrDest, ReconStructure *recStrSource) {$/;"	f
ReconStructure	sequence/encode.h	/^} ReconStructure;$/;"	t	typeref:struct:__anon1
SAFE_H	general/safe.h	23;"	d
SA_colour	structure/fragment_colour.h	/^} SA_colour;$/;"	t	typeref:struct:__anon16
SCORE_H	partition/score.h	23;"	d
SEQUENCE_H_	sequence/sequence.h	23;"	d
SUM_costFunction	partition/score.c	/^float SUM_costFunction(float **values, float *p, int i, int j, int x,$/;"	f
SUM_initialize_prefix_sums	partition/score.c	/^void SUM_initialize_prefix_sums(float *p, int n, Collection *collection) {$/;"	f
SUM_objectCost	partition/score.c	/^float SUM_objectCost(Collection *collection, int i) {$/;"	f
SUM_partitionCost	partition/score.c	/^float SUM_partitionCost(Collection *collection, int i, int x) {$/;"	f
Seq	structure/pdb_structure.h	/^} Seq;$/;"	t	typeref:struct:__anon4
SeqSet	sequence/sequence.h	/^} SeqSet;$/;"	t	typeref:struct:__anon17
Set	statistics/probability.h	/^} Set;$/;"	t	typeref:struct:__anon8
Shannon	statistics/probability.c	/^float Shannon(Set *codeSet) {$/;"	f
Str	structure/pdb_structure.h	/^} Str;$/;"	t	typeref:struct:__anon6
Str2Mat	structure/vec2mat.c	/^void Str2Mat(Str *str, double **matrix, int cols, int shift)$/;"	f
TRANSFORM_STRUCTURE_H	structure/transform_segment.h	23;"	d
VALUES_H	partition/value.h	23;"	d
VEC2MAT_H	structure/vec2mat.h	23;"	d
Vec	structure/pdb_structure.h	/^} Vec;$/;"	t	typeref:struct:__anon3
add_sequence_to_set	sequence/sequence.c	/^void add_sequence_to_set(SeqSet *localfastaSequenceSet, char *frameDesc,$/;"	f
alloc_float_matrix	general/matrix.c	/^float **alloc_float_matrix(float **matrix, int nRow, int nCol)$/;"	f
alloc_float_matrix3D	general/matrix.c	/^float ***alloc_float_matrix3D(float ***float_matrix3D, int x, int y, int z)$/;"	f
alloc_int_matrix	general/matrix.c	/^int **alloc_int_matrix(int **matrix, int nRow, int nCol)$/;"	f
alphabetName	structure/fragment_colour.h	/^	char *alphabetName;$/;"	m	struct:__anon16
altCode	partition/value.h	/^    int altCode; \/* alternate code *\/$/;"	m	struct:__anon18
altCodeSet	statistics/probability.h	/^    Set *altCodeSet; \/* alternate code *\/$/;"	m	struct:__anon9
alternativeLocation	structure/pdb_structure.h	/^	char alternativeLocation[2]; \/* Alternate location indicator; 17 *\/$/;"	m	struct:__anon5
atom	structure/pdb_structure.h	/^	Atom *atom; \/* array of selected (CA) atoms constituting structure *\/$/;"	m	struct:__anon6
atomName	structure/pdb_structure.h	/^	char atomName[8]; \/* Atom name; 13 - 16 *\/$/;"	m	struct:__anon5
atomNumber	structure/pdb_structure.h	/^	int atomNumber; \/* Atom serial number;  7 - 11 *\/$/;"	m	struct:__anon5
b	structure/fragment_colour.h	/^  float b;$/;"	m	struct:__anon15
build_data	g_sa_analyze.c	/^void build_data(Data *data, double *xvgvector, char *column, int nSequences, Set *codeSet, FragmentSet *fragment_set, float *maxValue, float *minValue) {$/;"	f
calc_sqdiff	structure/transform_segment.c	/^__inline__ static float calc_sqdiff(Vec vector0, Vec vector1)$/;"	f	file:
calculate_MI_contribution	partition/value.c	/^float calculate_MI_contribution(float startValue, float endValue, Data *data,$/;"	f
calculate_profile	g_sa_analyze.c	/^void calculate_profile(const char *outFilename, int sequenceLength, SeqSet *fastaSequenceSet, FragmentSet *fragment_set, gmx_bool xpmoutput) {$/;"	f
calculate_profile	g_sa_encode.c	/^void calculate_profile(const char *outFilename, int sequenceLength, SeqSet *fastaSequenceSet, FragmentSet *fragment_set, gmx_bool xpmoutput){$/;"	f
calculate_transition_frequencies	g_sa_analyze.c	/^void calculate_transition_frequencies(SeqSet *inputSequenceSet, ProbMatrix *transition_matrix, int isize, atom_id *index) {$/;"	f
chainIdentifier	structure/pdb_structure.h	/^	char chainIdentifier[2]; \/* Chain identifier; 22 *\/$/;"	m	struct:__anon5
check_non_null	general/safe.c	/^void *check_non_null(void *ptr)$/;"	f
code	partition/value.h	/^    int code; \/* reference code *\/$/;"	m	struct:__anon18
code	statistics/probability.h	/^    int code; \/* code *\/$/;"	m	struct:__anon7
codeOrder	structure/fragments.h	/^    char *codeOrder;$/;"	m	struct:__anon2
codeOrder	structure/fragments_coords.h	/^    char codeOrder[64];$/;"	m	struct:__anon10
codeSet	partition/value.h	/^    Set *codeSet; \/* pointer to code set if available *\/$/;"	m	struct:__anon19
codeSet	statistics/probability.h	/^    Set *codeSet; \/* code *\/$/;"	m	struct:__anon9
code_index	partition/value.c	/^int code_index(Set *codeSet, int code) {$/;"	f
colour	structure/fragment_colour.h	/^	colour_rgb *colour;$/;"	m	struct:__anon16
colour_rgb	structure/fragment_colour.h	/^} colour_rgb;$/;"	t	typeref:struct:__anon15
column_joint_entropy	g_sa_analyze.c	/^float column_joint_entropy(SeqSet *fastaSequenceSet, ProbMatrix *probMat, int icol, int jcol) {$/;"	f
column_mutual_information	g_sa_analyze.c	/^float column_mutual_information(SeqSet *fastaSequenceSet, ProbMatrix *probMat, int icol, int jcol, float *ptr_eeMI) {$/;"	f
compareCost	partition/object.c	/^int compareCost(float oldValue, float newValue, int maximize_flag) {$/;"	f
compare_elements	statistics/probability.c	/^int compare_elements(Element *elementA, Element *elementB) {$/;"	f
compare_objects	partition/object.c	/^int compare_objects(Object *objectA, Object *objectB) {$/;"	f
constant_fragment_sets	structure/fragments_coords.h	/^ConstantFragmentSet constant_fragment_sets[] = {$/;"	v
coord	sequence/encode.h	/^    Vec *coord;$/;"	m	struct:__anon1
coord_rmsd	structure/transform_segment.c	/^float coord_rmsd(Vec *v1, Vec *v2)$/;"	f
coord_values	structure/fragments.h	/^    float ***coord_values;$/;"	m	struct:__anon2
coord_values	structure/fragments_coords.h	/^    float coord_values[64][8][3];$/;"	m	struct:__anon10
costFunction	partition/object.c	/^float costFunction(float **values, float *p, int i, int j, int x,$/;"	f
costFunction_wrapper	partition/score.c	/^float costFunction_wrapper(float **values, float *p, int i, int j, int x,$/;"	f
data	partition/score.h	/^    Data *data; \/* pointer to data if available *\/$/;"	m	struct:__anon14
define_points	structure/transform_segment.c	/^void define_points(gsl_matrix *X, gsl_matrix *Y, Vec *coords_A, Vec *coords_B, int npoints)$/;"	f
description	structure/pdb_structure.h	/^	char description[32]; \/* everything before coordinates *\/$/;"	m	struct:__anon5
element	statistics/probability.h	/^    Element *element; \/* element array *\/$/;"	m	struct:__anon8
encode_structure	g_sa_encode.c	/^void encode_structure(FragmentSet *fragment_set, Str *fragment_str,$/;"	f
encodedString	sequence/encode.h	/^    char *encodedString;$/;"	m	struct:__anon1
entropy_per_position	g_sa_analyze.c	/^void entropy_per_position(const char *outFilename, int sequenceLength, SeqSet *fastaSequenceSet, const output_env_t oenv) {$/;"	f
entropy_per_position	g_sa_encode.c	/^void entropy_per_position(const char *outFilename, int sequenceLength, SeqSet *fastaSequenceSet, const output_env_t oenv){$/;"	f
estimate_MI_error	g_sa_analyze.c	/^float estimate_MI_error(ProbMatrix *probMat, Set *codeSet, Set *altCodeSet, int nObs) {$/;"	f
eval_horn_NR_corrxn	structure/quatRMSD.c	/^eval_horn_NR_corrxn(const double *c, const double x)$/;"	f	file:
eval_horn_quart	structure/quatRMSD.c	/^eval_horn_quart(const double *c, const double x)$/;"	f
eval_horn_quart_deriv	structure/quatRMSD.c	/^eval_horn_quart_deriv(const double *c, const double x)$/;"	f
extend_segment	structure/transform_segment.c	/^float extend_segment(gsl_matrix *X, gsl_matrix *Y, gsl_matrix *U, gsl_vector *t, Vec *coords_A, Vec *coords_B, Vec *coords_D, Vec *refcoords, int npoints, int mpoints, int overlap)$/;"	f
extract_code_from_string	statistics/code.c	/^void extract_code_from_string(char *string, Set *codeSet) {$/;"	f
fitgrow_chain	structure/transform_segment.c	/^float fitgrow_chain(gsl_matrix *X, gsl_matrix *Y, gsl_matrix *U, gsl_vector *t, Vec *coords_A, Vec *coords_B, Vec *refcoords, int npoints, int mpoints, int overlap)$/;"	f
frag_overlap_rmsd	structure/fragments.c	/^float frag_overlap_rmsd(Str *fragment1, Str *fragment2, int lFragment, int overlap){$/;"	f
free_ReconStructure	sequence/encode.c	/^void free_ReconStructure(ReconStructure *reconStr, int nRecStr) {$/;"	f
free_colour_set	structure/fragment_colour.c	/^void free_colour_set(SA_colour *SA_colour_set){$/;"	f
free_float_matrix	general/matrix.c	/^void free_float_matrix(float **matrix, int nRow)$/;"	f
free_float_matrix3D	general/matrix.c	/^void free_float_matrix3D(float ***float_matrix3D, int x, int y)$/;"	f
free_fragment_sets	structure/fragments.c	/^void free_fragment_sets(FragmentSet *fragment_set)$/;"	f
free_int_matrix	general/matrix.c	/^void free_int_matrix(int **matrix, int nRow)$/;"	f
free_probability_matrix	statistics/probability.c	/^void free_probability_matrix(ProbMatrix *probMat) {$/;"	f
free_xpm_matrix	g_sa_analyze.c	/^void free_xpm_matrix(t_matrix *xpm_mat, int nmatcol, int nFragment) {$/;"	f
free_xpm_matrix	g_sa_encode.c	/^void free_xpm_matrix(t_matrix *xpm_mat, int nmatcol){$/;"	f
g	structure/fragment_colour.h	/^  float g;$/;"	m	struct:__anon15
getAltCode	partition/value.c	/^void getAltCode(float *rightSideVec, int rightSideVecLength, Data *data,$/;"	f
get_best_fragment	structure/fragments.c	/^int get_best_fragment(Vec *subStructure, FragmentSet *fragment_set, Str *fragment_str, float *ptr_rmsd){$/;"	f
get_string_from_column	sequence/sequence.c	/^char *get_string_from_column(SeqSet *fastaSequenceSet, int column) {$/;"	f
globalfit_encode	sequence/encode.c	/^void globalfit_encode(ReconStructure *recStr, ReconStructure *tempRecStr,$/;"	f
grow_chain	structure/transform_segment.c	/^float grow_chain(gsl_matrix *X, gsl_matrix *Y, gsl_matrix *U, gsl_vector *t, Vec *coords_A, Vec *coords_B, Vec *refcoords, int npoints, int mpoints, int overlap)$/;"	f
gsl_vector_cross	structure/kabsch.c	/^__inline__ static void gsl_vector_cross($/;"	f	file:
init_float_matrix3D	general/matrix.c	/^void init_float_matrix3D(float ***float_matrix3D, int x, int y, int z, float val)$/;"	f
initialise_ReconStructure	sequence/encode.c	/^ReconStructure *initialise_ReconStructure(int lFragment, int natom,$/;"	f
initialise_float_matrix	general/matrix.c	/^void initialise_float_matrix(float **matrix, int nRow, int nCol, float init_value)$/;"	f
initialise_fragment_set	structure/fragments.c	/^int initialise_fragment_set(FragmentSet *selected_set, char *setname){$/;"	f
initialise_int_matrix	general/matrix.c	/^void initialise_int_matrix(int **matrix, int nRow, int nCol, int init_value)$/;"	f
initialize_code_from_string	statistics/code.c	/^void initialize_code_from_string(char *string, Set *codeSet) {$/;"	f
initialize_prefix_sums	partition/object.c	/^void initialize_prefix_sums(float *p, int n, Collection *collection,$/;"	f
initialize_prefix_sums_wrapper	partition/score.c	/^void initialize_prefix_sums_wrapper(float *p, int n, Collection *collection,$/;"	f
initialize_probability_matrix	statistics/probability.c	/^void initialize_probability_matrix(ProbMatrix *probMat, Set *codeSet,$/;"	f
initialize_xpm_SA_mapping	g_sa_analyze.c	/^void initialize_xpm_SA_mapping(t_mapping *SA_mapping, FragmentSet *fragment_set, SA_colour *colours) {$/;"	f
initialize_xpm_SA_mapping	g_sa_encode.c	/^void initialize_xpm_SA_mapping(t_mapping *SA_mapping, FragmentSet *fragment_set, SA_colour *colours){$/;"	f
initialize_xpm_matrix	g_sa_analyze.c	/^void initialize_xpm_matrix(t_matrix *xpm_mat, int nx, int ny) {$/;"	f
initialize_xpm_matrix	g_sa_encode.c	/^void initialize_xpm_matrix(t_matrix *xpm_mat, int nx, int ny){$/;"	f
instance	partition/value.h	/^    Instance *instance; \/* input values *\/$/;"	m	struct:__anon19
joint_entropy	statistics/probability.c	/^float joint_entropy(ProbMatrix *probMat, Set *codeSet, Set *altCodeSet) {$/;"	f
kabsch	structure/kabsch.c	/^int kabsch($/;"	f
kabsch_alloc	structure/transform_segment.c	/^void kabsch_alloc(gsl_matrix **ptr_U, gsl_vector **ptr_t, gsl_matrix **ptr_X, gsl_matrix **ptr_Y, int npoints){$/;"	f
kabsch_free	structure/transform_segment.c	/^void kabsch_free(gsl_matrix *U, gsl_vector *t, gsl_matrix *X, gsl_matrix *Y){$/;"	f
lFragment	structure/fragments.h	/^    int lFragment;$/;"	m	struct:__anon2
lFragment	structure/fragments_coords.h	/^    int lFragment;$/;"	m	struct:__anon10
label	partition/label.h	/^    Label *label; \/* label *\/$/;"	m	struct:__anon12
length	structure/pdb_structure.h	/^    int length; \/* length of sequence *\/$/;"	m	struct:__anon4
load_colour_set	structure/fragment_colour.c	/^SA_colour *load_colour_set(int *ptr_nSet){$/;"	f
load_fragment_data	structure/fragments.c	/^Str *load_fragment_data(char *pdbCodeFileName, char *userCodeString, char *stralphabetName, FragmentSet *fragment_set, int pdbcode){$/;"	f
local_rmsd	structure/fragments.c	/^float local_rmsd(Vec *subStructure, Str *fragment, int lSubStr, int overlap){$/;"	f
localfit_encode	sequence/encode.c	/^void localfit_encode(ReconStructure *recStr, Vec *refcoord,$/;"	f
main	g_sa_analyze.c	/^int main(int argc,char *argv[])$/;"	f
main	g_sa_encode.c	/^int main(int argc,char *argv[])$/;"	f
max	partition/score.c	/^float max(float a, float b)$/;"	f
merge	general/mergesort.c	/^void merge(unsigned char *input, int left, int right, int length, int midpoint, size_t esize, unsigned char *scratch, int (*compare) (const void *key1, const void *key2)){$/;"	f
mergeSort	general/mergesort.c	/^void mergeSort(unsigned char *input, int left, int right, size_t esize, unsigned char *scratch, int (*compare) (const void *key1, const void *key2))$/;"	f
mutual_information	statistics/probability.c	/^float mutual_information(ProbMatrix *probMat, Set *codeSet, Set *altCodeSet) {$/;"	f
my_rank	g_sa_analyze.c	/^int my_rank = 0;$/;"	v
my_rank	g_sa_analyze.c	/^int my_rank; \/* rank of 'this' node *\/$/;"	v
my_rank	sequence/sequence.c	/^int my_rank = 0;$/;"	v
my_rank	sequence/sequence.c	/^int my_rank; \/* rank of 'this' node *\/$/;"	v
nElements	statistics/probability.h	/^    int nElements; \/* number of elements *\/$/;"	m	struct:__anon8
nFragment	structure/fragment_colour.h	/^	int nFragment;$/;"	m	struct:__anon16
nFragment	structure/fragments.h	/^    int nFragment;$/;"	m	struct:__anon2
nFragment	structure/fragments_coords.h	/^    int nFragment;$/;"	m	struct:__anon10
nFragmentVector	structure/fragment_colour.c	/^int nFragmentVector[] = {25};$/;"	v
nInstances	partition/value.h	/^    int nInstances; \/* number of values *\/$/;"	m	struct:__anon19
nLabels	partition/label.h	/^    int nLabels; \/* number of labels *\/$/;"	m	struct:__anon12
nObjects	partition/score.h	/^    int nObjects; \/* number of objects *\/$/;"	m	struct:__anon14
nSequences	sequence/sequence.h	/^    int nSequences; \/* number of elements *\/$/;"	m	struct:__anon17
nStructuralAlphabets	structure/fragment_colour.c	/^int nStructuralAlphabets = 1;$/;"	v
name	structure/pdb_structure.h	/^    char *name; \/* sequence name *\/$/;"	m	struct:__anon4
natom	sequence/encode.h	/^    int natom;$/;"	m	struct:__anon1
natom	structure/pdb_structure.h	/^	int natom; \/* number of selected (CA) atoms *\/$/;"	m	struct:__anon6
nodes	g_sa_analyze.c	/^int nodes = 1;$/;"	v
nodes	g_sa_analyze.c	/^int nodes; \/* number of nodes *\/$/;"	v
nodes	sequence/sequence.c	/^int nodes = 1;$/;"	v
nodes	sequence/sequence.c	/^int nodes; \/* number of nodes *\/$/;"	v
object	partition/score.h	/^    Object *object; \/* input objects to partition *\/$/;"	m	struct:__anon14
objectCost	partition/object.c	/^float objectCost(Collection *collection, int i, int score_idx) {$/;"	f
objectCost_wrapper	partition/score.c	/^float objectCost_wrapper(Collection *collection, int i, int score_idx) {$/;"	f
partition	partition/partition.c	/^void partition(Collection *collection, int n, int k, float *breaks,$/;"	f
partitionCost	partition/object.c	/^float partitionCost(Collection *collection, int i, int x, int score_idx) {$/;"	f
partitionCost_wrapper	partition/score.c	/^float partitionCost_wrapper(Collection *collection, int i, int x,$/;"	f
populate_probability_matrix	partition/value.c	/^void populate_probability_matrix(ProbMatrix *probMat, Data *data) {$/;"	f
pos	structure/pdb_structure.h	/^	Vec pos; \/* position vector *\/$/;"	m	struct:__anon5
print_float_matrix	general/matrix.c	/^void print_float_matrix(float **matrix, int nRow, int nCol)$/;"	f
print_int_matrix	general/matrix.c	/^void print_int_matrix(int **matrix, int nRow, int nCol)$/;"	f
print_partition_table	partition/partition.c	/^void print_partition_table(Collection *collection, LabelList *labelList, int k,$/;"	f
prob	statistics/probability.h	/^    float **prob; \/* probability matrix *\/$/;"	m	struct:__anon9
prob	statistics/probability.h	/^    float prob; \/* probability *\/$/;"	m	struct:__anon7
r	structure/fragment_colour.h	/^  float r;$/;"	m	struct:__anon15
random_column_mutual_information	g_sa_analyze.c	/^void random_column_mutual_information(float *ptr_meanMI, float *ptr_stdMI, float *ptr_pValueMI, float MIij, SeqSet *fastaSequenceSet, ProbMatrix *probMat, int icol, int jcol, int nSurrogates,	gsl_rng *rndGenerator) {$/;"	f
read_collection_file	partition/object.c	/^void read_collection_file(FILE *collectionFile, int n, Collection *collection)$/;"	f
read_data_file	partition/value.c	/^void read_data_file(FILE *dataFile, int n, Data *data, Set *codeSet)$/;"	f
read_fragments	structure/getfragments.c	/^void read_fragments(FILE *fragmentfile,  FragmentSet *fragment_set)$/;"	f
read_inputFileEnsemble	sequence/sequence.c	/^void read_inputFileEnsemble(FILE *inputFile, SeqSet *inputSequenceSet) {$/;"	f
read_label_file	partition/label.c	/^void read_label_file(FILE *labelFile, int n, LabelList *labelList)$/;"	f
read_n_fragments	structure/getfragments.c	/^void read_n_fragments(FILE *fragmentfile, FragmentSet *fragment_set, char *extended_codeOrder)$/;"	f
read_number_lines	partition/object.c	/^int read_number_lines(FILE *collectionFile)$/;"	f
reconstruct_partition	partition/partition.c	/^void reconstruct_partition(Collection *collection, int **dividers, int n, int k,$/;"	f
recordName	structure/pdb_structure.h	/^	char recordName[8]; \/* Record type; 1 -  6*\/$/;"	m	struct:__anon5
record_probabilities_from_string	statistics/code.c	/^void record_probabilities_from_string(char *string, Set *codeSet) {$/;"	f
res	structure/pdb_structure.h	/^    char *res; \/* array of residues = sequence *\/$/;"	m	struct:__anon4
reset_probabilities	statistics/code.c	/^void reset_probabilities(Set *codeSet) {$/;"	f
residueName	structure/pdb_structure.h	/^	char residueName[4]; \/* Residue name; 18 - 20 *\/$/;"	m	struct:__anon5
residueNumber	structure/pdb_structure.h	/^	int residueNumber; \/* Residue sequence number; 23 - 26 *\/$/;"	m	struct:__anon5
reverse_breaks_idx_list	partition/partition.c	/^void reverse_breaks_idx_list(int *breaks_idx, int nBreaks,$/;"	f
reverse_breaks_list	partition/partition.c	/^void reverse_breaks_list(float *breaks, int nBreaks, float *reverseBreaks) {$/;"	f
rmsd	sequence/encode.h	/^    float rmsd;$/;"	m	struct:__anon1
safe_malloc	general/safe.c	/^void *safe_malloc(size_t size)$/;"	f
safe_open	general/safe.c	/^FILE *safe_open(const char *name, const char *mode)$/;"	f
safe_realloc	general/safe.c	/^void *safe_realloc(void *ptr, size_t size)$/;"	f
save_SA_xpm_matrix	g_sa_analyze.c	/^void save_SA_xpm_matrix(FILE *xpmout, SeqSet *fastaSequenceSet, int sequenceLength, FragmentSet *fragment_set, SA_colour *SA_colour_set, int nColourSets) {$/;"	f
save_SA_xpm_matrix	g_sa_encode.c	/^void save_SA_xpm_matrix(FILE *xpmout, SeqSet *fastaSequenceSet, int sequenceLength, FragmentSet *fragment_set, SA_colour *SA_colour_set, int nColourSets){$/;"	f
sequence	sequence/sequence.h	/^    Seq *sequence; \/* array of sequences *\/$/;"	m	struct:__anon17
sequence	structure/pdb_structure.h	/^	Seq sequence; \/* sequence of structure *\/$/;"	m	struct:__anon6
setname	structure/fragments.h	/^    char *setname;$/;"	m	struct:__anon2
setname	structure/fragments_coords.h	/^    char setname[64];$/;"	m	struct:__anon10
sigma_square_average	structure/transform_segment.c	/^float sigma_square_average(gsl_matrix *U, gsl_vector *t, Vec *coords_A, Vec *coords_B, Vec *coords_C, int npoints, int iPos, int lStruct)$/;"	f
superimpose_segment	structure/transform_segment.c	/^float superimpose_segment(gsl_matrix *X, gsl_matrix *Y, gsl_matrix *U, gsl_vector *t, Vec *coords_A, Vec *coords_B, Vec *coords_C, int npoints)$/;"	f
text	partition/label.h	/^    char text[64]; \/* label text *\/$/;"	m	struct:__anon11
tpos	structure/pdb_structure.h	/^	Vec tpos; \/* transformed position vector *\/$/;"	m	struct:__anon5
transform	structure/transform_segment.c	/^__inline__ static void transform(Vec i_coords_B, Vec *i_coords_C, gsl_matrix *U, gsl_vector *t)$/;"	f	file:
transform_coordinates	structure/transform_segment.c	/^float transform_coordinates(gsl_matrix *U, gsl_vector *t, Vec *coords_A, Vec *coords_B, Vec *coords_C, int npoints)$/;"	f
value	partition/score.h	/^    float value; \/* object value *\/$/;"	m	struct:__anon13
value	partition/value.h	/^    float value; \/* value *\/$/;"	m	struct:__anon18
write_breaks	partition/partition.c	/^void write_breaks(float *breaks, int nBreaks, FILE *outputFile) {$/;"	f
write_data	partition/value.c	/^void write_data(Data *data, FILE *outputFile)$/;"	f
write_partitions	partition/object.c	/^void write_partitions(Collection *collection, int start, int end,$/;"	f
write_probabilities	statistics/probability.c	/^void write_probabilities(Set *codeSet, FILE *outputFile) {$/;"	f
x	structure/pdb_structure.h	/^   float x, y, z;$/;"	m	struct:__anon3
xyzVec2Mat	structure/vec2mat.c	/^void xyzVec2Mat(Vec *vec, double **matrix, int cols, int shift)$/;"	f
y	structure/pdb_structure.h	/^   float x, y, z;$/;"	m	struct:__anon3
z	structure/pdb_structure.h	/^   float x, y, z;$/;"	m	struct:__anon3
